
nios_project.elf:     file format elf32-littlenios2
nios_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000f54c memsz 0x0000f54c flags r-x
    LOAD off    0x0001056c vaddr 0x0800f56c paddr 0x08011084 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00012b9c vaddr 0x08012b9c paddr 0x08012b9c align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f098  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000318  0800f254  0800f254  00010254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0800f56c  08011084  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  08012b9c  08012b9c  00012b9c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08012cf8  08012cf8  00012084  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012084  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000cc8  00000000  00000000  000120a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002302d  00000000  00000000  00012d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008d8b  00000000  00000000  00035d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000abf9  00000000  00000000  0003eb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002200  00000000  00000000  00049724  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000032eb  00000000  00000000  0004b924  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016c85  00000000  00000000  0004ec0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00065894  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  000658b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00069f23  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00069f26  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00069f32  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00069f33  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00069f34  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00069f3f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00069f4a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00069f55  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  00069f60  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  00069f9d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ba24  00000000  00000000  0006eae9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0800f254 l    d  .rodata	00000000 .rodata
0800f56c l    d  .rwdata	00000000 .rwdata
08012b9c l    d  .bss	00000000 .bss
08012cf8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_project_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800f29a l     O .rodata	00000010 zeroes.4181
0800f2aa l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080024e0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004060 l     F .text	00000008 __fp_lock
08004068 l     F .text	00000008 __fp_unlock
0800407c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800f56c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800f9b0 l     O .rwdata	00000020 lc_ctype_charset
0800f990 l     O .rwdata	00000020 lc_message_charset
0800f9d0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800f2dc l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080069d4 l     F .text	000000fc __sprint_r.part.0
0800f410 l     O .rodata	00000010 blanks.4125
0800f400 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08009e90 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800c5bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800c6dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800c708 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800c808 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800c8fc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800c9e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800cbbc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08011074 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800ce18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800cf60 l     F .text	00000038 alt_dev_reg
0800ffb8 l     O .rwdata	00001060 jtag_uart_0
08011018 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800d264 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800d468 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800da88 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800e1b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800e6f4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800e82c l     F .text	00000050 alt_get_errno
0800e87c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800651c g     F .text	00000074 _mprec_log10
08006608 g     F .text	0000008c __any_on
080087c8 g     F .text	00000054 _isatty_r
0800f2e8 g     O .rodata	00000028 __mprec_tinytens
0800cb04 g     F .text	00000078 alt_main
08012bf8 g     O .bss	00000100 alt_irq
0800881c g     F .text	0000005c _lseek_r
08011084 g       *ABS*	00000000 __flash_rwdata_start
0800dbf8 g     F .text	0000003c alt_up_character_lcd_send_cmd
0800b124 g     F .text	00000084 .hidden __eqdf2
08012cf8 g       *ABS*	00000000 __alt_heap_start
08000354 g     F .text	0000003c printf
08009140 g     F .text	0000009c _wcrtomb_r
08006834 g     F .text	0000005c __sseek
080043b0 g     F .text	00000010 __sinit
08008fd0 g     F .text	00000154 __swbuf_r
08004984 g     F .text	0000007c _setlocale_r
0800421c g     F .text	00000064 __sfmoreglue
0800cb9c g     F .text	00000020 __malloc_unlock
08008878 g     F .text	0000015c memmove
08004398 g     F .text	00000018 _cleanup
08005708 g     F .text	000000a8 _Balloc
0800b1a8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800db84 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080082cc g     F .text	00000058 _fstat_r
08012bb4 g     O .bss	00000004 errno
080067b0 g     F .text	00000008 __seofread
08012bbc g     O .bss	00000004 alt_argv
08019044 g       *ABS*	00000000 _gp
08000234 g     F .text	00000050 putcharRS232
0800fe38 g     O .rwdata	00000180 alt_fd_list
080002c4 g     F .text	00000030 RS232TestForReceivedData
0800e364 g     F .text	00000090 alt_find_dev
080054ac g     F .text	00000138 memcpy
0800dd94 g     F .text	00000050 alt_up_character_lcd_write_fd
080001f8 g     F .text	0000003c Init_RS232
08004070 g     F .text	0000000c _cleanup_r
0800c3e4 g     F .text	000000d0 .hidden __floatsidf
0800e7b4 g     F .text	00000078 alt_io_redirect
0800b288 g     F .text	000000e0 .hidden __ltdf2
0800f254 g       *ABS*	00000000 __DTOR_END__
08006694 g     F .text	00000074 __fpclassifyd
08006478 g     F .text	000000a4 __ratio
08007e44 g     F .text	00000024 __vfiprintf_internal
0800d664 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000328 g     F .text	0000002c _printf_r
08009fac g     F .text	00000008 .hidden __udivsi3
0800c858 g     F .text	000000a4 isatty
0800f338 g     O .rodata	000000c8 __mprec_tens
08004a00 g     F .text	0000000c __locale_charset
0800ee24 g     F .text	0000008c alt_icache_flush
08012bb0 g     O .bss	00000004 __malloc_top_pad
0801104c g     O .rwdata	00000004 __mb_cur_max
08004a30 g     F .text	0000000c _localeconv_r
08008324 g     F .text	000004a4 __sfvwrite_r
08005b08 g     F .text	0000003c __i2b
08006708 g     F .text	00000054 _sbrk_r
080089d4 g     F .text	0000005c _read_r
0801106c g     O .rwdata	00000004 alt_max_fd
08007fdc g     F .text	00000100 _fclose_r
08004030 g     F .text	00000030 fflush
08012bac g     O .bss	00000004 __malloc_max_sbrked_mem
08009fbc g     F .text	0000089c .hidden __adddf3
08006220 g     F .text	0000011c __b2d
08009900 g     F .text	00000590 .hidden __umoddi3
0800ca30 g     F .text	000000d4 lseek
08011044 g     O .rwdata	00000004 _global_impure_ptr
08008a30 g     F .text	000005a0 _realloc_r
08012cf8 g       *ABS*	00000000 __bss_end
0800e604 g     F .text	000000f0 alt_iic_isr_register
0800eb38 g     F .text	00000104 alt_tick
08009340 g     F .text	000005c0 .hidden __udivdi3
080080f0 g     F .text	00000184 _fputwc_r
0800f310 g     O .rodata	00000028 __mprec_bigtens
080058ec g     F .text	00000104 __s2b
0800c4b4 g     F .text	000000a4 .hidden __floatunsidf
08005fc8 g     F .text	00000060 __mcmp
080043d0 g     F .text	00000018 __fp_lock_all
0800e5b8 g     F .text	0000004c alt_ic_irq_enabled
0800eaa0 g     F .text	00000098 alt_alarm_stop
08012bc4 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
0800fe10 g     O .rwdata	00000028 alt_dev_null
0800e028 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800e19c g     F .text	0000001c alt_dcache_flush_all
080059f0 g     F .text	00000068 __hi0bits
0800c35c g     F .text	00000088 .hidden __fixdfsi
08011084 g       *ABS*	00000000 __ram_rwdata_end
08011064 g     O .rwdata	00000008 alt_dev_list
0800ce68 g     F .text	000000f8 write
0800f56c g       *ABS*	00000000 __ram_rodata_end
0800c758 g     F .text	000000b0 fstat
0800b288 g     F .text	000000e0 .hidden __ledf2
08005d40 g     F .text	00000140 __pow5mult
08006ae8 g     F .text	0000135c ___vfiprintf_internal_r
08012ba4 g     O .bss	00000004 __nlocale_changed
08009fb4 g     F .text	00000008 .hidden __umodsi3
08012cf8 g       *ABS*	00000000 end
0800d1a0 g     F .text	000000c4 altera_avalon_jtag_uart_init
0800f254 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800dafc g     F .text	00000088 alt_avalon_timer_sc_init
0800c558 g     F .text	00000064 .hidden __clzsi2
0800d870 g     F .text	00000218 altera_avalon_jtag_uart_write
080043c0 g     F .text	00000004 __sfp_lock_acquire
080053c4 g     F .text	000000e8 memchr
0800dca8 g     F .text	00000078 alt_up_character_lcd_write
08000390 g     F .text	00001ffc ___vfprintf_internal_r
08004524 g     F .text	000002f0 _free_r
08004a0c g     F .text	00000010 __locale_mb_cur_max
0800f08c g     F .text	00000194 __call_exitprocs
08012ba0 g     O .bss	00000004 __mlocale_changed
08011050 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08012bc8 g     O .bss	00000004 _alt_tick_rate
08005e80 g     F .text	00000148 __lshift
08012bcc g     O .bss	00000004 _alt_nticks
0800cc0c g     F .text	000000fc read
0800cfcc g     F .text	00000070 alt_sys_init
0800dee0 g     F .text	00000088 alt_up_character_lcd_shift_display
0800ef78 g     F .text	00000114 __register_exitproc
08005b44 g     F .text	000001fc __multiply
0800df68 g     F .text	0000008c alt_up_character_lcd_erase_pos
0800d510 g     F .text	00000068 altera_avalon_jtag_uart_close
0800f56c g       *ABS*	00000000 __ram_rwdata_start
0800f254 g       *ABS*	00000000 __ram_rodata_start
08012bd0 g     O .bss	00000028 __malloc_current_mallinfo
0800633c g     F .text	0000013c __d2b
0800d03c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ed70 g     F .text	000000b4 alt_get_fd
08007ec4 g     F .text	00000054 _close_r
0800eefc g     F .text	0000007c memcmp
0800d0fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08012cf8 g       *ABS*	00000000 __alt_stack_base
0800d14c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080023b0 g     F .text	00000130 __swsetup_r
0800a858 g     F .text	000008cc .hidden __divdf3
08004280 g     F .text	00000118 __sfp
08006590 g     F .text	00000078 __copybits
0800fa08 g     O .rwdata	00000408 __malloc_av_
080043cc g     F .text	00000004 __sinit_lock_release
0800b368 g     F .text	00000724 .hidden __muldf3
0800675c g     F .text	00000054 __sread
0800ec5c g     F .text	00000114 alt_find_file
0800e208 g     F .text	000000a4 alt_dev_llist_insert
0800cb7c g     F .text	00000020 __malloc_lock
0800cd68 g     F .text	000000b0 sbrk
08003e08 g     F .text	00000228 _fflush_r
08007f18 g     F .text	000000c4 _calloc_r
08012b9c g       *ABS*	00000000 __bss_start
080055e4 g     F .text	00000124 memset
080002f4 g     F .text	00000034 main
08012bc0 g     O .bss	00000004 alt_envp
08012ba8 g     O .bss	00000004 __malloc_max_total_mem
0800d09c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009124 g     F .text	0000001c __swbuf
0800de58 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08006890 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080080dc g     F .text	00000014 fclose
080026e0 g     F .text	00001728 _dtoa_r
08004c1c g     F .text	000007a8 _malloc_r
080092b4 g     F .text	00000030 __ascii_wctomb
08011070 g     O .rwdata	00000004 alt_errno
08004814 g     F .text	000000b8 _fwalk
08009efc g     F .text	00000054 .hidden __divsi3
0800dc68 g     F .text	00000040 alt_up_character_lcd_open_dev
08004400 g     F .text	00000124 _malloc_trim_r
0800f254 g       *ABS*	00000000 __CTOR_END__
0800dc34 g     F .text	00000034 alt_up_character_lcd_init
08006898 g     F .text	000000a4 strcmp
0800f254 g       *ABS*	00000000 __flash_rodata_start
0800f254 g       *ABS*	00000000 __DTOR_LIST__
0800b124 g     F .text	00000084 .hidden __nedf2
0800cf98 g     F .text	00000034 alt_irq_init
0800cd08 g     F .text	00000060 alt_release_fd
0800dff4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0800f420 g     O .rodata	00000100 .hidden __clz_tab
08012b9c g     O .bss	00000004 _PathLocale
0800eeb0 g     F .text	00000014 atexit
08007e68 g     F .text	0000005c _write_r
08004a3c g     F .text	0000001c setlocale
08011048 g     O .rwdata	00000004 _impure_ptr
08012bb8 g     O .bss	00000004 alt_argc
0800e308 g     F .text	0000005c _do_dtors
08004a28 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080061c0 g     F .text	00000060 __ulp
080043e8 g     F .text	00000018 __fp_unlock_all
0801105c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004a58 g     F .text	0000000c localeconv
08000284 g     F .text	00000040 getcharRS232
0800e424 g     F .text	00000050 alt_ic_isr_register
08011084 g       *ABS*	00000000 _edata
08012cf8 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800d578 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800e514 g     F .text	000000a4 alt_ic_irq_disable
080067b8 g     F .text	0000007c __swrite
08011054 g     O .rwdata	00000004 __malloc_trim_threshold
0800ec3c g     F .text	00000020 altera_nios2_qsys_irq_init
08004a1c g     F .text	0000000c __locale_msgcharset
0800eec4 g     F .text	00000038 exit
080048cc g     F .text	000000b8 _fwalk_reent
08006028 g     F .text	00000198 __mdiff
08009f50 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080043c4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800dd20 g     F .text	00000074 alt_up_character_lcd_string
0800f220 g     F .text	00000034 _exit
0800e05c g     F .text	00000140 alt_alarm_start
08004a64 g     F .text	000001b8 __smakebuf_r
0800693c g     F .text	00000098 strlen
0800e948 g     F .text	00000158 open
0800b1a8 g     F .text	000000e0 .hidden __gedf2
08011058 g     O .rwdata	00000004 __wctomb
08006ad0 g     F .text	00000018 __sprint_r
0800e3f4 g     F .text	00000030 alt_icache_flush_all
0800dde4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08011078 g     O .rwdata	00000004 alt_priority_mask
0800e474 g     F .text	000000a0 alt_ic_irq_enable
0800238c g     F .text	00000024 __vfprintf_internal
080092e4 g     F .text	0000005c _wctomb_r
0800ba8c g     F .text	000008d0 .hidden __subdf3
08005a58 g     F .text	000000b0 __lo0bits
0801107c g     O .rwdata	00000008 alt_alarm_list
0800e2ac g     F .text	0000005c _do_ctors
080091dc g     F .text	000000d8 wcrtomb
0800c60c g     F .text	000000d0 close
0800c960 g     F .text	00000080 alt_load
08008274 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080043c8 g     F .text	00000004 __sinit_lock_acquire
080057d8 g     F .text	00000114 __multadd
080057b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__reset-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	108afe04 	addi	r2,r2,11256
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	108afe04 	addi	r2,r2,11256
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6a41114 	ori	gp,gp,36932
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	108ae714 	ori	r2,r2,11164

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cb3e14 	ori	r3,r3,11512

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800c9600 	call	800c960 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800cb040 	call	800cb04 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <Init_RS232>:
int putcharRS232(int c);
int getcharRS232(void);
int RS232TestForReceivedData(void);

void Init_RS232(void)
{
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
  // set RTS low, use 8 bits of data, no parity, 1 stop bit,
  // transmitter interrupt disabled
  // program baud rate generator to use 115k baud

  // 0001 0101
  RS232_Control = 0x15;
 8000204:	00a10034 	movhi	r2,33792
 8000208:	10808404 	addi	r2,r2,528
 800020c:	00c00544 	movi	r3,21
 8000210:	10c00005 	stb	r3,0(r2)
  // 115200 baud rate
  RS232_Baud = 0x01;
 8000214:	00a10034 	movhi	r2,33792
 8000218:	10808504 	addi	r2,r2,532
 800021c:	00c00044 	movi	r3,1
 8000220:	10c00005 	stb	r3,0(r2)
}
 8000224:	e037883a 	mov	sp,fp
 8000228:	df000017 	ldw	fp,0(sp)
 800022c:	dec00104 	addi	sp,sp,4
 8000230:	f800283a 	ret

08000234 <putcharRS232>:

int putcharRS232(int c)
{
 8000234:	defffe04 	addi	sp,sp,-8
 8000238:	df000115 	stw	fp,4(sp)
 800023c:	df000104 	addi	fp,sp,4
 8000240:	e13fff15 	stw	r4,-4(fp)
  // poll Tx bit in 6850 status register. Wait for it to become '1'
  // write 'c' to the 6850 TxData register to output the character
  while (!(RS232_Status & 0x02));
 8000244:	0001883a 	nop
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10808404 	addi	r2,r2,528
 8000250:	10800003 	ldbu	r2,0(r2)
 8000254:	10803fcc 	andi	r2,r2,255
 8000258:	1080008c 	andi	r2,r2,2
 800025c:	103ffa26 	beq	r2,zero,8000248 <__alt_data_end+0xfc000248>
  RS232_TxData = (unsigned char) c;
 8000260:	00a10034 	movhi	r2,33792
 8000264:	10808484 	addi	r2,r2,530
 8000268:	e0ffff17 	ldw	r3,-4(fp)
 800026c:	10c00005 	stb	r3,0(r2)
  return c; // return c
 8000270:	e0bfff17 	ldw	r2,-4(fp)
}
 8000274:	e037883a 	mov	sp,fp
 8000278:	df000017 	ldw	fp,0(sp)
 800027c:	dec00104 	addi	sp,sp,4
 8000280:	f800283a 	ret

08000284 <getcharRS232>:

int getcharRS232(void)
{
 8000284:	defffe04 	addi	sp,sp,-8
 8000288:	dfc00115 	stw	ra,4(sp)
 800028c:	df000015 	stw	fp,0(sp)
 8000290:	d839883a 	mov	fp,sp
  // poll Rx bit in 6850 status register. Wait for it to become '1'
  // read received character from 6850 RxData register.
  while (!RS232TestForReceivedData());
 8000294:	0001883a 	nop
 8000298:	80002c40 	call	80002c4 <RS232TestForReceivedData>
 800029c:	103ffe26 	beq	r2,zero,8000298 <__alt_data_end+0xfc000298>
  return RS232_RxData;
 80002a0:	00a10034 	movhi	r2,33792
 80002a4:	10808484 	addi	r2,r2,530
 80002a8:	10800003 	ldbu	r2,0(r2)
 80002ac:	10803fcc 	andi	r2,r2,255
}
 80002b0:	e037883a 	mov	sp,fp
 80002b4:	dfc00117 	ldw	ra,4(sp)
 80002b8:	df000017 	ldw	fp,0(sp)
 80002bc:	dec00204 	addi	sp,sp,8
 80002c0:	f800283a 	ret

080002c4 <RS232TestForReceivedData>:

int RS232TestForReceivedData(void)
{
 80002c4:	deffff04 	addi	sp,sp,-4
 80002c8:	df000015 	stw	fp,0(sp)
 80002cc:	d839883a 	mov	fp,sp
  // Test Rx bit in 6850 serial comms chip status register
  // if RX bit is set, return TRUE, otherwise return FALSE
  return RS232_Status & 0x01;
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	10808404 	addi	r2,r2,528
 80002d8:	10800003 	ldbu	r2,0(r2)
 80002dc:	10803fcc 	andi	r2,r2,255
 80002e0:	1080004c 	andi	r2,r2,1
}
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <main>:

int main()
{
 80002f4:	defffd04 	addi	sp,sp,-12
 80002f8:	dfc00215 	stw	ra,8(sp)
 80002fc:	df000115 	stw	fp,4(sp)
 8000300:	df000104 	addi	fp,sp,4
  Init_RS232();
 8000304:	80001f80 	call	80001f8 <Init_RS232>

  while(1)
  {
    char c = getcharRS232();
 8000308:	80002840 	call	8000284 <getcharRS232>
 800030c:	e0bfff05 	stb	r2,-4(fp)
    printf("%c\n", c);
 8000310:	e0bfff07 	ldb	r2,-4(fp)
 8000314:	01020074 	movhi	r4,2049
 8000318:	213c9504 	addi	r4,r4,-3500
 800031c:	100b883a 	mov	r5,r2
 8000320:	80003540 	call	8000354 <printf>
  }
 8000324:	003ff806 	br	8000308 <__alt_data_end+0xfc000308>

08000328 <_printf_r>:
 8000328:	defffd04 	addi	sp,sp,-12
 800032c:	dfc00015 	stw	ra,0(sp)
 8000330:	d9800115 	stw	r6,4(sp)
 8000334:	d9c00215 	stw	r7,8(sp)
 8000338:	280d883a 	mov	r6,r5
 800033c:	21400217 	ldw	r5,8(r4)
 8000340:	d9c00104 	addi	r7,sp,4
 8000344:	80003900 	call	8000390 <___vfprintf_internal_r>
 8000348:	dfc00017 	ldw	ra,0(sp)
 800034c:	dec00304 	addi	sp,sp,12
 8000350:	f800283a 	ret

08000354 <printf>:
 8000354:	defffc04 	addi	sp,sp,-16
 8000358:	dfc00015 	stw	ra,0(sp)
 800035c:	d9400115 	stw	r5,4(sp)
 8000360:	d9800215 	stw	r6,8(sp)
 8000364:	d9c00315 	stw	r7,12(sp)
 8000368:	00820074 	movhi	r2,2049
 800036c:	10841204 	addi	r2,r2,4168
 8000370:	10800017 	ldw	r2,0(r2)
 8000374:	200b883a 	mov	r5,r4
 8000378:	d9800104 	addi	r6,sp,4
 800037c:	11000217 	ldw	r4,8(r2)
 8000380:	800238c0 	call	800238c <__vfprintf_internal>
 8000384:	dfc00017 	ldw	ra,0(sp)
 8000388:	dec00404 	addi	sp,sp,16
 800038c:	f800283a 	ret

08000390 <___vfprintf_internal_r>:
 8000390:	defeb604 	addi	sp,sp,-1320
 8000394:	dfc14915 	stw	ra,1316(sp)
 8000398:	ddc14715 	stw	r23,1308(sp)
 800039c:	dd814615 	stw	r22,1304(sp)
 80003a0:	282f883a 	mov	r23,r5
 80003a4:	202d883a 	mov	r22,r4
 80003a8:	d9812a15 	stw	r6,1192(sp)
 80003ac:	d9c12d15 	stw	r7,1204(sp)
 80003b0:	df014815 	stw	fp,1312(sp)
 80003b4:	dd414515 	stw	r21,1300(sp)
 80003b8:	dd014415 	stw	r20,1296(sp)
 80003bc:	dcc14315 	stw	r19,1292(sp)
 80003c0:	dc814215 	stw	r18,1288(sp)
 80003c4:	dc414115 	stw	r17,1284(sp)
 80003c8:	dc014015 	stw	r16,1280(sp)
 80003cc:	8004a300 	call	8004a30 <_localeconv_r>
 80003d0:	10800017 	ldw	r2,0(r2)
 80003d4:	1009883a 	mov	r4,r2
 80003d8:	d8813515 	stw	r2,1236(sp)
 80003dc:	800693c0 	call	800693c <strlen>
 80003e0:	d8813815 	stw	r2,1248(sp)
 80003e4:	b0000226 	beq	r22,zero,80003f0 <___vfprintf_internal_r+0x60>
 80003e8:	b0800e17 	ldw	r2,56(r22)
 80003ec:	10010426 	beq	r2,zero,8000800 <___vfprintf_internal_r+0x470>
 80003f0:	b8c0030b 	ldhu	r3,12(r23)
 80003f4:	1908000c 	andi	r4,r3,8192
 80003f8:	1805883a 	mov	r2,r3
 80003fc:	2000071e 	bne	r4,zero,800041c <___vfprintf_internal_r+0x8c>
 8000400:	b9001917 	ldw	r4,100(r23)
 8000404:	18880014 	ori	r2,r3,8192
 8000408:	00f7ffc4 	movi	r3,-8193
 800040c:	20c8703a 	and	r4,r4,r3
 8000410:	b880030d 	sth	r2,12(r23)
 8000414:	1007883a 	mov	r3,r2
 8000418:	b9001915 	stw	r4,100(r23)
 800041c:	1100020c 	andi	r4,r2,8
 8000420:	2000a726 	beq	r4,zero,80006c0 <___vfprintf_internal_r+0x330>
 8000424:	b9000417 	ldw	r4,16(r23)
 8000428:	2000a526 	beq	r4,zero,80006c0 <___vfprintf_internal_r+0x330>
 800042c:	1080068c 	andi	r2,r2,26
 8000430:	01000284 	movi	r4,10
 8000434:	1100ab26 	beq	r2,r4,80006e4 <___vfprintf_internal_r+0x354>
 8000438:	dac10e04 	addi	r11,sp,1080
 800043c:	db010dc4 	addi	r12,sp,1079
 8000440:	d8800404 	addi	r2,sp,16
 8000444:	05020074 	movhi	r20,2049
 8000448:	dac12815 	stw	r11,1184(sp)
 800044c:	5b17c83a 	sub	r11,r11,r12
 8000450:	a53ca684 	addi	r20,r20,-3430
 8000454:	db012915 	stw	r12,1188(sp)
 8000458:	d8811e15 	stw	r2,1144(sp)
 800045c:	d8012015 	stw	zero,1152(sp)
 8000460:	d8011f15 	stw	zero,1148(sp)
 8000464:	d8013315 	stw	zero,1228(sp)
 8000468:	d8013715 	stw	zero,1244(sp)
 800046c:	d8013915 	stw	zero,1252(sp)
 8000470:	d8013b15 	stw	zero,1260(sp)
 8000474:	d8013a15 	stw	zero,1256(sp)
 8000478:	d8012f15 	stw	zero,1212(sp)
 800047c:	1011883a 	mov	r8,r2
 8000480:	dac13c15 	stw	r11,1264(sp)
 8000484:	db012a17 	ldw	r12,1192(sp)
 8000488:	60800007 	ldb	r2,0(r12)
 800048c:	1000df26 	beq	r2,zero,800080c <___vfprintf_internal_r+0x47c>
 8000490:	00c00944 	movi	r3,37
 8000494:	10c0dd26 	beq	r2,r3,800080c <___vfprintf_internal_r+0x47c>
 8000498:	6021883a 	mov	r16,r12
 800049c:	00000106 	br	80004a4 <___vfprintf_internal_r+0x114>
 80004a0:	10c08426 	beq	r2,r3,80006b4 <___vfprintf_internal_r+0x324>
 80004a4:	84000044 	addi	r16,r16,1
 80004a8:	80800007 	ldb	r2,0(r16)
 80004ac:	103ffc1e 	bne	r2,zero,80004a0 <__alt_data_end+0xfc0004a0>
 80004b0:	dac12a17 	ldw	r11,1192(sp)
 80004b4:	82e3c83a 	sub	r17,r16,r11
 80004b8:	88000f26 	beq	r17,zero,80004f8 <___vfprintf_internal_r+0x168>
 80004bc:	d8c12017 	ldw	r3,1152(sp)
 80004c0:	d8811f17 	ldw	r2,1148(sp)
 80004c4:	dac12a17 	ldw	r11,1192(sp)
 80004c8:	1c47883a 	add	r3,r3,r17
 80004cc:	10800044 	addi	r2,r2,1
 80004d0:	d8c12015 	stw	r3,1152(sp)
 80004d4:	42c00015 	stw	r11,0(r8)
 80004d8:	44400115 	stw	r17,4(r8)
 80004dc:	d8811f15 	stw	r2,1148(sp)
 80004e0:	00c001c4 	movi	r3,7
 80004e4:	1880b416 	blt	r3,r2,80007b8 <___vfprintf_internal_r+0x428>
 80004e8:	42000204 	addi	r8,r8,8
 80004ec:	db012f17 	ldw	r12,1212(sp)
 80004f0:	6459883a 	add	r12,r12,r17
 80004f4:	db012f15 	stw	r12,1212(sp)
 80004f8:	80800007 	ldb	r2,0(r16)
 80004fc:	1000b526 	beq	r2,zero,80007d4 <___vfprintf_internal_r+0x444>
 8000500:	80800044 	addi	r2,r16,1
 8000504:	84000047 	ldb	r16,1(r16)
 8000508:	d8012785 	stb	zero,1182(sp)
 800050c:	000d883a 	mov	r6,zero
 8000510:	027fffc4 	movi	r9,-1
 8000514:	d8012e15 	stw	zero,1208(sp)
 8000518:	0023883a 	mov	r17,zero
 800051c:	01001604 	movi	r4,88
 8000520:	01400244 	movi	r5,9
 8000524:	02800a84 	movi	r10,42
 8000528:	01c01b04 	movi	r7,108
 800052c:	10c00044 	addi	r3,r2,1
 8000530:	80bff804 	addi	r2,r16,-32
 8000534:	2082f236 	bltu	r4,r2,8001100 <___vfprintf_internal_r+0xd70>
 8000538:	100490ba 	slli	r2,r2,2
 800053c:	02c20034 	movhi	r11,2048
 8000540:	5ac15404 	addi	r11,r11,1360
 8000544:	12c5883a 	add	r2,r2,r11
 8000548:	10800017 	ldw	r2,0(r2)
 800054c:	1000683a 	jmp	r2
 8000550:	08000f48 	cmpgei	zero,at,61
 8000554:	08001100 	call	800110 <__reset-0x77ffef0>
 8000558:	08001100 	call	800110 <__reset-0x77ffef0>
 800055c:	08000f68 	cmpgeui	zero,at,61
 8000560:	08001100 	call	800110 <__reset-0x77ffef0>
 8000564:	08001100 	call	800110 <__reset-0x77ffef0>
 8000568:	08001100 	call	800110 <__reset-0x77ffef0>
 800056c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000570:	08001100 	call	800110 <__reset-0x77ffef0>
 8000574:	08001100 	call	800110 <__reset-0x77ffef0>
 8000578:	080010c4 	addi	zero,at,67
 800057c:	080010f0 	cmpltui	zero,at,67
 8000580:	08001100 	call	800110 <__reset-0x77ffef0>
 8000584:	08000814 	ori	zero,at,32
 8000588:	08000824 	muli	zero,at,32
 800058c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000590:	08000864 	muli	zero,at,33
 8000594:	08000d58 	cmpnei	zero,at,53
 8000598:	08000d58 	cmpnei	zero,at,53
 800059c:	08000d58 	cmpnei	zero,at,53
 80005a0:	08000d58 	cmpnei	zero,at,53
 80005a4:	08000d58 	cmpnei	zero,at,53
 80005a8:	08000d58 	cmpnei	zero,at,53
 80005ac:	08000d58 	cmpnei	zero,at,53
 80005b0:	08000d58 	cmpnei	zero,at,53
 80005b4:	08000d58 	cmpnei	zero,at,53
 80005b8:	08001100 	call	800110 <__reset-0x77ffef0>
 80005bc:	08001100 	call	800110 <__reset-0x77ffef0>
 80005c0:	08001100 	call	800110 <__reset-0x77ffef0>
 80005c4:	08001100 	call	800110 <__reset-0x77ffef0>
 80005c8:	08001100 	call	800110 <__reset-0x77ffef0>
 80005cc:	08001100 	call	800110 <__reset-0x77ffef0>
 80005d0:	08001100 	call	800110 <__reset-0x77ffef0>
 80005d4:	08001100 	call	800110 <__reset-0x77ffef0>
 80005d8:	08001100 	call	800110 <__reset-0x77ffef0>
 80005dc:	08001100 	call	800110 <__reset-0x77ffef0>
 80005e0:	08000d8c 	andi	zero,at,54
 80005e4:	08000874 	orhi	zero,at,33
 80005e8:	08001100 	call	800110 <__reset-0x77ffef0>
 80005ec:	08000874 	orhi	zero,at,33
 80005f0:	08001100 	call	800110 <__reset-0x77ffef0>
 80005f4:	08001100 	call	800110 <__reset-0x77ffef0>
 80005f8:	08001100 	call	800110 <__reset-0x77ffef0>
 80005fc:	08001100 	call	800110 <__reset-0x77ffef0>
 8000600:	08000918 	cmpnei	zero,at,36
 8000604:	08001100 	call	800110 <__reset-0x77ffef0>
 8000608:	08001100 	call	800110 <__reset-0x77ffef0>
 800060c:	08000928 	cmpgeui	zero,at,36
 8000610:	08001100 	call	800110 <__reset-0x77ffef0>
 8000614:	08001100 	call	800110 <__reset-0x77ffef0>
 8000618:	08001100 	call	800110 <__reset-0x77ffef0>
 800061c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000620:	08001100 	call	800110 <__reset-0x77ffef0>
 8000624:	08000d24 	muli	zero,at,52
 8000628:	08001100 	call	800110 <__reset-0x77ffef0>
 800062c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000630:	08000dd4 	ori	zero,at,55
 8000634:	08001100 	call	800110 <__reset-0x77ffef0>
 8000638:	08001100 	call	800110 <__reset-0x77ffef0>
 800063c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000640:	08001100 	call	800110 <__reset-0x77ffef0>
 8000644:	08001100 	call	800110 <__reset-0x77ffef0>
 8000648:	08001100 	call	800110 <__reset-0x77ffef0>
 800064c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000650:	08001100 	call	800110 <__reset-0x77ffef0>
 8000654:	08001100 	call	800110 <__reset-0x77ffef0>
 8000658:	08001100 	call	800110 <__reset-0x77ffef0>
 800065c:	08000fc8 	cmpgei	zero,at,63
 8000660:	08000f78 	rdprs	zero,at,61
 8000664:	08000874 	orhi	zero,at,33
 8000668:	08000874 	orhi	zero,at,33
 800066c:	08000874 	orhi	zero,at,33
 8000670:	08000fb8 	rdprs	zero,at,62
 8000674:	08000f78 	rdprs	zero,at,61
 8000678:	08001100 	call	800110 <__reset-0x77ffef0>
 800067c:	08001100 	call	800110 <__reset-0x77ffef0>
 8000680:	08000ec0 	call	8000ec <__reset-0x77fff14>
 8000684:	08001100 	call	800110 <__reset-0x77ffef0>
 8000688:	08000ed4 	ori	zero,at,59
 800068c:	08000f08 	cmpgei	zero,at,60
 8000690:	08001008 	cmpgei	zero,at,64
 8000694:	08000e30 	cmpltui	zero,at,56
 8000698:	08001100 	call	800110 <__reset-0x77ffef0>
 800069c:	08001050 	cmplti	zero,at,65
 80006a0:	08001100 	call	800110 <__reset-0x77ffef0>
 80006a4:	08000e40 	call	8000e4 <__reset-0x77fff1c>
 80006a8:	08001100 	call	800110 <__reset-0x77ffef0>
 80006ac:	08001100 	call	800110 <__reset-0x77ffef0>
 80006b0:	08000e80 	call	8000e8 <__reset-0x77fff18>
 80006b4:	db012a17 	ldw	r12,1192(sp)
 80006b8:	8323c83a 	sub	r17,r16,r12
 80006bc:	003f7e06 	br	80004b8 <__alt_data_end+0xfc0004b8>
 80006c0:	b009883a 	mov	r4,r22
 80006c4:	b80b883a 	mov	r5,r23
 80006c8:	80023b00 	call	80023b0 <__swsetup_r>
 80006cc:	10002d1e 	bne	r2,zero,8000784 <___vfprintf_internal_r+0x3f4>
 80006d0:	b8c0030b 	ldhu	r3,12(r23)
 80006d4:	01000284 	movi	r4,10
 80006d8:	1805883a 	mov	r2,r3
 80006dc:	1080068c 	andi	r2,r2,26
 80006e0:	113f551e 	bne	r2,r4,8000438 <__alt_data_end+0xfc000438>
 80006e4:	b880038b 	ldhu	r2,14(r23)
 80006e8:	113fffcc 	andi	r4,r2,65535
 80006ec:	2120001c 	xori	r4,r4,32768
 80006f0:	21200004 	addi	r4,r4,-32768
 80006f4:	203f5016 	blt	r4,zero,8000438 <__alt_data_end+0xfc000438>
 80006f8:	bac01917 	ldw	r11,100(r23)
 80006fc:	ba800717 	ldw	r10,28(r23)
 8000700:	ba400917 	ldw	r9,36(r23)
 8000704:	d9812a17 	ldw	r6,1192(sp)
 8000708:	d9c12d17 	ldw	r7,1204(sp)
 800070c:	02010004 	movi	r8,1024
 8000710:	18ffff4c 	andi	r3,r3,65533
 8000714:	d881078d 	sth	r2,1054(sp)
 8000718:	b009883a 	mov	r4,r22
 800071c:	d8800404 	addi	r2,sp,16
 8000720:	d9410404 	addi	r5,sp,1040
 8000724:	d8c1070d 	sth	r3,1052(sp)
 8000728:	dac11d15 	stw	r11,1140(sp)
 800072c:	da810b15 	stw	r10,1068(sp)
 8000730:	da410d15 	stw	r9,1076(sp)
 8000734:	d8810415 	stw	r2,1040(sp)
 8000738:	d8810815 	stw	r2,1056(sp)
 800073c:	da010615 	stw	r8,1048(sp)
 8000740:	da010915 	stw	r8,1060(sp)
 8000744:	d8010a15 	stw	zero,1064(sp)
 8000748:	80003900 	call	8000390 <___vfprintf_internal_r>
 800074c:	1021883a 	mov	r16,r2
 8000750:	10000416 	blt	r2,zero,8000764 <___vfprintf_internal_r+0x3d4>
 8000754:	b009883a 	mov	r4,r22
 8000758:	d9410404 	addi	r5,sp,1040
 800075c:	8003e080 	call	8003e08 <_fflush_r>
 8000760:	1006ee1e 	bne	r2,zero,800231c <___vfprintf_internal_r+0x1f8c>
 8000764:	d881070b 	ldhu	r2,1052(sp)
 8000768:	1080100c 	andi	r2,r2,64
 800076c:	10000326 	beq	r2,zero,800077c <___vfprintf_internal_r+0x3ec>
 8000770:	b880030b 	ldhu	r2,12(r23)
 8000774:	10801014 	ori	r2,r2,64
 8000778:	b880030d 	sth	r2,12(r23)
 800077c:	8005883a 	mov	r2,r16
 8000780:	00000106 	br	8000788 <___vfprintf_internal_r+0x3f8>
 8000784:	00bfffc4 	movi	r2,-1
 8000788:	dfc14917 	ldw	ra,1316(sp)
 800078c:	df014817 	ldw	fp,1312(sp)
 8000790:	ddc14717 	ldw	r23,1308(sp)
 8000794:	dd814617 	ldw	r22,1304(sp)
 8000798:	dd414517 	ldw	r21,1300(sp)
 800079c:	dd014417 	ldw	r20,1296(sp)
 80007a0:	dcc14317 	ldw	r19,1292(sp)
 80007a4:	dc814217 	ldw	r18,1288(sp)
 80007a8:	dc414117 	ldw	r17,1284(sp)
 80007ac:	dc014017 	ldw	r16,1280(sp)
 80007b0:	dec14a04 	addi	sp,sp,1320
 80007b4:	f800283a 	ret
 80007b8:	b009883a 	mov	r4,r22
 80007bc:	b80b883a 	mov	r5,r23
 80007c0:	d9811e04 	addi	r6,sp,1144
 80007c4:	8006ad00 	call	8006ad0 <__sprint_r>
 80007c8:	1000081e 	bne	r2,zero,80007ec <___vfprintf_internal_r+0x45c>
 80007cc:	da000404 	addi	r8,sp,16
 80007d0:	003f4606 	br	80004ec <__alt_data_end+0xfc0004ec>
 80007d4:	d8812017 	ldw	r2,1152(sp)
 80007d8:	10000426 	beq	r2,zero,80007ec <___vfprintf_internal_r+0x45c>
 80007dc:	b009883a 	mov	r4,r22
 80007e0:	b80b883a 	mov	r5,r23
 80007e4:	d9811e04 	addi	r6,sp,1144
 80007e8:	8006ad00 	call	8006ad0 <__sprint_r>
 80007ec:	b880030b 	ldhu	r2,12(r23)
 80007f0:	1080100c 	andi	r2,r2,64
 80007f4:	103fe31e 	bne	r2,zero,8000784 <__alt_data_end+0xfc000784>
 80007f8:	d8812f17 	ldw	r2,1212(sp)
 80007fc:	003fe206 	br	8000788 <__alt_data_end+0xfc000788>
 8000800:	b009883a 	mov	r4,r22
 8000804:	80043b00 	call	80043b0 <__sinit>
 8000808:	003ef906 	br	80003f0 <__alt_data_end+0xfc0003f0>
 800080c:	dc012a17 	ldw	r16,1192(sp)
 8000810:	003f3906 	br	80004f8 <__alt_data_end+0xfc0004f8>
 8000814:	1805883a 	mov	r2,r3
 8000818:	8c400114 	ori	r17,r17,4
 800081c:	1c000007 	ldb	r16,0(r3)
 8000820:	003f4206 	br	800052c <__alt_data_end+0xfc00052c>
 8000824:	1c000007 	ldb	r16,0(r3)
 8000828:	18800044 	addi	r2,r3,1
 800082c:	8286b326 	beq	r16,r10,80022fc <___vfprintf_internal_r+0x1f6c>
 8000830:	82fff404 	addi	r11,r16,-48
 8000834:	1007883a 	mov	r3,r2
 8000838:	0013883a 	mov	r9,zero
 800083c:	2aff3c36 	bltu	r5,r11,8000530 <__alt_data_end+0xfc000530>
 8000840:	1c000007 	ldb	r16,0(r3)
 8000844:	4a4002a4 	muli	r9,r9,10
 8000848:	18c00044 	addi	r3,r3,1
 800084c:	5a53883a 	add	r9,r11,r9
 8000850:	82fff404 	addi	r11,r16,-48
 8000854:	2afffa2e 	bgeu	r5,r11,8000840 <__alt_data_end+0xfc000840>
 8000858:	483f350e 	bge	r9,zero,8000530 <__alt_data_end+0xfc000530>
 800085c:	027fffc4 	movi	r9,-1
 8000860:	003f3306 	br	8000530 <__alt_data_end+0xfc000530>
 8000864:	8c402014 	ori	r17,r17,128
 8000868:	1805883a 	mov	r2,r3
 800086c:	1c000007 	ldb	r16,0(r3)
 8000870:	003f2e06 	br	800052c <__alt_data_end+0xfc00052c>
 8000874:	db012d17 	ldw	r12,1204(sp)
 8000878:	dac12d17 	ldw	r11,1204(sp)
 800087c:	d8c12a15 	stw	r3,1192(sp)
 8000880:	63000017 	ldw	r12,0(r12)
 8000884:	5ac00117 	ldw	r11,4(r11)
 8000888:	d9812785 	stb	r6,1182(sp)
 800088c:	6009883a 	mov	r4,r12
 8000890:	580b883a 	mov	r5,r11
 8000894:	db013715 	stw	r12,1244(sp)
 8000898:	da013f15 	stw	r8,1276(sp)
 800089c:	da413e15 	stw	r9,1272(sp)
 80008a0:	dac13915 	stw	r11,1252(sp)
 80008a4:	80066940 	call	8006694 <__fpclassifyd>
 80008a8:	db012d17 	ldw	r12,1204(sp)
 80008ac:	04800044 	movi	r18,1
 80008b0:	da013f17 	ldw	r8,1276(sp)
 80008b4:	64c00204 	addi	r19,r12,8
 80008b8:	da413e17 	ldw	r9,1272(sp)
 80008bc:	d9013717 	ldw	r4,1244(sp)
 80008c0:	d9413917 	ldw	r5,1252(sp)
 80008c4:	1484581e 	bne	r2,r18,8001a28 <___vfprintf_internal_r+0x1698>
 80008c8:	000d883a 	mov	r6,zero
 80008cc:	000f883a 	mov	r7,zero
 80008d0:	800b2880 	call	800b288 <__ledf2>
 80008d4:	da013f17 	ldw	r8,1276(sp)
 80008d8:	1005ef16 	blt	r2,zero,8002098 <___vfprintf_internal_r+0x1d08>
 80008dc:	dd412783 	ldbu	r21,1182(sp)
 80008e0:	008011c4 	movi	r2,71
 80008e4:	14053b0e 	bge	r2,r16,8001dd4 <___vfprintf_internal_r+0x1a44>
 80008e8:	00c20074 	movhi	r3,2049
 80008ec:	18fc9704 	addi	r3,r3,-3492
 80008f0:	d8c13115 	stw	r3,1220(sp)
 80008f4:	02c000c4 	movi	r11,3
 80008f8:	00bfdfc4 	movi	r2,-129
 80008fc:	dac12b15 	stw	r11,1196(sp)
 8000900:	88a2703a 	and	r17,r17,r2
 8000904:	dcc12d15 	stw	r19,1204(sp)
 8000908:	5825883a 	mov	r18,r11
 800090c:	d8013215 	stw	zero,1224(sp)
 8000910:	d8013415 	stw	zero,1232(sp)
 8000914:	00003206 	br	80009e0 <___vfprintf_internal_r+0x650>
 8000918:	8c400214 	ori	r17,r17,8
 800091c:	1805883a 	mov	r2,r3
 8000920:	1c000007 	ldb	r16,0(r3)
 8000924:	003f0106 	br	800052c <__alt_data_end+0xfc00052c>
 8000928:	8c400414 	ori	r17,r17,16
 800092c:	d8c12a15 	stw	r3,1192(sp)
 8000930:	88c0080c 	andi	r3,r17,32
 8000934:	d8812d17 	ldw	r2,1204(sp)
 8000938:	18017726 	beq	r3,zero,8000f18 <___vfprintf_internal_r+0xb88>
 800093c:	db012d17 	ldw	r12,1204(sp)
 8000940:	14c00017 	ldw	r19,0(r2)
 8000944:	17000117 	ldw	fp,4(r2)
 8000948:	63000204 	addi	r12,r12,8
 800094c:	db012d15 	stw	r12,1204(sp)
 8000950:	0005883a 	mov	r2,zero
 8000954:	9f06b03a 	or	r3,r19,fp
 8000958:	d8012785 	stb	zero,1182(sp)
 800095c:	da413215 	stw	r9,1224(sp)
 8000960:	002b883a 	mov	r21,zero
 8000964:	48000216 	blt	r9,zero,8000970 <___vfprintf_internal_r+0x5e0>
 8000968:	013fdfc4 	movi	r4,-129
 800096c:	8922703a 	and	r17,r17,r4
 8000970:	1801ed1e 	bne	r3,zero,8001128 <___vfprintf_internal_r+0xd98>
 8000974:	4802e026 	beq	r9,zero,80014f8 <___vfprintf_internal_r+0x1168>
 8000978:	10803fcc 	andi	r2,r2,255
 800097c:	00c00044 	movi	r3,1
 8000980:	10c20f26 	beq	r2,r3,80011c0 <___vfprintf_internal_r+0xe30>
 8000984:	00c00084 	movi	r3,2
 8000988:	10c2fd26 	beq	r2,r3,8001580 <___vfprintf_internal_r+0x11f0>
 800098c:	d8c10e04 	addi	r3,sp,1080
 8000990:	9808d0fa 	srli	r4,r19,3
 8000994:	e00a977a 	slli	r5,fp,29
 8000998:	e038d0fa 	srli	fp,fp,3
 800099c:	9cc001cc 	andi	r19,r19,7
 80009a0:	98800c04 	addi	r2,r19,48
 80009a4:	18ffffc4 	addi	r3,r3,-1
 80009a8:	2926b03a 	or	r19,r5,r4
 80009ac:	18800005 	stb	r2,0(r3)
 80009b0:	9f08b03a 	or	r4,r19,fp
 80009b4:	203ff61e 	bne	r4,zero,8000990 <__alt_data_end+0xfc000990>
 80009b8:	8900004c 	andi	r4,r17,1
 80009bc:	d8c13115 	stw	r3,1220(sp)
 80009c0:	2003791e 	bne	r4,zero,80017a8 <___vfprintf_internal_r+0x1418>
 80009c4:	dac12817 	ldw	r11,1184(sp)
 80009c8:	58e5c83a 	sub	r18,r11,r3
 80009cc:	9005883a 	mov	r2,r18
 80009d0:	9240010e 	bge	r18,r9,80009d8 <___vfprintf_internal_r+0x648>
 80009d4:	4805883a 	mov	r2,r9
 80009d8:	d8812b15 	stw	r2,1196(sp)
 80009dc:	d8013415 	stw	zero,1232(sp)
 80009e0:	a8803fcc 	andi	r2,r21,255
 80009e4:	1080201c 	xori	r2,r2,128
 80009e8:	10bfe004 	addi	r2,r2,-128
 80009ec:	10000326 	beq	r2,zero,80009fc <___vfprintf_internal_r+0x66c>
 80009f0:	db012b17 	ldw	r12,1196(sp)
 80009f4:	63000044 	addi	r12,r12,1
 80009f8:	db012b15 	stw	r12,1196(sp)
 80009fc:	88c0008c 	andi	r3,r17,2
 8000a00:	d8c12c15 	stw	r3,1200(sp)
 8000a04:	18000326 	beq	r3,zero,8000a14 <___vfprintf_internal_r+0x684>
 8000a08:	dac12b17 	ldw	r11,1196(sp)
 8000a0c:	5ac00084 	addi	r11,r11,2
 8000a10:	dac12b15 	stw	r11,1196(sp)
 8000a14:	8b00210c 	andi	r12,r17,132
 8000a18:	db013015 	stw	r12,1216(sp)
 8000a1c:	6001c01e 	bne	r12,zero,8001120 <___vfprintf_internal_r+0xd90>
 8000a20:	dac12e17 	ldw	r11,1208(sp)
 8000a24:	db012b17 	ldw	r12,1196(sp)
 8000a28:	5b39c83a 	sub	fp,r11,r12
 8000a2c:	0701bc0e 	bge	zero,fp,8001120 <___vfprintf_internal_r+0xd90>
 8000a30:	02400404 	movi	r9,16
 8000a34:	d8c12017 	ldw	r3,1152(sp)
 8000a38:	d8811f17 	ldw	r2,1148(sp)
 8000a3c:	4f05220e 	bge	r9,fp,8001ec8 <___vfprintf_internal_r+0x1b38>
 8000a40:	01420074 	movhi	r5,2049
 8000a44:	297caa84 	addi	r5,r5,-3414
 8000a48:	d9413615 	stw	r5,1240(sp)
 8000a4c:	482b883a 	mov	r21,r9
 8000a50:	04c001c4 	movi	r19,7
 8000a54:	00000306 	br	8000a64 <___vfprintf_internal_r+0x6d4>
 8000a58:	e73ffc04 	addi	fp,fp,-16
 8000a5c:	42000204 	addi	r8,r8,8
 8000a60:	af00130e 	bge	r21,fp,8000ab0 <___vfprintf_internal_r+0x720>
 8000a64:	02c20074 	movhi	r11,2049
 8000a68:	18c00404 	addi	r3,r3,16
 8000a6c:	10800044 	addi	r2,r2,1
 8000a70:	5afcaa84 	addi	r11,r11,-3414
 8000a74:	42c00015 	stw	r11,0(r8)
 8000a78:	45400115 	stw	r21,4(r8)
 8000a7c:	d8c12015 	stw	r3,1152(sp)
 8000a80:	d8811f15 	stw	r2,1148(sp)
 8000a84:	98bff40e 	bge	r19,r2,8000a58 <__alt_data_end+0xfc000a58>
 8000a88:	b009883a 	mov	r4,r22
 8000a8c:	b80b883a 	mov	r5,r23
 8000a90:	d9811e04 	addi	r6,sp,1144
 8000a94:	8006ad00 	call	8006ad0 <__sprint_r>
 8000a98:	103f541e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8000a9c:	e73ffc04 	addi	fp,fp,-16
 8000aa0:	d8c12017 	ldw	r3,1152(sp)
 8000aa4:	d8811f17 	ldw	r2,1148(sp)
 8000aa8:	da000404 	addi	r8,sp,16
 8000aac:	af3fed16 	blt	r21,fp,8000a64 <__alt_data_end+0xfc000a64>
 8000ab0:	db013617 	ldw	r12,1240(sp)
 8000ab4:	e0c7883a 	add	r3,fp,r3
 8000ab8:	10800044 	addi	r2,r2,1
 8000abc:	43000015 	stw	r12,0(r8)
 8000ac0:	47000115 	stw	fp,4(r8)
 8000ac4:	d8c12015 	stw	r3,1152(sp)
 8000ac8:	d8811f15 	stw	r2,1148(sp)
 8000acc:	010001c4 	movi	r4,7
 8000ad0:	2082f416 	blt	r4,r2,80016a4 <___vfprintf_internal_r+0x1314>
 8000ad4:	d8812787 	ldb	r2,1182(sp)
 8000ad8:	42000204 	addi	r8,r8,8
 8000adc:	10000c26 	beq	r2,zero,8000b10 <___vfprintf_internal_r+0x780>
 8000ae0:	d8811f17 	ldw	r2,1148(sp)
 8000ae4:	d9012784 	addi	r4,sp,1182
 8000ae8:	18c00044 	addi	r3,r3,1
 8000aec:	10800044 	addi	r2,r2,1
 8000af0:	41000015 	stw	r4,0(r8)
 8000af4:	01000044 	movi	r4,1
 8000af8:	41000115 	stw	r4,4(r8)
 8000afc:	d8c12015 	stw	r3,1152(sp)
 8000b00:	d8811f15 	stw	r2,1148(sp)
 8000b04:	010001c4 	movi	r4,7
 8000b08:	20828d16 	blt	r4,r2,8001540 <___vfprintf_internal_r+0x11b0>
 8000b0c:	42000204 	addi	r8,r8,8
 8000b10:	dac12c17 	ldw	r11,1200(sp)
 8000b14:	58000c26 	beq	r11,zero,8000b48 <___vfprintf_internal_r+0x7b8>
 8000b18:	d8811f17 	ldw	r2,1148(sp)
 8000b1c:	d9012704 	addi	r4,sp,1180
 8000b20:	18c00084 	addi	r3,r3,2
 8000b24:	10800044 	addi	r2,r2,1
 8000b28:	41000015 	stw	r4,0(r8)
 8000b2c:	01000084 	movi	r4,2
 8000b30:	41000115 	stw	r4,4(r8)
 8000b34:	d8c12015 	stw	r3,1152(sp)
 8000b38:	d8811f15 	stw	r2,1148(sp)
 8000b3c:	010001c4 	movi	r4,7
 8000b40:	20828716 	blt	r4,r2,8001560 <___vfprintf_internal_r+0x11d0>
 8000b44:	42000204 	addi	r8,r8,8
 8000b48:	db013017 	ldw	r12,1216(sp)
 8000b4c:	00802004 	movi	r2,128
 8000b50:	6081e926 	beq	r12,r2,80012f8 <___vfprintf_internal_r+0xf68>
 8000b54:	db013217 	ldw	r12,1224(sp)
 8000b58:	64abc83a 	sub	r21,r12,r18
 8000b5c:	0540260e 	bge	zero,r21,8000bf8 <___vfprintf_internal_r+0x868>
 8000b60:	07000404 	movi	fp,16
 8000b64:	d8811f17 	ldw	r2,1148(sp)
 8000b68:	e5443d0e 	bge	fp,r21,8001c60 <___vfprintf_internal_r+0x18d0>
 8000b6c:	01420074 	movhi	r5,2049
 8000b70:	297ca684 	addi	r5,r5,-3430
 8000b74:	d9412c15 	stw	r5,1200(sp)
 8000b78:	04c001c4 	movi	r19,7
 8000b7c:	00000306 	br	8000b8c <___vfprintf_internal_r+0x7fc>
 8000b80:	ad7ffc04 	addi	r21,r21,-16
 8000b84:	42000204 	addi	r8,r8,8
 8000b88:	e540110e 	bge	fp,r21,8000bd0 <___vfprintf_internal_r+0x840>
 8000b8c:	18c00404 	addi	r3,r3,16
 8000b90:	10800044 	addi	r2,r2,1
 8000b94:	45000015 	stw	r20,0(r8)
 8000b98:	47000115 	stw	fp,4(r8)
 8000b9c:	d8c12015 	stw	r3,1152(sp)
 8000ba0:	d8811f15 	stw	r2,1148(sp)
 8000ba4:	98bff60e 	bge	r19,r2,8000b80 <__alt_data_end+0xfc000b80>
 8000ba8:	b009883a 	mov	r4,r22
 8000bac:	b80b883a 	mov	r5,r23
 8000bb0:	d9811e04 	addi	r6,sp,1144
 8000bb4:	8006ad00 	call	8006ad0 <__sprint_r>
 8000bb8:	103f0c1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8000bbc:	ad7ffc04 	addi	r21,r21,-16
 8000bc0:	d8c12017 	ldw	r3,1152(sp)
 8000bc4:	d8811f17 	ldw	r2,1148(sp)
 8000bc8:	da000404 	addi	r8,sp,16
 8000bcc:	e57fef16 	blt	fp,r21,8000b8c <__alt_data_end+0xfc000b8c>
 8000bd0:	dac12c17 	ldw	r11,1200(sp)
 8000bd4:	1d47883a 	add	r3,r3,r21
 8000bd8:	10800044 	addi	r2,r2,1
 8000bdc:	42c00015 	stw	r11,0(r8)
 8000be0:	45400115 	stw	r21,4(r8)
 8000be4:	d8c12015 	stw	r3,1152(sp)
 8000be8:	d8811f15 	stw	r2,1148(sp)
 8000bec:	010001c4 	movi	r4,7
 8000bf0:	20824b16 	blt	r4,r2,8001520 <___vfprintf_internal_r+0x1190>
 8000bf4:	42000204 	addi	r8,r8,8
 8000bf8:	8880400c 	andi	r2,r17,256
 8000bfc:	1001761e 	bne	r2,zero,80011d8 <___vfprintf_internal_r+0xe48>
 8000c00:	d8811f17 	ldw	r2,1148(sp)
 8000c04:	db013117 	ldw	r12,1220(sp)
 8000c08:	1c87883a 	add	r3,r3,r18
 8000c0c:	10800044 	addi	r2,r2,1
 8000c10:	43000015 	stw	r12,0(r8)
 8000c14:	44800115 	stw	r18,4(r8)
 8000c18:	d8c12015 	stw	r3,1152(sp)
 8000c1c:	d8811f15 	stw	r2,1148(sp)
 8000c20:	010001c4 	movi	r4,7
 8000c24:	20822616 	blt	r4,r2,80014c0 <___vfprintf_internal_r+0x1130>
 8000c28:	42000204 	addi	r8,r8,8
 8000c2c:	8c40010c 	andi	r17,r17,4
 8000c30:	88003126 	beq	r17,zero,8000cf8 <___vfprintf_internal_r+0x968>
 8000c34:	db012e17 	ldw	r12,1208(sp)
 8000c38:	dac12b17 	ldw	r11,1196(sp)
 8000c3c:	62e1c83a 	sub	r16,r12,r11
 8000c40:	04002d0e 	bge	zero,r16,8000cf8 <___vfprintf_internal_r+0x968>
 8000c44:	04400404 	movi	r17,16
 8000c48:	d8811f17 	ldw	r2,1148(sp)
 8000c4c:	8c04df0e 	bge	r17,r16,8001fcc <___vfprintf_internal_r+0x1c3c>
 8000c50:	01020074 	movhi	r4,2049
 8000c54:	213caa84 	addi	r4,r4,-3414
 8000c58:	d9013615 	stw	r4,1240(sp)
 8000c5c:	048001c4 	movi	r18,7
 8000c60:	00000306 	br	8000c70 <___vfprintf_internal_r+0x8e0>
 8000c64:	843ffc04 	addi	r16,r16,-16
 8000c68:	42000204 	addi	r8,r8,8
 8000c6c:	8c00130e 	bge	r17,r16,8000cbc <___vfprintf_internal_r+0x92c>
 8000c70:	01420074 	movhi	r5,2049
 8000c74:	18c00404 	addi	r3,r3,16
 8000c78:	10800044 	addi	r2,r2,1
 8000c7c:	297caa84 	addi	r5,r5,-3414
 8000c80:	41400015 	stw	r5,0(r8)
 8000c84:	44400115 	stw	r17,4(r8)
 8000c88:	d8c12015 	stw	r3,1152(sp)
 8000c8c:	d8811f15 	stw	r2,1148(sp)
 8000c90:	90bff40e 	bge	r18,r2,8000c64 <__alt_data_end+0xfc000c64>
 8000c94:	b009883a 	mov	r4,r22
 8000c98:	b80b883a 	mov	r5,r23
 8000c9c:	d9811e04 	addi	r6,sp,1144
 8000ca0:	8006ad00 	call	8006ad0 <__sprint_r>
 8000ca4:	103ed11e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8000ca8:	843ffc04 	addi	r16,r16,-16
 8000cac:	d8c12017 	ldw	r3,1152(sp)
 8000cb0:	d8811f17 	ldw	r2,1148(sp)
 8000cb4:	da000404 	addi	r8,sp,16
 8000cb8:	8c3fed16 	blt	r17,r16,8000c70 <__alt_data_end+0xfc000c70>
 8000cbc:	dac13617 	ldw	r11,1240(sp)
 8000cc0:	1c07883a 	add	r3,r3,r16
 8000cc4:	10800044 	addi	r2,r2,1
 8000cc8:	42c00015 	stw	r11,0(r8)
 8000ccc:	44000115 	stw	r16,4(r8)
 8000cd0:	d8c12015 	stw	r3,1152(sp)
 8000cd4:	d8811f15 	stw	r2,1148(sp)
 8000cd8:	010001c4 	movi	r4,7
 8000cdc:	2080060e 	bge	r4,r2,8000cf8 <___vfprintf_internal_r+0x968>
 8000ce0:	b009883a 	mov	r4,r22
 8000ce4:	b80b883a 	mov	r5,r23
 8000ce8:	d9811e04 	addi	r6,sp,1144
 8000cec:	8006ad00 	call	8006ad0 <__sprint_r>
 8000cf0:	103ebe1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8000cf4:	d8c12017 	ldw	r3,1152(sp)
 8000cf8:	d8812b17 	ldw	r2,1196(sp)
 8000cfc:	db012e17 	ldw	r12,1208(sp)
 8000d00:	1300010e 	bge	r2,r12,8000d08 <___vfprintf_internal_r+0x978>
 8000d04:	6005883a 	mov	r2,r12
 8000d08:	dac12f17 	ldw	r11,1212(sp)
 8000d0c:	5897883a 	add	r11,r11,r2
 8000d10:	dac12f15 	stw	r11,1212(sp)
 8000d14:	1801f21e 	bne	r3,zero,80014e0 <___vfprintf_internal_r+0x1150>
 8000d18:	d8011f15 	stw	zero,1148(sp)
 8000d1c:	da000404 	addi	r8,sp,16
 8000d20:	003dd806 	br	8000484 <__alt_data_end+0xfc000484>
 8000d24:	8c400414 	ori	r17,r17,16
 8000d28:	d8c12a15 	stw	r3,1192(sp)
 8000d2c:	88c0080c 	andi	r3,r17,32
 8000d30:	d8812d17 	ldw	r2,1204(sp)
 8000d34:	18004626 	beq	r3,zero,8000e50 <___vfprintf_internal_r+0xac0>
 8000d38:	dac12d17 	ldw	r11,1204(sp)
 8000d3c:	14c00017 	ldw	r19,0(r2)
 8000d40:	17000117 	ldw	fp,4(r2)
 8000d44:	5ac00204 	addi	r11,r11,8
 8000d48:	dac12d15 	stw	r11,1204(sp)
 8000d4c:	00800044 	movi	r2,1
 8000d50:	9f06b03a 	or	r3,r19,fp
 8000d54:	003f0006 	br	8000958 <__alt_data_end+0xfc000958>
 8000d58:	1805883a 	mov	r2,r3
 8000d5c:	d8012e15 	stw	zero,1208(sp)
 8000d60:	82fff404 	addi	r11,r16,-48
 8000d64:	0019883a 	mov	r12,zero
 8000d68:	14000007 	ldb	r16,0(r2)
 8000d6c:	630002a4 	muli	r12,r12,10
 8000d70:	18c00044 	addi	r3,r3,1
 8000d74:	1805883a 	mov	r2,r3
 8000d78:	62d9883a 	add	r12,r12,r11
 8000d7c:	82fff404 	addi	r11,r16,-48
 8000d80:	2afff92e 	bgeu	r5,r11,8000d68 <__alt_data_end+0xfc000d68>
 8000d84:	db012e15 	stw	r12,1208(sp)
 8000d88:	003de906 	br	8000530 <__alt_data_end+0xfc000530>
 8000d8c:	8c400414 	ori	r17,r17,16
 8000d90:	d8c12a15 	stw	r3,1192(sp)
 8000d94:	d9812785 	stb	r6,1182(sp)
 8000d98:	8880080c 	andi	r2,r17,32
 8000d9c:	d8c12d17 	ldw	r3,1204(sp)
 8000da0:	10007a26 	beq	r2,zero,8000f8c <___vfprintf_internal_r+0xbfc>
 8000da4:	db012d17 	ldw	r12,1204(sp)
 8000da8:	18800117 	ldw	r2,4(r3)
 8000dac:	1cc00017 	ldw	r19,0(r3)
 8000db0:	63000204 	addi	r12,r12,8
 8000db4:	db012d15 	stw	r12,1204(sp)
 8000db8:	1039883a 	mov	fp,r2
 8000dbc:	10031016 	blt	r2,zero,8001a00 <___vfprintf_internal_r+0x1670>
 8000dc0:	dd412783 	ldbu	r21,1182(sp)
 8000dc4:	da413215 	stw	r9,1224(sp)
 8000dc8:	00800044 	movi	r2,1
 8000dcc:	9f06b03a 	or	r3,r19,fp
 8000dd0:	003ee406 	br	8000964 <__alt_data_end+0xfc000964>
 8000dd4:	03020074 	movhi	r12,2049
 8000dd8:	633c9a04 	addi	r12,r12,-3480
 8000ddc:	d8c12a15 	stw	r3,1192(sp)
 8000de0:	d9812785 	stb	r6,1182(sp)
 8000de4:	db013b15 	stw	r12,1260(sp)
 8000de8:	88c0080c 	andi	r3,r17,32
 8000dec:	d8812d17 	ldw	r2,1204(sp)
 8000df0:	18002b26 	beq	r3,zero,8000ea0 <___vfprintf_internal_r+0xb10>
 8000df4:	dac12d17 	ldw	r11,1204(sp)
 8000df8:	14c00017 	ldw	r19,0(r2)
 8000dfc:	17000117 	ldw	fp,4(r2)
 8000e00:	5ac00204 	addi	r11,r11,8
 8000e04:	dac12d15 	stw	r11,1204(sp)
 8000e08:	8880004c 	andi	r2,r17,1
 8000e0c:	10025b26 	beq	r2,zero,800177c <___vfprintf_internal_r+0x13ec>
 8000e10:	9f06b03a 	or	r3,r19,fp
 8000e14:	18037026 	beq	r3,zero,8001bd8 <___vfprintf_internal_r+0x1848>
 8000e18:	00800c04 	movi	r2,48
 8000e1c:	d8812705 	stb	r2,1180(sp)
 8000e20:	dc012745 	stb	r16,1181(sp)
 8000e24:	8c400094 	ori	r17,r17,2
 8000e28:	00800084 	movi	r2,2
 8000e2c:	003eca06 	br	8000958 <__alt_data_end+0xfc000958>
 8000e30:	8c400814 	ori	r17,r17,32
 8000e34:	1805883a 	mov	r2,r3
 8000e38:	1c000007 	ldb	r16,0(r3)
 8000e3c:	003dbb06 	br	800052c <__alt_data_end+0xfc00052c>
 8000e40:	d8c12a15 	stw	r3,1192(sp)
 8000e44:	88c0080c 	andi	r3,r17,32
 8000e48:	d8812d17 	ldw	r2,1204(sp)
 8000e4c:	183fba1e 	bne	r3,zero,8000d38 <__alt_data_end+0xfc000d38>
 8000e50:	88c0040c 	andi	r3,r17,16
 8000e54:	18024c1e 	bne	r3,zero,8001788 <___vfprintf_internal_r+0x13f8>
 8000e58:	88c0100c 	andi	r3,r17,64
 8000e5c:	18024a26 	beq	r3,zero,8001788 <___vfprintf_internal_r+0x13f8>
 8000e60:	dac12d17 	ldw	r11,1204(sp)
 8000e64:	14c0000b 	ldhu	r19,0(r2)
 8000e68:	0039883a 	mov	fp,zero
 8000e6c:	5ac00104 	addi	r11,r11,4
 8000e70:	dac12d15 	stw	r11,1204(sp)
 8000e74:	00800044 	movi	r2,1
 8000e78:	9807883a 	mov	r3,r19
 8000e7c:	003eb606 	br	8000958 <__alt_data_end+0xfc000958>
 8000e80:	00820074 	movhi	r2,2049
 8000e84:	10bc9f04 	addi	r2,r2,-3460
 8000e88:	d8c12a15 	stw	r3,1192(sp)
 8000e8c:	d8813b15 	stw	r2,1260(sp)
 8000e90:	d9812785 	stb	r6,1182(sp)
 8000e94:	88c0080c 	andi	r3,r17,32
 8000e98:	d8812d17 	ldw	r2,1204(sp)
 8000e9c:	183fd51e 	bne	r3,zero,8000df4 <__alt_data_end+0xfc000df4>
 8000ea0:	88c0040c 	andi	r3,r17,16
 8000ea4:	18034126 	beq	r3,zero,8001bac <___vfprintf_internal_r+0x181c>
 8000ea8:	db012d17 	ldw	r12,1204(sp)
 8000eac:	14c00017 	ldw	r19,0(r2)
 8000eb0:	0039883a 	mov	fp,zero
 8000eb4:	63000104 	addi	r12,r12,4
 8000eb8:	db012d15 	stw	r12,1204(sp)
 8000ebc:	003fd206 	br	8000e08 <__alt_data_end+0xfc000e08>
 8000ec0:	1c000007 	ldb	r16,0(r3)
 8000ec4:	81c3d626 	beq	r16,r7,8001e20 <___vfprintf_internal_r+0x1a90>
 8000ec8:	8c400414 	ori	r17,r17,16
 8000ecc:	1805883a 	mov	r2,r3
 8000ed0:	003d9606 	br	800052c <__alt_data_end+0xfc00052c>
 8000ed4:	d8c12a15 	stw	r3,1192(sp)
 8000ed8:	d9812785 	stb	r6,1182(sp)
 8000edc:	8880080c 	andi	r2,r17,32
 8000ee0:	10033f26 	beq	r2,zero,8001be0 <___vfprintf_internal_r+0x1850>
 8000ee4:	db012d17 	ldw	r12,1204(sp)
 8000ee8:	dac12f17 	ldw	r11,1212(sp)
 8000eec:	60800017 	ldw	r2,0(r12)
 8000ef0:	5807d7fa 	srai	r3,r11,31
 8000ef4:	63000104 	addi	r12,r12,4
 8000ef8:	db012d15 	stw	r12,1204(sp)
 8000efc:	12c00015 	stw	r11,0(r2)
 8000f00:	10c00115 	stw	r3,4(r2)
 8000f04:	003d5f06 	br	8000484 <__alt_data_end+0xfc000484>
 8000f08:	d8c12a15 	stw	r3,1192(sp)
 8000f0c:	88c0080c 	andi	r3,r17,32
 8000f10:	d8812d17 	ldw	r2,1204(sp)
 8000f14:	183e891e 	bne	r3,zero,800093c <__alt_data_end+0xfc00093c>
 8000f18:	88c0040c 	andi	r3,r17,16
 8000f1c:	1801ea1e 	bne	r3,zero,80016c8 <___vfprintf_internal_r+0x1338>
 8000f20:	88c0100c 	andi	r3,r17,64
 8000f24:	1801e826 	beq	r3,zero,80016c8 <___vfprintf_internal_r+0x1338>
 8000f28:	db012d17 	ldw	r12,1204(sp)
 8000f2c:	14c0000b 	ldhu	r19,0(r2)
 8000f30:	0039883a 	mov	fp,zero
 8000f34:	63000104 	addi	r12,r12,4
 8000f38:	db012d15 	stw	r12,1204(sp)
 8000f3c:	0005883a 	mov	r2,zero
 8000f40:	9807883a 	mov	r3,r19
 8000f44:	003e8406 	br	8000958 <__alt_data_end+0xfc000958>
 8000f48:	30803fcc 	andi	r2,r6,255
 8000f4c:	1080201c 	xori	r2,r2,128
 8000f50:	10bfe004 	addi	r2,r2,-128
 8000f54:	10031d1e 	bne	r2,zero,8001bcc <___vfprintf_internal_r+0x183c>
 8000f58:	1805883a 	mov	r2,r3
 8000f5c:	01800804 	movi	r6,32
 8000f60:	1c000007 	ldb	r16,0(r3)
 8000f64:	003d7106 	br	800052c <__alt_data_end+0xfc00052c>
 8000f68:	8c400054 	ori	r17,r17,1
 8000f6c:	1805883a 	mov	r2,r3
 8000f70:	1c000007 	ldb	r16,0(r3)
 8000f74:	003d6d06 	br	800052c <__alt_data_end+0xfc00052c>
 8000f78:	d8c12a15 	stw	r3,1192(sp)
 8000f7c:	d9812785 	stb	r6,1182(sp)
 8000f80:	8880080c 	andi	r2,r17,32
 8000f84:	d8c12d17 	ldw	r3,1204(sp)
 8000f88:	103f861e 	bne	r2,zero,8000da4 <__alt_data_end+0xfc000da4>
 8000f8c:	8880040c 	andi	r2,r17,16
 8000f90:	1001f31e 	bne	r2,zero,8001760 <___vfprintf_internal_r+0x13d0>
 8000f94:	8880100c 	andi	r2,r17,64
 8000f98:	1001f126 	beq	r2,zero,8001760 <___vfprintf_internal_r+0x13d0>
 8000f9c:	1cc0000f 	ldh	r19,0(r3)
 8000fa0:	db012d17 	ldw	r12,1204(sp)
 8000fa4:	9839d7fa 	srai	fp,r19,31
 8000fa8:	63000104 	addi	r12,r12,4
 8000fac:	db012d15 	stw	r12,1204(sp)
 8000fb0:	e005883a 	mov	r2,fp
 8000fb4:	003f8106 	br	8000dbc <__alt_data_end+0xfc000dbc>
 8000fb8:	8c401014 	ori	r17,r17,64
 8000fbc:	1805883a 	mov	r2,r3
 8000fc0:	1c000007 	ldb	r16,0(r3)
 8000fc4:	003d5906 	br	800052c <__alt_data_end+0xfc00052c>
 8000fc8:	db012d17 	ldw	r12,1204(sp)
 8000fcc:	d8c12a15 	stw	r3,1192(sp)
 8000fd0:	00c00044 	movi	r3,1
 8000fd4:	60800017 	ldw	r2,0(r12)
 8000fd8:	63000104 	addi	r12,r12,4
 8000fdc:	d8c12b15 	stw	r3,1196(sp)
 8000fe0:	d8012785 	stb	zero,1182(sp)
 8000fe4:	d8810405 	stb	r2,1040(sp)
 8000fe8:	db012d15 	stw	r12,1204(sp)
 8000fec:	dac10404 	addi	r11,sp,1040
 8000ff0:	1825883a 	mov	r18,r3
 8000ff4:	d8013215 	stw	zero,1224(sp)
 8000ff8:	d8013415 	stw	zero,1232(sp)
 8000ffc:	dac13115 	stw	r11,1220(sp)
 8001000:	0005883a 	mov	r2,zero
 8001004:	003e7d06 	br	80009fc <__alt_data_end+0xfc0009fc>
 8001008:	db012d17 	ldw	r12,1204(sp)
 800100c:	00800c04 	movi	r2,48
 8001010:	d8812705 	stb	r2,1180(sp)
 8001014:	64c00017 	ldw	r19,0(r12)
 8001018:	00801e04 	movi	r2,120
 800101c:	d8812745 	stb	r2,1181(sp)
 8001020:	00820074 	movhi	r2,2049
 8001024:	10bc9f04 	addi	r2,r2,-3460
 8001028:	63000104 	addi	r12,r12,4
 800102c:	d8c12a15 	stw	r3,1192(sp)
 8001030:	d8813b15 	stw	r2,1260(sp)
 8001034:	0039883a 	mov	fp,zero
 8001038:	8c400094 	ori	r17,r17,2
 800103c:	db012d15 	stw	r12,1204(sp)
 8001040:	00800084 	movi	r2,2
 8001044:	04001e04 	movi	r16,120
 8001048:	9807883a 	mov	r3,r19
 800104c:	003e4206 	br	8000958 <__alt_data_end+0xfc000958>
 8001050:	dac12d17 	ldw	r11,1204(sp)
 8001054:	db012d17 	ldw	r12,1204(sp)
 8001058:	d8c12a15 	stw	r3,1192(sp)
 800105c:	5ac00017 	ldw	r11,0(r11)
 8001060:	d8012785 	stb	zero,1182(sp)
 8001064:	64c00104 	addi	r19,r12,4
 8001068:	dac13115 	stw	r11,1220(sp)
 800106c:	5803e826 	beq	r11,zero,8002010 <___vfprintf_internal_r+0x1c80>
 8001070:	d9013117 	ldw	r4,1220(sp)
 8001074:	48037a16 	blt	r9,zero,8001e60 <___vfprintf_internal_r+0x1ad0>
 8001078:	480d883a 	mov	r6,r9
 800107c:	000b883a 	mov	r5,zero
 8001080:	da013f15 	stw	r8,1276(sp)
 8001084:	da413e15 	stw	r9,1272(sp)
 8001088:	80053c40 	call	80053c4 <memchr>
 800108c:	da013f17 	ldw	r8,1276(sp)
 8001090:	da413e17 	ldw	r9,1272(sp)
 8001094:	10044426 	beq	r2,zero,80021a8 <___vfprintf_internal_r+0x1e18>
 8001098:	d8c13117 	ldw	r3,1220(sp)
 800109c:	10e5c83a 	sub	r18,r2,r3
 80010a0:	4c834416 	blt	r9,r18,8001db4 <___vfprintf_internal_r+0x1a24>
 80010a4:	9005883a 	mov	r2,r18
 80010a8:	90037216 	blt	r18,zero,8001e74 <___vfprintf_internal_r+0x1ae4>
 80010ac:	dd412783 	ldbu	r21,1182(sp)
 80010b0:	d8812b15 	stw	r2,1196(sp)
 80010b4:	dcc12d15 	stw	r19,1204(sp)
 80010b8:	d8013215 	stw	zero,1224(sp)
 80010bc:	d8013415 	stw	zero,1232(sp)
 80010c0:	003e4706 	br	80009e0 <__alt_data_end+0xfc0009e0>
 80010c4:	dac12d17 	ldw	r11,1204(sp)
 80010c8:	db012d17 	ldw	r12,1204(sp)
 80010cc:	5ac00017 	ldw	r11,0(r11)
 80010d0:	dac12e15 	stw	r11,1208(sp)
 80010d4:	62c00104 	addi	r11,r12,4
 80010d8:	db012e17 	ldw	r12,1208(sp)
 80010dc:	60034a16 	blt	r12,zero,8001e08 <___vfprintf_internal_r+0x1a78>
 80010e0:	dac12d15 	stw	r11,1204(sp)
 80010e4:	1805883a 	mov	r2,r3
 80010e8:	1c000007 	ldb	r16,0(r3)
 80010ec:	003d0f06 	br	800052c <__alt_data_end+0xfc00052c>
 80010f0:	1805883a 	mov	r2,r3
 80010f4:	01800ac4 	movi	r6,43
 80010f8:	1c000007 	ldb	r16,0(r3)
 80010fc:	003d0b06 	br	800052c <__alt_data_end+0xfc00052c>
 8001100:	d8c12a15 	stw	r3,1192(sp)
 8001104:	d9812785 	stb	r6,1182(sp)
 8001108:	803db226 	beq	r16,zero,80007d4 <__alt_data_end+0xfc0007d4>
 800110c:	00c00044 	movi	r3,1
 8001110:	d8c12b15 	stw	r3,1196(sp)
 8001114:	dc010405 	stb	r16,1040(sp)
 8001118:	d8012785 	stb	zero,1182(sp)
 800111c:	003fb306 	br	8000fec <__alt_data_end+0xfc000fec>
 8001120:	d8c12017 	ldw	r3,1152(sp)
 8001124:	003e6d06 	br	8000adc <__alt_data_end+0xfc000adc>
 8001128:	10803fcc 	andi	r2,r2,255
 800112c:	00c00044 	movi	r3,1
 8001130:	10fe141e 	bne	r2,r3,8000984 <__alt_data_end+0xfc000984>
 8001134:	e000021e 	bne	fp,zero,8001140 <___vfprintf_internal_r+0xdb0>
 8001138:	00800244 	movi	r2,9
 800113c:	14c0202e 	bgeu	r2,r19,80011c0 <___vfprintf_internal_r+0xe30>
 8001140:	dc012b15 	stw	r16,1196(sp)
 8001144:	dc412c15 	stw	r17,1200(sp)
 8001148:	9821883a 	mov	r16,r19
 800114c:	e023883a 	mov	r17,fp
 8001150:	dc810e04 	addi	r18,sp,1080
 8001154:	4027883a 	mov	r19,r8
 8001158:	4839883a 	mov	fp,r9
 800115c:	8009883a 	mov	r4,r16
 8001160:	880b883a 	mov	r5,r17
 8001164:	01800284 	movi	r6,10
 8001168:	000f883a 	mov	r7,zero
 800116c:	80099000 	call	8009900 <__umoddi3>
 8001170:	10800c04 	addi	r2,r2,48
 8001174:	94bfffc4 	addi	r18,r18,-1
 8001178:	8009883a 	mov	r4,r16
 800117c:	880b883a 	mov	r5,r17
 8001180:	01800284 	movi	r6,10
 8001184:	000f883a 	mov	r7,zero
 8001188:	90800005 	stb	r2,0(r18)
 800118c:	80093400 	call	8009340 <__udivdi3>
 8001190:	1021883a 	mov	r16,r2
 8001194:	10c4b03a 	or	r2,r2,r3
 8001198:	1823883a 	mov	r17,r3
 800119c:	103fef1e 	bne	r2,zero,800115c <__alt_data_end+0xfc00115c>
 80011a0:	dac12817 	ldw	r11,1184(sp)
 80011a4:	dc813115 	stw	r18,1220(sp)
 80011a8:	dc012b17 	ldw	r16,1196(sp)
 80011ac:	9811883a 	mov	r8,r19
 80011b0:	dc412c17 	ldw	r17,1200(sp)
 80011b4:	e013883a 	mov	r9,fp
 80011b8:	5ca5c83a 	sub	r18,r11,r18
 80011bc:	003e0306 	br	80009cc <__alt_data_end+0xfc0009cc>
 80011c0:	9cc00c04 	addi	r19,r19,48
 80011c4:	d8c10dc4 	addi	r3,sp,1079
 80011c8:	dcc10dc5 	stb	r19,1079(sp)
 80011cc:	dc813c17 	ldw	r18,1264(sp)
 80011d0:	d8c13115 	stw	r3,1220(sp)
 80011d4:	003dfd06 	br	80009cc <__alt_data_end+0xfc0009cc>
 80011d8:	00801944 	movi	r2,101
 80011dc:	1400710e 	bge	r2,r16,80013a4 <___vfprintf_internal_r+0x1014>
 80011e0:	d9013717 	ldw	r4,1244(sp)
 80011e4:	d9413917 	ldw	r5,1252(sp)
 80011e8:	000d883a 	mov	r6,zero
 80011ec:	000f883a 	mov	r7,zero
 80011f0:	d8c13d15 	stw	r3,1268(sp)
 80011f4:	da013f15 	stw	r8,1276(sp)
 80011f8:	800b1240 	call	800b124 <__eqdf2>
 80011fc:	d8c13d17 	ldw	r3,1268(sp)
 8001200:	da013f17 	ldw	r8,1276(sp)
 8001204:	1000ef1e 	bne	r2,zero,80015c4 <___vfprintf_internal_r+0x1234>
 8001208:	d8811f17 	ldw	r2,1148(sp)
 800120c:	01020074 	movhi	r4,2049
 8001210:	213ca604 	addi	r4,r4,-3432
 8001214:	18c00044 	addi	r3,r3,1
 8001218:	10800044 	addi	r2,r2,1
 800121c:	41000015 	stw	r4,0(r8)
 8001220:	01000044 	movi	r4,1
 8001224:	41000115 	stw	r4,4(r8)
 8001228:	d8c12015 	stw	r3,1152(sp)
 800122c:	d8811f15 	stw	r2,1148(sp)
 8001230:	010001c4 	movi	r4,7
 8001234:	20828e16 	blt	r4,r2,8001c70 <___vfprintf_internal_r+0x18e0>
 8001238:	42000204 	addi	r8,r8,8
 800123c:	d8812617 	ldw	r2,1176(sp)
 8001240:	dac13317 	ldw	r11,1228(sp)
 8001244:	12c00216 	blt	r2,r11,8001250 <___vfprintf_internal_r+0xec0>
 8001248:	8880004c 	andi	r2,r17,1
 800124c:	103e7726 	beq	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001250:	db013817 	ldw	r12,1248(sp)
 8001254:	d8811f17 	ldw	r2,1148(sp)
 8001258:	dac13517 	ldw	r11,1236(sp)
 800125c:	1b07883a 	add	r3,r3,r12
 8001260:	10800044 	addi	r2,r2,1
 8001264:	42c00015 	stw	r11,0(r8)
 8001268:	43000115 	stw	r12,4(r8)
 800126c:	d8c12015 	stw	r3,1152(sp)
 8001270:	d8811f15 	stw	r2,1148(sp)
 8001274:	010001c4 	movi	r4,7
 8001278:	2082ed16 	blt	r4,r2,8001e30 <___vfprintf_internal_r+0x1aa0>
 800127c:	42000204 	addi	r8,r8,8
 8001280:	db013317 	ldw	r12,1228(sp)
 8001284:	643fffc4 	addi	r16,r12,-1
 8001288:	043e680e 	bge	zero,r16,8000c2c <__alt_data_end+0xfc000c2c>
 800128c:	04800404 	movi	r18,16
 8001290:	d8811f17 	ldw	r2,1148(sp)
 8001294:	94007e0e 	bge	r18,r16,8001490 <___vfprintf_internal_r+0x1100>
 8001298:	01420074 	movhi	r5,2049
 800129c:	297ca684 	addi	r5,r5,-3430
 80012a0:	d9412c15 	stw	r5,1200(sp)
 80012a4:	054001c4 	movi	r21,7
 80012a8:	00000306 	br	80012b8 <___vfprintf_internal_r+0xf28>
 80012ac:	42000204 	addi	r8,r8,8
 80012b0:	843ffc04 	addi	r16,r16,-16
 80012b4:	9400790e 	bge	r18,r16,800149c <___vfprintf_internal_r+0x110c>
 80012b8:	18c00404 	addi	r3,r3,16
 80012bc:	10800044 	addi	r2,r2,1
 80012c0:	45000015 	stw	r20,0(r8)
 80012c4:	44800115 	stw	r18,4(r8)
 80012c8:	d8c12015 	stw	r3,1152(sp)
 80012cc:	d8811f15 	stw	r2,1148(sp)
 80012d0:	a8bff60e 	bge	r21,r2,80012ac <__alt_data_end+0xfc0012ac>
 80012d4:	b009883a 	mov	r4,r22
 80012d8:	b80b883a 	mov	r5,r23
 80012dc:	d9811e04 	addi	r6,sp,1144
 80012e0:	8006ad00 	call	8006ad0 <__sprint_r>
 80012e4:	103d411e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80012e8:	d8c12017 	ldw	r3,1152(sp)
 80012ec:	d8811f17 	ldw	r2,1148(sp)
 80012f0:	da000404 	addi	r8,sp,16
 80012f4:	003fee06 	br	80012b0 <__alt_data_end+0xfc0012b0>
 80012f8:	dac12e17 	ldw	r11,1208(sp)
 80012fc:	db012b17 	ldw	r12,1196(sp)
 8001300:	5b2bc83a 	sub	r21,r11,r12
 8001304:	057e130e 	bge	zero,r21,8000b54 <__alt_data_end+0xfc000b54>
 8001308:	07000404 	movi	fp,16
 800130c:	d8811f17 	ldw	r2,1148(sp)
 8001310:	e543640e 	bge	fp,r21,80020a4 <___vfprintf_internal_r+0x1d14>
 8001314:	01420074 	movhi	r5,2049
 8001318:	297ca684 	addi	r5,r5,-3430
 800131c:	d9412c15 	stw	r5,1200(sp)
 8001320:	04c001c4 	movi	r19,7
 8001324:	00000306 	br	8001334 <___vfprintf_internal_r+0xfa4>
 8001328:	ad7ffc04 	addi	r21,r21,-16
 800132c:	42000204 	addi	r8,r8,8
 8001330:	e540110e 	bge	fp,r21,8001378 <___vfprintf_internal_r+0xfe8>
 8001334:	18c00404 	addi	r3,r3,16
 8001338:	10800044 	addi	r2,r2,1
 800133c:	45000015 	stw	r20,0(r8)
 8001340:	47000115 	stw	fp,4(r8)
 8001344:	d8c12015 	stw	r3,1152(sp)
 8001348:	d8811f15 	stw	r2,1148(sp)
 800134c:	98bff60e 	bge	r19,r2,8001328 <__alt_data_end+0xfc001328>
 8001350:	b009883a 	mov	r4,r22
 8001354:	b80b883a 	mov	r5,r23
 8001358:	d9811e04 	addi	r6,sp,1144
 800135c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001360:	103d221e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001364:	ad7ffc04 	addi	r21,r21,-16
 8001368:	d8c12017 	ldw	r3,1152(sp)
 800136c:	d8811f17 	ldw	r2,1148(sp)
 8001370:	da000404 	addi	r8,sp,16
 8001374:	e57fef16 	blt	fp,r21,8001334 <__alt_data_end+0xfc001334>
 8001378:	dac12c17 	ldw	r11,1200(sp)
 800137c:	1d47883a 	add	r3,r3,r21
 8001380:	10800044 	addi	r2,r2,1
 8001384:	42c00015 	stw	r11,0(r8)
 8001388:	45400115 	stw	r21,4(r8)
 800138c:	d8c12015 	stw	r3,1152(sp)
 8001390:	d8811f15 	stw	r2,1148(sp)
 8001394:	010001c4 	movi	r4,7
 8001398:	20819116 	blt	r4,r2,80019e0 <___vfprintf_internal_r+0x1650>
 800139c:	42000204 	addi	r8,r8,8
 80013a0:	003dec06 	br	8000b54 <__alt_data_end+0xfc000b54>
 80013a4:	db013317 	ldw	r12,1228(sp)
 80013a8:	00800044 	movi	r2,1
 80013ac:	18c00044 	addi	r3,r3,1
 80013b0:	1301530e 	bge	r2,r12,8001900 <___vfprintf_internal_r+0x1570>
 80013b4:	dc011f17 	ldw	r16,1148(sp)
 80013b8:	dac13117 	ldw	r11,1220(sp)
 80013bc:	00800044 	movi	r2,1
 80013c0:	84000044 	addi	r16,r16,1
 80013c4:	40800115 	stw	r2,4(r8)
 80013c8:	42c00015 	stw	r11,0(r8)
 80013cc:	d8c12015 	stw	r3,1152(sp)
 80013d0:	dc011f15 	stw	r16,1148(sp)
 80013d4:	008001c4 	movi	r2,7
 80013d8:	14016b16 	blt	r2,r16,8001988 <___vfprintf_internal_r+0x15f8>
 80013dc:	42000204 	addi	r8,r8,8
 80013e0:	db013817 	ldw	r12,1248(sp)
 80013e4:	dac13517 	ldw	r11,1236(sp)
 80013e8:	84000044 	addi	r16,r16,1
 80013ec:	1b07883a 	add	r3,r3,r12
 80013f0:	42c00015 	stw	r11,0(r8)
 80013f4:	43000115 	stw	r12,4(r8)
 80013f8:	d8c12015 	stw	r3,1152(sp)
 80013fc:	dc011f15 	stw	r16,1148(sp)
 8001400:	008001c4 	movi	r2,7
 8001404:	14016916 	blt	r2,r16,80019ac <___vfprintf_internal_r+0x161c>
 8001408:	44800204 	addi	r18,r8,8
 800140c:	d9013717 	ldw	r4,1244(sp)
 8001410:	d9413917 	ldw	r5,1252(sp)
 8001414:	000d883a 	mov	r6,zero
 8001418:	000f883a 	mov	r7,zero
 800141c:	d8c13d15 	stw	r3,1268(sp)
 8001420:	800b1240 	call	800b124 <__eqdf2>
 8001424:	d8c13d17 	ldw	r3,1268(sp)
 8001428:	db013317 	ldw	r12,1228(sp)
 800142c:	1000ae26 	beq	r2,zero,80016e8 <___vfprintf_internal_r+0x1358>
 8001430:	dac13117 	ldw	r11,1220(sp)
 8001434:	60bfffc4 	addi	r2,r12,-1
 8001438:	1887883a 	add	r3,r3,r2
 800143c:	59000044 	addi	r4,r11,1
 8001440:	84000044 	addi	r16,r16,1
 8001444:	90800115 	stw	r2,4(r18)
 8001448:	91000015 	stw	r4,0(r18)
 800144c:	d8c12015 	stw	r3,1152(sp)
 8001450:	dc011f15 	stw	r16,1148(sp)
 8001454:	008001c4 	movi	r2,7
 8001458:	14014216 	blt	r2,r16,8001964 <___vfprintf_internal_r+0x15d4>
 800145c:	94800204 	addi	r18,r18,8
 8001460:	dac13a17 	ldw	r11,1256(sp)
 8001464:	dd4122c4 	addi	r21,sp,1163
 8001468:	84000044 	addi	r16,r16,1
 800146c:	58c7883a 	add	r3,r11,r3
 8001470:	95400015 	stw	r21,0(r18)
 8001474:	92c00115 	stw	r11,4(r18)
 8001478:	d8c12015 	stw	r3,1152(sp)
 800147c:	dc011f15 	stw	r16,1148(sp)
 8001480:	008001c4 	movi	r2,7
 8001484:	14000e16 	blt	r2,r16,80014c0 <___vfprintf_internal_r+0x1130>
 8001488:	92000204 	addi	r8,r18,8
 800148c:	003de706 	br	8000c2c <__alt_data_end+0xfc000c2c>
 8001490:	01020074 	movhi	r4,2049
 8001494:	213ca684 	addi	r4,r4,-3430
 8001498:	d9012c15 	stw	r4,1200(sp)
 800149c:	dac12c17 	ldw	r11,1200(sp)
 80014a0:	1c07883a 	add	r3,r3,r16
 80014a4:	44000115 	stw	r16,4(r8)
 80014a8:	42c00015 	stw	r11,0(r8)
 80014ac:	10800044 	addi	r2,r2,1
 80014b0:	d8c12015 	stw	r3,1152(sp)
 80014b4:	d8811f15 	stw	r2,1148(sp)
 80014b8:	010001c4 	movi	r4,7
 80014bc:	20bdda0e 	bge	r4,r2,8000c28 <__alt_data_end+0xfc000c28>
 80014c0:	b009883a 	mov	r4,r22
 80014c4:	b80b883a 	mov	r5,r23
 80014c8:	d9811e04 	addi	r6,sp,1144
 80014cc:	8006ad00 	call	8006ad0 <__sprint_r>
 80014d0:	103cc61e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80014d4:	d8c12017 	ldw	r3,1152(sp)
 80014d8:	da000404 	addi	r8,sp,16
 80014dc:	003dd306 	br	8000c2c <__alt_data_end+0xfc000c2c>
 80014e0:	b009883a 	mov	r4,r22
 80014e4:	b80b883a 	mov	r5,r23
 80014e8:	d9811e04 	addi	r6,sp,1144
 80014ec:	8006ad00 	call	8006ad0 <__sprint_r>
 80014f0:	103e0926 	beq	r2,zero,8000d18 <__alt_data_end+0xfc000d18>
 80014f4:	003cbd06 	br	80007ec <__alt_data_end+0xfc0007ec>
 80014f8:	10803fcc 	andi	r2,r2,255
 80014fc:	1000651e 	bne	r2,zero,8001694 <___vfprintf_internal_r+0x1304>
 8001500:	8880004c 	andi	r2,r17,1
 8001504:	10013226 	beq	r2,zero,80019d0 <___vfprintf_internal_r+0x1640>
 8001508:	00800c04 	movi	r2,48
 800150c:	d8c10dc4 	addi	r3,sp,1079
 8001510:	d8810dc5 	stb	r2,1079(sp)
 8001514:	dc813c17 	ldw	r18,1264(sp)
 8001518:	d8c13115 	stw	r3,1220(sp)
 800151c:	003d2b06 	br	80009cc <__alt_data_end+0xfc0009cc>
 8001520:	b009883a 	mov	r4,r22
 8001524:	b80b883a 	mov	r5,r23
 8001528:	d9811e04 	addi	r6,sp,1144
 800152c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001530:	103cae1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001534:	d8c12017 	ldw	r3,1152(sp)
 8001538:	da000404 	addi	r8,sp,16
 800153c:	003dae06 	br	8000bf8 <__alt_data_end+0xfc000bf8>
 8001540:	b009883a 	mov	r4,r22
 8001544:	b80b883a 	mov	r5,r23
 8001548:	d9811e04 	addi	r6,sp,1144
 800154c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001550:	103ca61e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001554:	d8c12017 	ldw	r3,1152(sp)
 8001558:	da000404 	addi	r8,sp,16
 800155c:	003d6c06 	br	8000b10 <__alt_data_end+0xfc000b10>
 8001560:	b009883a 	mov	r4,r22
 8001564:	b80b883a 	mov	r5,r23
 8001568:	d9811e04 	addi	r6,sp,1144
 800156c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001570:	103c9e1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001574:	d8c12017 	ldw	r3,1152(sp)
 8001578:	da000404 	addi	r8,sp,16
 800157c:	003d7206 	br	8000b48 <__alt_data_end+0xfc000b48>
 8001580:	d9413b17 	ldw	r5,1260(sp)
 8001584:	d8c10e04 	addi	r3,sp,1080
 8001588:	988003cc 	andi	r2,r19,15
 800158c:	e008973a 	slli	r4,fp,28
 8001590:	2885883a 	add	r2,r5,r2
 8001594:	9826d13a 	srli	r19,r19,4
 8001598:	10800003 	ldbu	r2,0(r2)
 800159c:	e038d13a 	srli	fp,fp,4
 80015a0:	18ffffc4 	addi	r3,r3,-1
 80015a4:	24e6b03a 	or	r19,r4,r19
 80015a8:	18800005 	stb	r2,0(r3)
 80015ac:	9f04b03a 	or	r2,r19,fp
 80015b0:	103ff51e 	bne	r2,zero,8001588 <__alt_data_end+0xfc001588>
 80015b4:	db012817 	ldw	r12,1184(sp)
 80015b8:	d8c13115 	stw	r3,1220(sp)
 80015bc:	60e5c83a 	sub	r18,r12,r3
 80015c0:	003d0206 	br	80009cc <__alt_data_end+0xfc0009cc>
 80015c4:	dc012617 	ldw	r16,1176(sp)
 80015c8:	0401b10e 	bge	zero,r16,8001c90 <___vfprintf_internal_r+0x1900>
 80015cc:	db013117 	ldw	r12,1220(sp)
 80015d0:	dac13317 	ldw	r11,1228(sp)
 80015d4:	62e1883a 	add	r16,r12,r11
 80015d8:	db013417 	ldw	r12,1232(sp)
 80015dc:	5825883a 	mov	r18,r11
 80015e0:	62c0010e 	bge	r12,r11,80015e8 <___vfprintf_internal_r+0x1258>
 80015e4:	6025883a 	mov	r18,r12
 80015e8:	04800b0e 	bge	zero,r18,8001618 <___vfprintf_internal_r+0x1288>
 80015ec:	d8811f17 	ldw	r2,1148(sp)
 80015f0:	dac13117 	ldw	r11,1220(sp)
 80015f4:	1c87883a 	add	r3,r3,r18
 80015f8:	10800044 	addi	r2,r2,1
 80015fc:	42c00015 	stw	r11,0(r8)
 8001600:	44800115 	stw	r18,4(r8)
 8001604:	d8c12015 	stw	r3,1152(sp)
 8001608:	d8811f15 	stw	r2,1148(sp)
 800160c:	010001c4 	movi	r4,7
 8001610:	20824f16 	blt	r4,r2,8001f50 <___vfprintf_internal_r+0x1bc0>
 8001614:	42000204 	addi	r8,r8,8
 8001618:	90024b16 	blt	r18,zero,8001f48 <___vfprintf_internal_r+0x1bb8>
 800161c:	db013417 	ldw	r12,1232(sp)
 8001620:	64a5c83a 	sub	r18,r12,r18
 8001624:	0480730e 	bge	zero,r18,80017f4 <___vfprintf_internal_r+0x1464>
 8001628:	05400404 	movi	r21,16
 800162c:	d8811f17 	ldw	r2,1148(sp)
 8001630:	ac817d0e 	bge	r21,r18,8001c28 <___vfprintf_internal_r+0x1898>
 8001634:	01420074 	movhi	r5,2049
 8001638:	297ca684 	addi	r5,r5,-3430
 800163c:	d9412c15 	stw	r5,1200(sp)
 8001640:	070001c4 	movi	fp,7
 8001644:	00000306 	br	8001654 <___vfprintf_internal_r+0x12c4>
 8001648:	42000204 	addi	r8,r8,8
 800164c:	94bffc04 	addi	r18,r18,-16
 8001650:	ac81780e 	bge	r21,r18,8001c34 <___vfprintf_internal_r+0x18a4>
 8001654:	18c00404 	addi	r3,r3,16
 8001658:	10800044 	addi	r2,r2,1
 800165c:	45000015 	stw	r20,0(r8)
 8001660:	45400115 	stw	r21,4(r8)
 8001664:	d8c12015 	stw	r3,1152(sp)
 8001668:	d8811f15 	stw	r2,1148(sp)
 800166c:	e0bff60e 	bge	fp,r2,8001648 <__alt_data_end+0xfc001648>
 8001670:	b009883a 	mov	r4,r22
 8001674:	b80b883a 	mov	r5,r23
 8001678:	d9811e04 	addi	r6,sp,1144
 800167c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001680:	103c5a1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001684:	d8c12017 	ldw	r3,1152(sp)
 8001688:	d8811f17 	ldw	r2,1148(sp)
 800168c:	da000404 	addi	r8,sp,16
 8001690:	003fee06 	br	800164c <__alt_data_end+0xfc00164c>
 8001694:	dac10e04 	addi	r11,sp,1080
 8001698:	0025883a 	mov	r18,zero
 800169c:	dac13115 	stw	r11,1220(sp)
 80016a0:	003cca06 	br	80009cc <__alt_data_end+0xfc0009cc>
 80016a4:	b009883a 	mov	r4,r22
 80016a8:	b80b883a 	mov	r5,r23
 80016ac:	d9811e04 	addi	r6,sp,1144
 80016b0:	8006ad00 	call	8006ad0 <__sprint_r>
 80016b4:	103c4d1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80016b8:	d8c12017 	ldw	r3,1152(sp)
 80016bc:	d8812787 	ldb	r2,1182(sp)
 80016c0:	da000404 	addi	r8,sp,16
 80016c4:	003d0506 	br	8000adc <__alt_data_end+0xfc000adc>
 80016c8:	dac12d17 	ldw	r11,1204(sp)
 80016cc:	14c00017 	ldw	r19,0(r2)
 80016d0:	0039883a 	mov	fp,zero
 80016d4:	5ac00104 	addi	r11,r11,4
 80016d8:	dac12d15 	stw	r11,1204(sp)
 80016dc:	0005883a 	mov	r2,zero
 80016e0:	9807883a 	mov	r3,r19
 80016e4:	003c9c06 	br	8000958 <__alt_data_end+0xfc000958>
 80016e8:	657fffc4 	addi	r21,r12,-1
 80016ec:	057f5c0e 	bge	zero,r21,8001460 <__alt_data_end+0xfc001460>
 80016f0:	07000404 	movi	fp,16
 80016f4:	e5408f0e 	bge	fp,r21,8001934 <___vfprintf_internal_r+0x15a4>
 80016f8:	01020074 	movhi	r4,2049
 80016fc:	213ca684 	addi	r4,r4,-3430
 8001700:	d9012c15 	stw	r4,1200(sp)
 8001704:	01c001c4 	movi	r7,7
 8001708:	00000306 	br	8001718 <___vfprintf_internal_r+0x1388>
 800170c:	94800204 	addi	r18,r18,8
 8001710:	ad7ffc04 	addi	r21,r21,-16
 8001714:	e5408a0e 	bge	fp,r21,8001940 <___vfprintf_internal_r+0x15b0>
 8001718:	18c00404 	addi	r3,r3,16
 800171c:	84000044 	addi	r16,r16,1
 8001720:	95000015 	stw	r20,0(r18)
 8001724:	97000115 	stw	fp,4(r18)
 8001728:	d8c12015 	stw	r3,1152(sp)
 800172c:	dc011f15 	stw	r16,1148(sp)
 8001730:	3c3ff60e 	bge	r7,r16,800170c <__alt_data_end+0xfc00170c>
 8001734:	b009883a 	mov	r4,r22
 8001738:	b80b883a 	mov	r5,r23
 800173c:	d9811e04 	addi	r6,sp,1144
 8001740:	d9c13d15 	stw	r7,1268(sp)
 8001744:	8006ad00 	call	8006ad0 <__sprint_r>
 8001748:	d9c13d17 	ldw	r7,1268(sp)
 800174c:	103c271e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001750:	d8c12017 	ldw	r3,1152(sp)
 8001754:	dc011f17 	ldw	r16,1148(sp)
 8001758:	dc800404 	addi	r18,sp,16
 800175c:	003fec06 	br	8001710 <__alt_data_end+0xfc001710>
 8001760:	1cc00017 	ldw	r19,0(r3)
 8001764:	dac12d17 	ldw	r11,1204(sp)
 8001768:	9839d7fa 	srai	fp,r19,31
 800176c:	5ac00104 	addi	r11,r11,4
 8001770:	dac12d15 	stw	r11,1204(sp)
 8001774:	e005883a 	mov	r2,fp
 8001778:	003d9006 	br	8000dbc <__alt_data_end+0xfc000dbc>
 800177c:	00800084 	movi	r2,2
 8001780:	9f06b03a 	or	r3,r19,fp
 8001784:	003c7406 	br	8000958 <__alt_data_end+0xfc000958>
 8001788:	db012d17 	ldw	r12,1204(sp)
 800178c:	14c00017 	ldw	r19,0(r2)
 8001790:	0039883a 	mov	fp,zero
 8001794:	63000104 	addi	r12,r12,4
 8001798:	db012d15 	stw	r12,1204(sp)
 800179c:	00800044 	movi	r2,1
 80017a0:	9807883a 	mov	r3,r19
 80017a4:	003c6c06 	br	8000958 <__alt_data_end+0xfc000958>
 80017a8:	10803fcc 	andi	r2,r2,255
 80017ac:	1080201c 	xori	r2,r2,128
 80017b0:	10bfe004 	addi	r2,r2,-128
 80017b4:	01000c04 	movi	r4,48
 80017b8:	1101a526 	beq	r2,r4,8001e50 <___vfprintf_internal_r+0x1ac0>
 80017bc:	dac13117 	ldw	r11,1220(sp)
 80017c0:	db012817 	ldw	r12,1184(sp)
 80017c4:	193fffc5 	stb	r4,-1(r3)
 80017c8:	5affffc4 	addi	r11,r11,-1
 80017cc:	dac13115 	stw	r11,1220(sp)
 80017d0:	62e5c83a 	sub	r18,r12,r11
 80017d4:	003c7d06 	br	80009cc <__alt_data_end+0xfc0009cc>
 80017d8:	b009883a 	mov	r4,r22
 80017dc:	b80b883a 	mov	r5,r23
 80017e0:	d9811e04 	addi	r6,sp,1144
 80017e4:	8006ad00 	call	8006ad0 <__sprint_r>
 80017e8:	103c001e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80017ec:	d8c12017 	ldw	r3,1152(sp)
 80017f0:	da000404 	addi	r8,sp,16
 80017f4:	db013117 	ldw	r12,1220(sp)
 80017f8:	dac13417 	ldw	r11,1232(sp)
 80017fc:	d8812617 	ldw	r2,1176(sp)
 8001800:	62e5883a 	add	r18,r12,r11
 8001804:	db013317 	ldw	r12,1228(sp)
 8001808:	13000216 	blt	r2,r12,8001814 <___vfprintf_internal_r+0x1484>
 800180c:	8900004c 	andi	r4,r17,1
 8001810:	20000c26 	beq	r4,zero,8001844 <___vfprintf_internal_r+0x14b4>
 8001814:	dac13817 	ldw	r11,1248(sp)
 8001818:	d9011f17 	ldw	r4,1148(sp)
 800181c:	db013517 	ldw	r12,1236(sp)
 8001820:	1ac7883a 	add	r3,r3,r11
 8001824:	21000044 	addi	r4,r4,1
 8001828:	43000015 	stw	r12,0(r8)
 800182c:	42c00115 	stw	r11,4(r8)
 8001830:	d8c12015 	stw	r3,1152(sp)
 8001834:	d9011f15 	stw	r4,1148(sp)
 8001838:	014001c4 	movi	r5,7
 800183c:	2901cc16 	blt	r5,r4,8001f70 <___vfprintf_internal_r+0x1be0>
 8001840:	42000204 	addi	r8,r8,8
 8001844:	dac13317 	ldw	r11,1228(sp)
 8001848:	8489c83a 	sub	r4,r16,r18
 800184c:	5885c83a 	sub	r2,r11,r2
 8001850:	1021883a 	mov	r16,r2
 8001854:	2080010e 	bge	r4,r2,800185c <___vfprintf_internal_r+0x14cc>
 8001858:	2021883a 	mov	r16,r4
 800185c:	04000a0e 	bge	zero,r16,8001888 <___vfprintf_internal_r+0x14f8>
 8001860:	d9011f17 	ldw	r4,1148(sp)
 8001864:	1c07883a 	add	r3,r3,r16
 8001868:	44800015 	stw	r18,0(r8)
 800186c:	21000044 	addi	r4,r4,1
 8001870:	44000115 	stw	r16,4(r8)
 8001874:	d8c12015 	stw	r3,1152(sp)
 8001878:	d9011f15 	stw	r4,1148(sp)
 800187c:	014001c4 	movi	r5,7
 8001880:	2901d616 	blt	r5,r4,8001fdc <___vfprintf_internal_r+0x1c4c>
 8001884:	42000204 	addi	r8,r8,8
 8001888:	8001df16 	blt	r16,zero,8002008 <___vfprintf_internal_r+0x1c78>
 800188c:	1421c83a 	sub	r16,r2,r16
 8001890:	043ce60e 	bge	zero,r16,8000c2c <__alt_data_end+0xfc000c2c>
 8001894:	04800404 	movi	r18,16
 8001898:	d8811f17 	ldw	r2,1148(sp)
 800189c:	943efc0e 	bge	r18,r16,8001490 <__alt_data_end+0xfc001490>
 80018a0:	01420074 	movhi	r5,2049
 80018a4:	297ca684 	addi	r5,r5,-3430
 80018a8:	d9412c15 	stw	r5,1200(sp)
 80018ac:	054001c4 	movi	r21,7
 80018b0:	00000306 	br	80018c0 <___vfprintf_internal_r+0x1530>
 80018b4:	42000204 	addi	r8,r8,8
 80018b8:	843ffc04 	addi	r16,r16,-16
 80018bc:	943ef70e 	bge	r18,r16,800149c <__alt_data_end+0xfc00149c>
 80018c0:	18c00404 	addi	r3,r3,16
 80018c4:	10800044 	addi	r2,r2,1
 80018c8:	45000015 	stw	r20,0(r8)
 80018cc:	44800115 	stw	r18,4(r8)
 80018d0:	d8c12015 	stw	r3,1152(sp)
 80018d4:	d8811f15 	stw	r2,1148(sp)
 80018d8:	a8bff60e 	bge	r21,r2,80018b4 <__alt_data_end+0xfc0018b4>
 80018dc:	b009883a 	mov	r4,r22
 80018e0:	b80b883a 	mov	r5,r23
 80018e4:	d9811e04 	addi	r6,sp,1144
 80018e8:	8006ad00 	call	8006ad0 <__sprint_r>
 80018ec:	103bbf1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80018f0:	d8c12017 	ldw	r3,1152(sp)
 80018f4:	d8811f17 	ldw	r2,1148(sp)
 80018f8:	da000404 	addi	r8,sp,16
 80018fc:	003fee06 	br	80018b8 <__alt_data_end+0xfc0018b8>
 8001900:	8888703a 	and	r4,r17,r2
 8001904:	203eab1e 	bne	r4,zero,80013b4 <__alt_data_end+0xfc0013b4>
 8001908:	dc011f17 	ldw	r16,1148(sp)
 800190c:	db013117 	ldw	r12,1220(sp)
 8001910:	40800115 	stw	r2,4(r8)
 8001914:	84000044 	addi	r16,r16,1
 8001918:	43000015 	stw	r12,0(r8)
 800191c:	d8c12015 	stw	r3,1152(sp)
 8001920:	dc011f15 	stw	r16,1148(sp)
 8001924:	008001c4 	movi	r2,7
 8001928:	14000e16 	blt	r2,r16,8001964 <___vfprintf_internal_r+0x15d4>
 800192c:	44800204 	addi	r18,r8,8
 8001930:	003ecb06 	br	8001460 <__alt_data_end+0xfc001460>
 8001934:	00820074 	movhi	r2,2049
 8001938:	10bca684 	addi	r2,r2,-3430
 800193c:	d8812c15 	stw	r2,1200(sp)
 8001940:	dac12c17 	ldw	r11,1200(sp)
 8001944:	1d47883a 	add	r3,r3,r21
 8001948:	84000044 	addi	r16,r16,1
 800194c:	92c00015 	stw	r11,0(r18)
 8001950:	95400115 	stw	r21,4(r18)
 8001954:	d8c12015 	stw	r3,1152(sp)
 8001958:	dc011f15 	stw	r16,1148(sp)
 800195c:	008001c4 	movi	r2,7
 8001960:	143ebe0e 	bge	r2,r16,800145c <__alt_data_end+0xfc00145c>
 8001964:	b009883a 	mov	r4,r22
 8001968:	b80b883a 	mov	r5,r23
 800196c:	d9811e04 	addi	r6,sp,1144
 8001970:	8006ad00 	call	8006ad0 <__sprint_r>
 8001974:	103b9d1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001978:	d8c12017 	ldw	r3,1152(sp)
 800197c:	dc011f17 	ldw	r16,1148(sp)
 8001980:	dc800404 	addi	r18,sp,16
 8001984:	003eb606 	br	8001460 <__alt_data_end+0xfc001460>
 8001988:	b009883a 	mov	r4,r22
 800198c:	b80b883a 	mov	r5,r23
 8001990:	d9811e04 	addi	r6,sp,1144
 8001994:	8006ad00 	call	8006ad0 <__sprint_r>
 8001998:	103b941e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 800199c:	d8c12017 	ldw	r3,1152(sp)
 80019a0:	dc011f17 	ldw	r16,1148(sp)
 80019a4:	da000404 	addi	r8,sp,16
 80019a8:	003e8d06 	br	80013e0 <__alt_data_end+0xfc0013e0>
 80019ac:	b009883a 	mov	r4,r22
 80019b0:	b80b883a 	mov	r5,r23
 80019b4:	d9811e04 	addi	r6,sp,1144
 80019b8:	8006ad00 	call	8006ad0 <__sprint_r>
 80019bc:	103b8b1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80019c0:	d8c12017 	ldw	r3,1152(sp)
 80019c4:	dc011f17 	ldw	r16,1148(sp)
 80019c8:	dc800404 	addi	r18,sp,16
 80019cc:	003e8f06 	br	800140c <__alt_data_end+0xfc00140c>
 80019d0:	db010e04 	addi	r12,sp,1080
 80019d4:	0025883a 	mov	r18,zero
 80019d8:	db013115 	stw	r12,1220(sp)
 80019dc:	003bfb06 	br	80009cc <__alt_data_end+0xfc0009cc>
 80019e0:	b009883a 	mov	r4,r22
 80019e4:	b80b883a 	mov	r5,r23
 80019e8:	d9811e04 	addi	r6,sp,1144
 80019ec:	8006ad00 	call	8006ad0 <__sprint_r>
 80019f0:	103b7e1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80019f4:	d8c12017 	ldw	r3,1152(sp)
 80019f8:	da000404 	addi	r8,sp,16
 80019fc:	003c5506 	br	8000b54 <__alt_data_end+0xfc000b54>
 8001a00:	04e7c83a 	sub	r19,zero,r19
 8001a04:	9804c03a 	cmpne	r2,r19,zero
 8001a08:	0739c83a 	sub	fp,zero,fp
 8001a0c:	e0b9c83a 	sub	fp,fp,r2
 8001a10:	05400b44 	movi	r21,45
 8001a14:	dd412785 	stb	r21,1182(sp)
 8001a18:	da413215 	stw	r9,1224(sp)
 8001a1c:	00800044 	movi	r2,1
 8001a20:	9f06b03a 	or	r3,r19,fp
 8001a24:	003bcf06 	br	8000964 <__alt_data_end+0xfc000964>
 8001a28:	da013f15 	stw	r8,1276(sp)
 8001a2c:	da413e15 	stw	r9,1272(sp)
 8001a30:	80066940 	call	8006694 <__fpclassifyd>
 8001a34:	da013f17 	ldw	r8,1276(sp)
 8001a38:	da413e17 	ldw	r9,1272(sp)
 8001a3c:	1000ce26 	beq	r2,zero,8001d78 <___vfprintf_internal_r+0x19e8>
 8001a40:	057ff7c4 	movi	r21,-33
 8001a44:	00bfffc4 	movi	r2,-1
 8001a48:	856a703a 	and	r21,r16,r21
 8001a4c:	4881f026 	beq	r9,r2,8002210 <___vfprintf_internal_r+0x1e80>
 8001a50:	008011c4 	movi	r2,71
 8001a54:	a881e526 	beq	r21,r2,80021ec <___vfprintf_internal_r+0x1e5c>
 8001a58:	db013917 	ldw	r12,1252(sp)
 8001a5c:	8ac04014 	ori	r11,r17,256
 8001a60:	dac12d15 	stw	r11,1204(sp)
 8001a64:	6001e416 	blt	r12,zero,80021f8 <___vfprintf_internal_r+0x1e68>
 8001a68:	dc813917 	ldw	r18,1252(sp)
 8001a6c:	d8012b05 	stb	zero,1196(sp)
 8001a70:	00801984 	movi	r2,102
 8001a74:	80811826 	beq	r16,r2,8001ed8 <___vfprintf_internal_r+0x1b48>
 8001a78:	00801184 	movi	r2,70
 8001a7c:	80811626 	beq	r16,r2,8001ed8 <___vfprintf_internal_r+0x1b48>
 8001a80:	00801144 	movi	r2,69
 8001a84:	a881e026 	beq	r21,r2,8002208 <___vfprintf_internal_r+0x1e78>
 8001a88:	4839883a 	mov	fp,r9
 8001a8c:	d8812604 	addi	r2,sp,1176
 8001a90:	d8800115 	stw	r2,4(sp)
 8001a94:	d9413717 	ldw	r5,1244(sp)
 8001a98:	d8812504 	addi	r2,sp,1172
 8001a9c:	d8800215 	stw	r2,8(sp)
 8001aa0:	d8812104 	addi	r2,sp,1156
 8001aa4:	df000015 	stw	fp,0(sp)
 8001aa8:	d8800315 	stw	r2,12(sp)
 8001aac:	b009883a 	mov	r4,r22
 8001ab0:	900d883a 	mov	r6,r18
 8001ab4:	01c00084 	movi	r7,2
 8001ab8:	da013f15 	stw	r8,1276(sp)
 8001abc:	da413e15 	stw	r9,1272(sp)
 8001ac0:	80026e00 	call	80026e0 <_dtoa_r>
 8001ac4:	d8813115 	stw	r2,1220(sp)
 8001ac8:	008019c4 	movi	r2,103
 8001acc:	da013f17 	ldw	r8,1276(sp)
 8001ad0:	da413e17 	ldw	r9,1272(sp)
 8001ad4:	80800226 	beq	r16,r2,8001ae0 <___vfprintf_internal_r+0x1750>
 8001ad8:	008011c4 	movi	r2,71
 8001adc:	8081101e 	bne	r16,r2,8001f20 <___vfprintf_internal_r+0x1b90>
 8001ae0:	8880004c 	andi	r2,r17,1
 8001ae4:	1001df26 	beq	r2,zero,8002264 <___vfprintf_internal_r+0x1ed4>
 8001ae8:	db013117 	ldw	r12,1220(sp)
 8001aec:	6715883a 	add	r10,r12,fp
 8001af0:	d9013717 	ldw	r4,1244(sp)
 8001af4:	900b883a 	mov	r5,r18
 8001af8:	000d883a 	mov	r6,zero
 8001afc:	000f883a 	mov	r7,zero
 8001b00:	da013f15 	stw	r8,1276(sp)
 8001b04:	da413e15 	stw	r9,1272(sp)
 8001b08:	da813d15 	stw	r10,1268(sp)
 8001b0c:	800b1240 	call	800b124 <__eqdf2>
 8001b10:	da013f17 	ldw	r8,1276(sp)
 8001b14:	da413e17 	ldw	r9,1272(sp)
 8001b18:	da813d17 	ldw	r10,1268(sp)
 8001b1c:	10016526 	beq	r2,zero,80020b4 <___vfprintf_internal_r+0x1d24>
 8001b20:	d8812117 	ldw	r2,1156(sp)
 8001b24:	1280062e 	bgeu	r2,r10,8001b40 <___vfprintf_internal_r+0x17b0>
 8001b28:	01000c04 	movi	r4,48
 8001b2c:	10c00044 	addi	r3,r2,1
 8001b30:	d8c12115 	stw	r3,1156(sp)
 8001b34:	11000005 	stb	r4,0(r2)
 8001b38:	d8812117 	ldw	r2,1156(sp)
 8001b3c:	12bffb36 	bltu	r2,r10,8001b2c <__alt_data_end+0xfc001b2c>
 8001b40:	db013117 	ldw	r12,1220(sp)
 8001b44:	1305c83a 	sub	r2,r2,r12
 8001b48:	d8813315 	stw	r2,1228(sp)
 8001b4c:	008011c4 	movi	r2,71
 8001b50:	a8814a26 	beq	r21,r2,800207c <___vfprintf_internal_r+0x1cec>
 8001b54:	00801944 	movi	r2,101
 8001b58:	14020a0e 	bge	r2,r16,8002384 <___vfprintf_internal_r+0x1ff4>
 8001b5c:	00801984 	movi	r2,102
 8001b60:	8081b626 	beq	r16,r2,800223c <___vfprintf_internal_r+0x1eac>
 8001b64:	db012617 	ldw	r12,1176(sp)
 8001b68:	db013415 	stw	r12,1232(sp)
 8001b6c:	db013417 	ldw	r12,1232(sp)
 8001b70:	dac13317 	ldw	r11,1228(sp)
 8001b74:	62c1a816 	blt	r12,r11,8002218 <___vfprintf_internal_r+0x1e88>
 8001b78:	8c40004c 	andi	r17,r17,1
 8001b7c:	8801ca1e 	bne	r17,zero,80022a8 <___vfprintf_internal_r+0x1f18>
 8001b80:	6005883a 	mov	r2,r12
 8001b84:	6001b516 	blt	r12,zero,800225c <___vfprintf_internal_r+0x1ecc>
 8001b88:	dc813417 	ldw	r18,1232(sp)
 8001b8c:	df012b07 	ldb	fp,1196(sp)
 8001b90:	e001321e 	bne	fp,zero,800205c <___vfprintf_internal_r+0x1ccc>
 8001b94:	dc412d17 	ldw	r17,1204(sp)
 8001b98:	dd412783 	ldbu	r21,1182(sp)
 8001b9c:	d8812b15 	stw	r2,1196(sp)
 8001ba0:	dcc12d15 	stw	r19,1204(sp)
 8001ba4:	d8013215 	stw	zero,1224(sp)
 8001ba8:	003b8d06 	br	80009e0 <__alt_data_end+0xfc0009e0>
 8001bac:	88c0100c 	andi	r3,r17,64
 8001bb0:	18008226 	beq	r3,zero,8001dbc <___vfprintf_internal_r+0x1a2c>
 8001bb4:	dac12d17 	ldw	r11,1204(sp)
 8001bb8:	14c0000b 	ldhu	r19,0(r2)
 8001bbc:	0039883a 	mov	fp,zero
 8001bc0:	5ac00104 	addi	r11,r11,4
 8001bc4:	dac12d15 	stw	r11,1204(sp)
 8001bc8:	003c8f06 	br	8000e08 <__alt_data_end+0xfc000e08>
 8001bcc:	1c000007 	ldb	r16,0(r3)
 8001bd0:	1805883a 	mov	r2,r3
 8001bd4:	003a5506 	br	800052c <__alt_data_end+0xfc00052c>
 8001bd8:	00800084 	movi	r2,2
 8001bdc:	003b5e06 	br	8000958 <__alt_data_end+0xfc000958>
 8001be0:	8880040c 	andi	r2,r17,16
 8001be4:	1000091e 	bne	r2,zero,8001c0c <___vfprintf_internal_r+0x187c>
 8001be8:	8c40100c 	andi	r17,r17,64
 8001bec:	88000726 	beq	r17,zero,8001c0c <___vfprintf_internal_r+0x187c>
 8001bf0:	db012d17 	ldw	r12,1204(sp)
 8001bf4:	dac12f17 	ldw	r11,1212(sp)
 8001bf8:	60800017 	ldw	r2,0(r12)
 8001bfc:	63000104 	addi	r12,r12,4
 8001c00:	db012d15 	stw	r12,1204(sp)
 8001c04:	12c0000d 	sth	r11,0(r2)
 8001c08:	003a1e06 	br	8000484 <__alt_data_end+0xfc000484>
 8001c0c:	db012d17 	ldw	r12,1204(sp)
 8001c10:	dac12f17 	ldw	r11,1212(sp)
 8001c14:	60800017 	ldw	r2,0(r12)
 8001c18:	63000104 	addi	r12,r12,4
 8001c1c:	db012d15 	stw	r12,1204(sp)
 8001c20:	12c00015 	stw	r11,0(r2)
 8001c24:	003a1706 	br	8000484 <__alt_data_end+0xfc000484>
 8001c28:	01020074 	movhi	r4,2049
 8001c2c:	213ca684 	addi	r4,r4,-3430
 8001c30:	d9012c15 	stw	r4,1200(sp)
 8001c34:	dac12c17 	ldw	r11,1200(sp)
 8001c38:	1c87883a 	add	r3,r3,r18
 8001c3c:	10800044 	addi	r2,r2,1
 8001c40:	42c00015 	stw	r11,0(r8)
 8001c44:	44800115 	stw	r18,4(r8)
 8001c48:	d8c12015 	stw	r3,1152(sp)
 8001c4c:	d8811f15 	stw	r2,1148(sp)
 8001c50:	010001c4 	movi	r4,7
 8001c54:	20bee016 	blt	r4,r2,80017d8 <__alt_data_end+0xfc0017d8>
 8001c58:	42000204 	addi	r8,r8,8
 8001c5c:	003ee506 	br	80017f4 <__alt_data_end+0xfc0017f4>
 8001c60:	01020074 	movhi	r4,2049
 8001c64:	213ca684 	addi	r4,r4,-3430
 8001c68:	d9012c15 	stw	r4,1200(sp)
 8001c6c:	003bd806 	br	8000bd0 <__alt_data_end+0xfc000bd0>
 8001c70:	b009883a 	mov	r4,r22
 8001c74:	b80b883a 	mov	r5,r23
 8001c78:	d9811e04 	addi	r6,sp,1144
 8001c7c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001c80:	103ada1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001c84:	d8c12017 	ldw	r3,1152(sp)
 8001c88:	da000404 	addi	r8,sp,16
 8001c8c:	003d6b06 	br	800123c <__alt_data_end+0xfc00123c>
 8001c90:	d8811f17 	ldw	r2,1148(sp)
 8001c94:	03020074 	movhi	r12,2049
 8001c98:	01000044 	movi	r4,1
 8001c9c:	18c00044 	addi	r3,r3,1
 8001ca0:	10800044 	addi	r2,r2,1
 8001ca4:	633ca604 	addi	r12,r12,-3432
 8001ca8:	41000115 	stw	r4,4(r8)
 8001cac:	43000015 	stw	r12,0(r8)
 8001cb0:	d8c12015 	stw	r3,1152(sp)
 8001cb4:	d8811f15 	stw	r2,1148(sp)
 8001cb8:	010001c4 	movi	r4,7
 8001cbc:	20804916 	blt	r4,r2,8001de4 <___vfprintf_internal_r+0x1a54>
 8001cc0:	42000204 	addi	r8,r8,8
 8001cc4:	8000041e 	bne	r16,zero,8001cd8 <___vfprintf_internal_r+0x1948>
 8001cc8:	dac13317 	ldw	r11,1228(sp)
 8001ccc:	5800021e 	bne	r11,zero,8001cd8 <___vfprintf_internal_r+0x1948>
 8001cd0:	8880004c 	andi	r2,r17,1
 8001cd4:	103bd526 	beq	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001cd8:	db013817 	ldw	r12,1248(sp)
 8001cdc:	d8811f17 	ldw	r2,1148(sp)
 8001ce0:	dac13517 	ldw	r11,1236(sp)
 8001ce4:	1b07883a 	add	r3,r3,r12
 8001ce8:	10800044 	addi	r2,r2,1
 8001cec:	42c00015 	stw	r11,0(r8)
 8001cf0:	43000115 	stw	r12,4(r8)
 8001cf4:	d8c12015 	stw	r3,1152(sp)
 8001cf8:	d8811f15 	stw	r2,1148(sp)
 8001cfc:	010001c4 	movi	r4,7
 8001d00:	20813016 	blt	r4,r2,80021c4 <___vfprintf_internal_r+0x1e34>
 8001d04:	42000204 	addi	r8,r8,8
 8001d08:	0421c83a 	sub	r16,zero,r16
 8001d0c:	0400630e 	bge	zero,r16,8001e9c <___vfprintf_internal_r+0x1b0c>
 8001d10:	04800404 	movi	r18,16
 8001d14:	94009f0e 	bge	r18,r16,8001f94 <___vfprintf_internal_r+0x1c04>
 8001d18:	01020074 	movhi	r4,2049
 8001d1c:	213ca684 	addi	r4,r4,-3430
 8001d20:	d9012c15 	stw	r4,1200(sp)
 8001d24:	054001c4 	movi	r21,7
 8001d28:	00000306 	br	8001d38 <___vfprintf_internal_r+0x19a8>
 8001d2c:	42000204 	addi	r8,r8,8
 8001d30:	843ffc04 	addi	r16,r16,-16
 8001d34:	94009a0e 	bge	r18,r16,8001fa0 <___vfprintf_internal_r+0x1c10>
 8001d38:	18c00404 	addi	r3,r3,16
 8001d3c:	10800044 	addi	r2,r2,1
 8001d40:	45000015 	stw	r20,0(r8)
 8001d44:	44800115 	stw	r18,4(r8)
 8001d48:	d8c12015 	stw	r3,1152(sp)
 8001d4c:	d8811f15 	stw	r2,1148(sp)
 8001d50:	a8bff60e 	bge	r21,r2,8001d2c <__alt_data_end+0xfc001d2c>
 8001d54:	b009883a 	mov	r4,r22
 8001d58:	b80b883a 	mov	r5,r23
 8001d5c:	d9811e04 	addi	r6,sp,1144
 8001d60:	8006ad00 	call	8006ad0 <__sprint_r>
 8001d64:	103aa11e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001d68:	d8c12017 	ldw	r3,1152(sp)
 8001d6c:	d8811f17 	ldw	r2,1148(sp)
 8001d70:	da000404 	addi	r8,sp,16
 8001d74:	003fee06 	br	8001d30 <__alt_data_end+0xfc001d30>
 8001d78:	008011c4 	movi	r2,71
 8001d7c:	1400b316 	blt	r2,r16,800204c <___vfprintf_internal_r+0x1cbc>
 8001d80:	03020074 	movhi	r12,2049
 8001d84:	633c9804 	addi	r12,r12,-3488
 8001d88:	db013115 	stw	r12,1220(sp)
 8001d8c:	00c000c4 	movi	r3,3
 8001d90:	00bfdfc4 	movi	r2,-129
 8001d94:	d8c12b15 	stw	r3,1196(sp)
 8001d98:	88a2703a 	and	r17,r17,r2
 8001d9c:	dd412783 	ldbu	r21,1182(sp)
 8001da0:	dcc12d15 	stw	r19,1204(sp)
 8001da4:	1825883a 	mov	r18,r3
 8001da8:	d8013215 	stw	zero,1224(sp)
 8001dac:	d8013415 	stw	zero,1232(sp)
 8001db0:	003b0b06 	br	80009e0 <__alt_data_end+0xfc0009e0>
 8001db4:	4825883a 	mov	r18,r9
 8001db8:	003cba06 	br	80010a4 <__alt_data_end+0xfc0010a4>
 8001dbc:	db012d17 	ldw	r12,1204(sp)
 8001dc0:	14c00017 	ldw	r19,0(r2)
 8001dc4:	0039883a 	mov	fp,zero
 8001dc8:	63000104 	addi	r12,r12,4
 8001dcc:	db012d15 	stw	r12,1204(sp)
 8001dd0:	003c0d06 	br	8000e08 <__alt_data_end+0xfc000e08>
 8001dd4:	00820074 	movhi	r2,2049
 8001dd8:	10bc9604 	addi	r2,r2,-3496
 8001ddc:	d8813115 	stw	r2,1220(sp)
 8001de0:	003ac406 	br	80008f4 <__alt_data_end+0xfc0008f4>
 8001de4:	b009883a 	mov	r4,r22
 8001de8:	b80b883a 	mov	r5,r23
 8001dec:	d9811e04 	addi	r6,sp,1144
 8001df0:	8006ad00 	call	8006ad0 <__sprint_r>
 8001df4:	103a7d1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001df8:	dc012617 	ldw	r16,1176(sp)
 8001dfc:	d8c12017 	ldw	r3,1152(sp)
 8001e00:	da000404 	addi	r8,sp,16
 8001e04:	003faf06 	br	8001cc4 <__alt_data_end+0xfc001cc4>
 8001e08:	db012e17 	ldw	r12,1208(sp)
 8001e0c:	1805883a 	mov	r2,r3
 8001e10:	dac12d15 	stw	r11,1204(sp)
 8001e14:	0319c83a 	sub	r12,zero,r12
 8001e18:	db012e15 	stw	r12,1208(sp)
 8001e1c:	003a7e06 	br	8000818 <__alt_data_end+0xfc000818>
 8001e20:	18800044 	addi	r2,r3,1
 8001e24:	8c400814 	ori	r17,r17,32
 8001e28:	1c000047 	ldb	r16,1(r3)
 8001e2c:	0039bf06 	br	800052c <__alt_data_end+0xfc00052c>
 8001e30:	b009883a 	mov	r4,r22
 8001e34:	b80b883a 	mov	r5,r23
 8001e38:	d9811e04 	addi	r6,sp,1144
 8001e3c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001e40:	103a6a1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001e44:	d8c12017 	ldw	r3,1152(sp)
 8001e48:	da000404 	addi	r8,sp,16
 8001e4c:	003d0c06 	br	8001280 <__alt_data_end+0xfc001280>
 8001e50:	db012817 	ldw	r12,1184(sp)
 8001e54:	d8c13117 	ldw	r3,1220(sp)
 8001e58:	60e5c83a 	sub	r18,r12,r3
 8001e5c:	003adb06 	br	80009cc <__alt_data_end+0xfc0009cc>
 8001e60:	da013f15 	stw	r8,1276(sp)
 8001e64:	800693c0 	call	800693c <strlen>
 8001e68:	1025883a 	mov	r18,r2
 8001e6c:	da013f17 	ldw	r8,1276(sp)
 8001e70:	903c8e0e 	bge	r18,zero,80010ac <__alt_data_end+0xfc0010ac>
 8001e74:	0005883a 	mov	r2,zero
 8001e78:	003c8c06 	br	80010ac <__alt_data_end+0xfc0010ac>
 8001e7c:	b009883a 	mov	r4,r22
 8001e80:	b80b883a 	mov	r5,r23
 8001e84:	d9811e04 	addi	r6,sp,1144
 8001e88:	8006ad00 	call	8006ad0 <__sprint_r>
 8001e8c:	103a571e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001e90:	d8c12017 	ldw	r3,1152(sp)
 8001e94:	d8811f17 	ldw	r2,1148(sp)
 8001e98:	da000404 	addi	r8,sp,16
 8001e9c:	db013317 	ldw	r12,1228(sp)
 8001ea0:	dac13117 	ldw	r11,1220(sp)
 8001ea4:	10800044 	addi	r2,r2,1
 8001ea8:	60c7883a 	add	r3,r12,r3
 8001eac:	42c00015 	stw	r11,0(r8)
 8001eb0:	43000115 	stw	r12,4(r8)
 8001eb4:	d8c12015 	stw	r3,1152(sp)
 8001eb8:	d8811f15 	stw	r2,1148(sp)
 8001ebc:	010001c4 	movi	r4,7
 8001ec0:	20bb590e 	bge	r4,r2,8000c28 <__alt_data_end+0xfc000c28>
 8001ec4:	003d7e06 	br	80014c0 <__alt_data_end+0xfc0014c0>
 8001ec8:	01020074 	movhi	r4,2049
 8001ecc:	213caa84 	addi	r4,r4,-3414
 8001ed0:	d9013615 	stw	r4,1240(sp)
 8001ed4:	003af606 	br	8000ab0 <__alt_data_end+0xfc000ab0>
 8001ed8:	d8812604 	addi	r2,sp,1176
 8001edc:	d8800115 	stw	r2,4(sp)
 8001ee0:	d9413717 	ldw	r5,1244(sp)
 8001ee4:	d8812504 	addi	r2,sp,1172
 8001ee8:	d8800215 	stw	r2,8(sp)
 8001eec:	d8812104 	addi	r2,sp,1156
 8001ef0:	da400015 	stw	r9,0(sp)
 8001ef4:	d8800315 	stw	r2,12(sp)
 8001ef8:	b009883a 	mov	r4,r22
 8001efc:	900d883a 	mov	r6,r18
 8001f00:	01c000c4 	movi	r7,3
 8001f04:	da013f15 	stw	r8,1276(sp)
 8001f08:	da413e15 	stw	r9,1272(sp)
 8001f0c:	80026e00 	call	80026e0 <_dtoa_r>
 8001f10:	da413e17 	ldw	r9,1272(sp)
 8001f14:	da013f17 	ldw	r8,1276(sp)
 8001f18:	d8813115 	stw	r2,1220(sp)
 8001f1c:	4839883a 	mov	fp,r9
 8001f20:	dac13117 	ldw	r11,1220(sp)
 8001f24:	00801184 	movi	r2,70
 8001f28:	5f15883a 	add	r10,r11,fp
 8001f2c:	a8bef01e 	bne	r21,r2,8001af0 <__alt_data_end+0xfc001af0>
 8001f30:	59000007 	ldb	r4,0(r11)
 8001f34:	00800c04 	movi	r2,48
 8001f38:	2080e026 	beq	r4,r2,80022bc <___vfprintf_internal_r+0x1f2c>
 8001f3c:	d8c12617 	ldw	r3,1176(sp)
 8001f40:	50d5883a 	add	r10,r10,r3
 8001f44:	003eea06 	br	8001af0 <__alt_data_end+0xfc001af0>
 8001f48:	0025883a 	mov	r18,zero
 8001f4c:	003db306 	br	800161c <__alt_data_end+0xfc00161c>
 8001f50:	b009883a 	mov	r4,r22
 8001f54:	b80b883a 	mov	r5,r23
 8001f58:	d9811e04 	addi	r6,sp,1144
 8001f5c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001f60:	103a221e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001f64:	d8c12017 	ldw	r3,1152(sp)
 8001f68:	da000404 	addi	r8,sp,16
 8001f6c:	003daa06 	br	8001618 <__alt_data_end+0xfc001618>
 8001f70:	b009883a 	mov	r4,r22
 8001f74:	b80b883a 	mov	r5,r23
 8001f78:	d9811e04 	addi	r6,sp,1144
 8001f7c:	8006ad00 	call	8006ad0 <__sprint_r>
 8001f80:	103a1a1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001f84:	d8812617 	ldw	r2,1176(sp)
 8001f88:	d8c12017 	ldw	r3,1152(sp)
 8001f8c:	da000404 	addi	r8,sp,16
 8001f90:	003e2c06 	br	8001844 <__alt_data_end+0xfc001844>
 8001f94:	03020074 	movhi	r12,2049
 8001f98:	633ca684 	addi	r12,r12,-3430
 8001f9c:	db012c15 	stw	r12,1200(sp)
 8001fa0:	dac12c17 	ldw	r11,1200(sp)
 8001fa4:	1c07883a 	add	r3,r3,r16
 8001fa8:	10800044 	addi	r2,r2,1
 8001fac:	42c00015 	stw	r11,0(r8)
 8001fb0:	44000115 	stw	r16,4(r8)
 8001fb4:	d8c12015 	stw	r3,1152(sp)
 8001fb8:	d8811f15 	stw	r2,1148(sp)
 8001fbc:	010001c4 	movi	r4,7
 8001fc0:	20bfae16 	blt	r4,r2,8001e7c <__alt_data_end+0xfc001e7c>
 8001fc4:	42000204 	addi	r8,r8,8
 8001fc8:	003fb406 	br	8001e9c <__alt_data_end+0xfc001e9c>
 8001fcc:	03020074 	movhi	r12,2049
 8001fd0:	633caa84 	addi	r12,r12,-3414
 8001fd4:	db013615 	stw	r12,1240(sp)
 8001fd8:	003b3806 	br	8000cbc <__alt_data_end+0xfc000cbc>
 8001fdc:	b009883a 	mov	r4,r22
 8001fe0:	b80b883a 	mov	r5,r23
 8001fe4:	d9811e04 	addi	r6,sp,1144
 8001fe8:	8006ad00 	call	8006ad0 <__sprint_r>
 8001fec:	1039ff1e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 8001ff0:	d8812617 	ldw	r2,1176(sp)
 8001ff4:	db013317 	ldw	r12,1228(sp)
 8001ff8:	d8c12017 	ldw	r3,1152(sp)
 8001ffc:	da000404 	addi	r8,sp,16
 8002000:	6085c83a 	sub	r2,r12,r2
 8002004:	003e2006 	br	8001888 <__alt_data_end+0xfc001888>
 8002008:	0021883a 	mov	r16,zero
 800200c:	003e1f06 	br	800188c <__alt_data_end+0xfc00188c>
 8002010:	00800184 	movi	r2,6
 8002014:	1240012e 	bgeu	r2,r9,800201c <___vfprintf_internal_r+0x1c8c>
 8002018:	1013883a 	mov	r9,r2
 800201c:	4825883a 	mov	r18,r9
 8002020:	4805883a 	mov	r2,r9
 8002024:	48009e16 	blt	r9,zero,80022a0 <___vfprintf_internal_r+0x1f10>
 8002028:	d8812b15 	stw	r2,1196(sp)
 800202c:	00820074 	movhi	r2,2049
 8002030:	10bca404 	addi	r2,r2,-3440
 8002034:	d8813115 	stw	r2,1220(sp)
 8002038:	dcc12d15 	stw	r19,1204(sp)
 800203c:	d8013215 	stw	zero,1224(sp)
 8002040:	d8013415 	stw	zero,1232(sp)
 8002044:	0005883a 	mov	r2,zero
 8002048:	003a6c06 	br	80009fc <__alt_data_end+0xfc0009fc>
 800204c:	00820074 	movhi	r2,2049
 8002050:	10bc9904 	addi	r2,r2,-3484
 8002054:	d8813115 	stw	r2,1220(sp)
 8002058:	003f4c06 	br	8001d8c <__alt_data_end+0xfc001d8c>
 800205c:	00c00b44 	movi	r3,45
 8002060:	d8812b15 	stw	r2,1196(sp)
 8002064:	dc412d17 	ldw	r17,1204(sp)
 8002068:	d8c12785 	stb	r3,1182(sp)
 800206c:	dcc12d15 	stw	r19,1204(sp)
 8002070:	d8013215 	stw	zero,1224(sp)
 8002074:	00800b44 	movi	r2,45
 8002078:	003a5d06 	br	80009f0 <__alt_data_end+0xfc0009f0>
 800207c:	d8c12617 	ldw	r3,1176(sp)
 8002080:	00bfff44 	movi	r2,-3
 8002084:	18800d16 	blt	r3,r2,80020bc <___vfprintf_internal_r+0x1d2c>
 8002088:	48c00c16 	blt	r9,r3,80020bc <___vfprintf_internal_r+0x1d2c>
 800208c:	d8c13415 	stw	r3,1232(sp)
 8002090:	040019c4 	movi	r16,103
 8002094:	003eb506 	br	8001b6c <__alt_data_end+0xfc001b6c>
 8002098:	05400b44 	movi	r21,45
 800209c:	dd412785 	stb	r21,1182(sp)
 80020a0:	003a0f06 	br	80008e0 <__alt_data_end+0xfc0008e0>
 80020a4:	01020074 	movhi	r4,2049
 80020a8:	213ca684 	addi	r4,r4,-3430
 80020ac:	d9012c15 	stw	r4,1200(sp)
 80020b0:	003cb106 	br	8001378 <__alt_data_end+0xfc001378>
 80020b4:	5005883a 	mov	r2,r10
 80020b8:	003ea106 	br	8001b40 <__alt_data_end+0xfc001b40>
 80020bc:	843fff84 	addi	r16,r16,-2
 80020c0:	1f3fffc4 	addi	fp,r3,-1
 80020c4:	df012615 	stw	fp,1176(sp)
 80020c8:	dc0122c5 	stb	r16,1163(sp)
 80020cc:	e0009516 	blt	fp,zero,8002324 <___vfprintf_internal_r+0x1f94>
 80020d0:	00800ac4 	movi	r2,43
 80020d4:	d8812305 	stb	r2,1164(sp)
 80020d8:	00800244 	movi	r2,9
 80020dc:	1700690e 	bge	r2,fp,8002284 <___vfprintf_internal_r+0x1ef4>
 80020e0:	dd4122c4 	addi	r21,sp,1163
 80020e4:	dc012c15 	stw	r16,1200(sp)
 80020e8:	8825883a 	mov	r18,r17
 80020ec:	a821883a 	mov	r16,r21
 80020f0:	4023883a 	mov	r17,r8
 80020f4:	e009883a 	mov	r4,fp
 80020f8:	01400284 	movi	r5,10
 80020fc:	8009f500 	call	8009f50 <__modsi3>
 8002100:	10800c04 	addi	r2,r2,48
 8002104:	843fffc4 	addi	r16,r16,-1
 8002108:	e009883a 	mov	r4,fp
 800210c:	01400284 	movi	r5,10
 8002110:	80800005 	stb	r2,0(r16)
 8002114:	8009efc0 	call	8009efc <__divsi3>
 8002118:	1039883a 	mov	fp,r2
 800211c:	00800244 	movi	r2,9
 8002120:	173ff416 	blt	r2,fp,80020f4 <__alt_data_end+0xfc0020f4>
 8002124:	8811883a 	mov	r8,r17
 8002128:	e0800c04 	addi	r2,fp,48
 800212c:	9023883a 	mov	r17,r18
 8002130:	8025883a 	mov	r18,r16
 8002134:	913fffc4 	addi	r4,r18,-1
 8002138:	90bfffc5 	stb	r2,-1(r18)
 800213c:	dc012c17 	ldw	r16,1200(sp)
 8002140:	25408e2e 	bgeu	r4,r21,800237c <___vfprintf_internal_r+0x1fec>
 8002144:	d9412384 	addi	r5,sp,1166
 8002148:	2c8bc83a 	sub	r5,r5,r18
 800214c:	d8c12344 	addi	r3,sp,1165
 8002150:	a94b883a 	add	r5,r21,r5
 8002154:	00000106 	br	800215c <___vfprintf_internal_r+0x1dcc>
 8002158:	20800003 	ldbu	r2,0(r4)
 800215c:	18800005 	stb	r2,0(r3)
 8002160:	18c00044 	addi	r3,r3,1
 8002164:	21000044 	addi	r4,r4,1
 8002168:	197ffb1e 	bne	r3,r5,8002158 <__alt_data_end+0xfc002158>
 800216c:	d8812304 	addi	r2,sp,1164
 8002170:	1485c83a 	sub	r2,r2,r18
 8002174:	d8c12344 	addi	r3,sp,1165
 8002178:	1885883a 	add	r2,r3,r2
 800217c:	dac13317 	ldw	r11,1228(sp)
 8002180:	156bc83a 	sub	r21,r2,r21
 8002184:	dd413a15 	stw	r21,1256(sp)
 8002188:	00800044 	movi	r2,1
 800218c:	5d65883a 	add	r18,r11,r21
 8002190:	12c0770e 	bge	r2,r11,8002370 <___vfprintf_internal_r+0x1fe0>
 8002194:	94800044 	addi	r18,r18,1
 8002198:	9005883a 	mov	r2,r18
 800219c:	90007216 	blt	r18,zero,8002368 <___vfprintf_internal_r+0x1fd8>
 80021a0:	d8013415 	stw	zero,1232(sp)
 80021a4:	003e7906 	br	8001b8c <__alt_data_end+0xfc001b8c>
 80021a8:	da412b15 	stw	r9,1196(sp)
 80021ac:	dd412783 	ldbu	r21,1182(sp)
 80021b0:	4825883a 	mov	r18,r9
 80021b4:	dcc12d15 	stw	r19,1204(sp)
 80021b8:	d8013215 	stw	zero,1224(sp)
 80021bc:	d8013415 	stw	zero,1232(sp)
 80021c0:	003a0706 	br	80009e0 <__alt_data_end+0xfc0009e0>
 80021c4:	b009883a 	mov	r4,r22
 80021c8:	b80b883a 	mov	r5,r23
 80021cc:	d9811e04 	addi	r6,sp,1144
 80021d0:	8006ad00 	call	8006ad0 <__sprint_r>
 80021d4:	1039851e 	bne	r2,zero,80007ec <__alt_data_end+0xfc0007ec>
 80021d8:	dc012617 	ldw	r16,1176(sp)
 80021dc:	d8c12017 	ldw	r3,1152(sp)
 80021e0:	d8811f17 	ldw	r2,1148(sp)
 80021e4:	da000404 	addi	r8,sp,16
 80021e8:	003ec706 	br	8001d08 <__alt_data_end+0xfc001d08>
 80021ec:	483e1a1e 	bne	r9,zero,8001a58 <__alt_data_end+0xfc001a58>
 80021f0:	9013883a 	mov	r9,r18
 80021f4:	003e1806 	br	8001a58 <__alt_data_end+0xfc001a58>
 80021f8:	00c00b44 	movi	r3,45
 80021fc:	64a0003c 	xorhi	r18,r12,32768
 8002200:	d8c12b05 	stb	r3,1196(sp)
 8002204:	003e1a06 	br	8001a70 <__alt_data_end+0xfc001a70>
 8002208:	4f000044 	addi	fp,r9,1
 800220c:	003e1f06 	br	8001a8c <__alt_data_end+0xfc001a8c>
 8002210:	02400184 	movi	r9,6
 8002214:	003e1006 	br	8001a58 <__alt_data_end+0xfc001a58>
 8002218:	d8c13417 	ldw	r3,1232(sp)
 800221c:	00c04b0e 	bge	zero,r3,800234c <___vfprintf_internal_r+0x1fbc>
 8002220:	04800044 	movi	r18,1
 8002224:	dac13317 	ldw	r11,1228(sp)
 8002228:	92e5883a 	add	r18,r18,r11
 800222c:	9005883a 	mov	r2,r18
 8002230:	903e560e 	bge	r18,zero,8001b8c <__alt_data_end+0xfc001b8c>
 8002234:	0005883a 	mov	r2,zero
 8002238:	003e5406 	br	8001b8c <__alt_data_end+0xfc001b8c>
 800223c:	d8c12617 	ldw	r3,1176(sp)
 8002240:	d8c13415 	stw	r3,1232(sp)
 8002244:	00c03b0e 	bge	zero,r3,8002334 <___vfprintf_internal_r+0x1fa4>
 8002248:	4800081e 	bne	r9,zero,800226c <___vfprintf_internal_r+0x1edc>
 800224c:	8c40004c 	andi	r17,r17,1
 8002250:	8800061e 	bne	r17,zero,800226c <___vfprintf_internal_r+0x1edc>
 8002254:	1805883a 	mov	r2,r3
 8002258:	183e4b0e 	bge	r3,zero,8001b88 <__alt_data_end+0xfc001b88>
 800225c:	0005883a 	mov	r2,zero
 8002260:	003e4906 	br	8001b88 <__alt_data_end+0xfc001b88>
 8002264:	d8812117 	ldw	r2,1156(sp)
 8002268:	003e3506 	br	8001b40 <__alt_data_end+0xfc001b40>
 800226c:	dac13417 	ldw	r11,1232(sp)
 8002270:	4a400044 	addi	r9,r9,1
 8002274:	5a65883a 	add	r18,r11,r9
 8002278:	9005883a 	mov	r2,r18
 800227c:	903e430e 	bge	r18,zero,8001b8c <__alt_data_end+0xfc001b8c>
 8002280:	003fec06 	br	8002234 <__alt_data_end+0xfc002234>
 8002284:	00800c04 	movi	r2,48
 8002288:	e0c00c04 	addi	r3,fp,48
 800228c:	d8812345 	stb	r2,1165(sp)
 8002290:	d8c12385 	stb	r3,1166(sp)
 8002294:	d88123c4 	addi	r2,sp,1167
 8002298:	dd4122c4 	addi	r21,sp,1163
 800229c:	003fb706 	br	800217c <__alt_data_end+0xfc00217c>
 80022a0:	0005883a 	mov	r2,zero
 80022a4:	003f6006 	br	8002028 <__alt_data_end+0xfc002028>
 80022a8:	db013417 	ldw	r12,1232(sp)
 80022ac:	64800044 	addi	r18,r12,1
 80022b0:	9005883a 	mov	r2,r18
 80022b4:	903e350e 	bge	r18,zero,8001b8c <__alt_data_end+0xfc001b8c>
 80022b8:	003fde06 	br	8002234 <__alt_data_end+0xfc002234>
 80022bc:	d9013717 	ldw	r4,1244(sp)
 80022c0:	900b883a 	mov	r5,r18
 80022c4:	000d883a 	mov	r6,zero
 80022c8:	000f883a 	mov	r7,zero
 80022cc:	da013f15 	stw	r8,1276(sp)
 80022d0:	da413e15 	stw	r9,1272(sp)
 80022d4:	da813d15 	stw	r10,1268(sp)
 80022d8:	800b1240 	call	800b124 <__eqdf2>
 80022dc:	da013f17 	ldw	r8,1276(sp)
 80022e0:	da413e17 	ldw	r9,1272(sp)
 80022e4:	da813d17 	ldw	r10,1268(sp)
 80022e8:	103f1426 	beq	r2,zero,8001f3c <__alt_data_end+0xfc001f3c>
 80022ec:	00800044 	movi	r2,1
 80022f0:	1707c83a 	sub	r3,r2,fp
 80022f4:	d8c12615 	stw	r3,1176(sp)
 80022f8:	003f1106 	br	8001f40 <__alt_data_end+0xfc001f40>
 80022fc:	dac12d17 	ldw	r11,1204(sp)
 8002300:	5a400017 	ldw	r9,0(r11)
 8002304:	5ac00104 	addi	r11,r11,4
 8002308:	dac12d15 	stw	r11,1204(sp)
 800230c:	483ec60e 	bge	r9,zero,8001e28 <__alt_data_end+0xfc001e28>
 8002310:	027fffc4 	movi	r9,-1
 8002314:	1c000047 	ldb	r16,1(r3)
 8002318:	00388406 	br	800052c <__alt_data_end+0xfc00052c>
 800231c:	043fffc4 	movi	r16,-1
 8002320:	00391006 	br	8000764 <__alt_data_end+0xfc000764>
 8002324:	00800b44 	movi	r2,45
 8002328:	0739c83a 	sub	fp,zero,fp
 800232c:	d8812305 	stb	r2,1164(sp)
 8002330:	003f6906 	br	80020d8 <__alt_data_end+0xfc0020d8>
 8002334:	4800081e 	bne	r9,zero,8002358 <___vfprintf_internal_r+0x1fc8>
 8002338:	8c40004c 	andi	r17,r17,1
 800233c:	8800061e 	bne	r17,zero,8002358 <___vfprintf_internal_r+0x1fc8>
 8002340:	00800044 	movi	r2,1
 8002344:	1025883a 	mov	r18,r2
 8002348:	003e1006 	br	8001b8c <__alt_data_end+0xfc001b8c>
 800234c:	04800084 	movi	r18,2
 8002350:	90e5c83a 	sub	r18,r18,r3
 8002354:	003fb306 	br	8002224 <__alt_data_end+0xfc002224>
 8002358:	4c800084 	addi	r18,r9,2
 800235c:	9005883a 	mov	r2,r18
 8002360:	903e0a0e 	bge	r18,zero,8001b8c <__alt_data_end+0xfc001b8c>
 8002364:	003fb306 	br	8002234 <__alt_data_end+0xfc002234>
 8002368:	0005883a 	mov	r2,zero
 800236c:	003f8c06 	br	80021a0 <__alt_data_end+0xfc0021a0>
 8002370:	88a2703a 	and	r17,r17,r2
 8002374:	883f8826 	beq	r17,zero,8002198 <__alt_data_end+0xfc002198>
 8002378:	003f8606 	br	8002194 <__alt_data_end+0xfc002194>
 800237c:	d8812344 	addi	r2,sp,1165
 8002380:	003f7e06 	br	800217c <__alt_data_end+0xfc00217c>
 8002384:	d8c12617 	ldw	r3,1176(sp)
 8002388:	003f4d06 	br	80020c0 <__alt_data_end+0xfc0020c0>

0800238c <__vfprintf_internal>:
 800238c:	2007883a 	mov	r3,r4
 8002390:	01020074 	movhi	r4,2049
 8002394:	21041204 	addi	r4,r4,4168
 8002398:	21000017 	ldw	r4,0(r4)
 800239c:	2805883a 	mov	r2,r5
 80023a0:	300f883a 	mov	r7,r6
 80023a4:	180b883a 	mov	r5,r3
 80023a8:	100d883a 	mov	r6,r2
 80023ac:	80003901 	jmpi	8000390 <___vfprintf_internal_r>

080023b0 <__swsetup_r>:
 80023b0:	00820074 	movhi	r2,2049
 80023b4:	defffd04 	addi	sp,sp,-12
 80023b8:	10841204 	addi	r2,r2,4168
 80023bc:	dc400115 	stw	r17,4(sp)
 80023c0:	2023883a 	mov	r17,r4
 80023c4:	11000017 	ldw	r4,0(r2)
 80023c8:	dc000015 	stw	r16,0(sp)
 80023cc:	dfc00215 	stw	ra,8(sp)
 80023d0:	2821883a 	mov	r16,r5
 80023d4:	20000226 	beq	r4,zero,80023e0 <__swsetup_r+0x30>
 80023d8:	20c00e17 	ldw	r3,56(r4)
 80023dc:	18002e26 	beq	r3,zero,8002498 <__swsetup_r+0xe8>
 80023e0:	8080030b 	ldhu	r2,12(r16)
 80023e4:	10c0020c 	andi	r3,r2,8
 80023e8:	100d883a 	mov	r6,r2
 80023ec:	18000f26 	beq	r3,zero,800242c <__swsetup_r+0x7c>
 80023f0:	80c00417 	ldw	r3,16(r16)
 80023f4:	18001526 	beq	r3,zero,800244c <__swsetup_r+0x9c>
 80023f8:	1100004c 	andi	r4,r2,1
 80023fc:	20001c1e 	bne	r4,zero,8002470 <__swsetup_r+0xc0>
 8002400:	1080008c 	andi	r2,r2,2
 8002404:	1000261e 	bne	r2,zero,80024a0 <__swsetup_r+0xf0>
 8002408:	80800517 	ldw	r2,20(r16)
 800240c:	80800215 	stw	r2,8(r16)
 8002410:	18001c26 	beq	r3,zero,8002484 <__swsetup_r+0xd4>
 8002414:	0005883a 	mov	r2,zero
 8002418:	dfc00217 	ldw	ra,8(sp)
 800241c:	dc400117 	ldw	r17,4(sp)
 8002420:	dc000017 	ldw	r16,0(sp)
 8002424:	dec00304 	addi	sp,sp,12
 8002428:	f800283a 	ret
 800242c:	3080040c 	andi	r2,r6,16
 8002430:	10001726 	beq	r2,zero,8002490 <__swsetup_r+0xe0>
 8002434:	3080010c 	andi	r2,r6,4
 8002438:	10001b1e 	bne	r2,zero,80024a8 <__swsetup_r+0xf8>
 800243c:	80c00417 	ldw	r3,16(r16)
 8002440:	30800214 	ori	r2,r6,8
 8002444:	8080030d 	sth	r2,12(r16)
 8002448:	183feb1e 	bne	r3,zero,80023f8 <__alt_data_end+0xfc0023f8>
 800244c:	1140a00c 	andi	r5,r2,640
 8002450:	01008004 	movi	r4,512
 8002454:	293fe826 	beq	r5,r4,80023f8 <__alt_data_end+0xfc0023f8>
 8002458:	8809883a 	mov	r4,r17
 800245c:	800b883a 	mov	r5,r16
 8002460:	8004a640 	call	8004a64 <__smakebuf_r>
 8002464:	8080030b 	ldhu	r2,12(r16)
 8002468:	80c00417 	ldw	r3,16(r16)
 800246c:	003fe206 	br	80023f8 <__alt_data_end+0xfc0023f8>
 8002470:	80800517 	ldw	r2,20(r16)
 8002474:	80000215 	stw	zero,8(r16)
 8002478:	0085c83a 	sub	r2,zero,r2
 800247c:	80800615 	stw	r2,24(r16)
 8002480:	183fe41e 	bne	r3,zero,8002414 <__alt_data_end+0xfc002414>
 8002484:	8080030b 	ldhu	r2,12(r16)
 8002488:	1080200c 	andi	r2,r2,128
 800248c:	103fe226 	beq	r2,zero,8002418 <__alt_data_end+0xfc002418>
 8002490:	00bfffc4 	movi	r2,-1
 8002494:	003fe006 	br	8002418 <__alt_data_end+0xfc002418>
 8002498:	80043b00 	call	80043b0 <__sinit>
 800249c:	003fd006 	br	80023e0 <__alt_data_end+0xfc0023e0>
 80024a0:	0005883a 	mov	r2,zero
 80024a4:	003fd906 	br	800240c <__alt_data_end+0xfc00240c>
 80024a8:	81400c17 	ldw	r5,48(r16)
 80024ac:	28000626 	beq	r5,zero,80024c8 <__swsetup_r+0x118>
 80024b0:	80801004 	addi	r2,r16,64
 80024b4:	28800326 	beq	r5,r2,80024c4 <__swsetup_r+0x114>
 80024b8:	8809883a 	mov	r4,r17
 80024bc:	80045240 	call	8004524 <_free_r>
 80024c0:	8180030b 	ldhu	r6,12(r16)
 80024c4:	80000c15 	stw	zero,48(r16)
 80024c8:	80c00417 	ldw	r3,16(r16)
 80024cc:	00bff6c4 	movi	r2,-37
 80024d0:	118c703a 	and	r6,r2,r6
 80024d4:	80000115 	stw	zero,4(r16)
 80024d8:	80c00015 	stw	r3,0(r16)
 80024dc:	003fd806 	br	8002440 <__alt_data_end+0xfc002440>

080024e0 <quorem>:
 80024e0:	defff704 	addi	sp,sp,-36
 80024e4:	dc800215 	stw	r18,8(sp)
 80024e8:	20800417 	ldw	r2,16(r4)
 80024ec:	2c800417 	ldw	r18,16(r5)
 80024f0:	dfc00815 	stw	ra,32(sp)
 80024f4:	ddc00715 	stw	r23,28(sp)
 80024f8:	dd800615 	stw	r22,24(sp)
 80024fc:	dd400515 	stw	r21,20(sp)
 8002500:	dd000415 	stw	r20,16(sp)
 8002504:	dcc00315 	stw	r19,12(sp)
 8002508:	dc400115 	stw	r17,4(sp)
 800250c:	dc000015 	stw	r16,0(sp)
 8002510:	14807116 	blt	r2,r18,80026d8 <quorem+0x1f8>
 8002514:	94bfffc4 	addi	r18,r18,-1
 8002518:	94ad883a 	add	r22,r18,r18
 800251c:	b5ad883a 	add	r22,r22,r22
 8002520:	2c400504 	addi	r17,r5,20
 8002524:	8da9883a 	add	r20,r17,r22
 8002528:	25400504 	addi	r21,r4,20
 800252c:	282f883a 	mov	r23,r5
 8002530:	adad883a 	add	r22,r21,r22
 8002534:	a1400017 	ldw	r5,0(r20)
 8002538:	2021883a 	mov	r16,r4
 800253c:	b1000017 	ldw	r4,0(r22)
 8002540:	29400044 	addi	r5,r5,1
 8002544:	8009fac0 	call	8009fac <__udivsi3>
 8002548:	1027883a 	mov	r19,r2
 800254c:	10002c26 	beq	r2,zero,8002600 <quorem+0x120>
 8002550:	a813883a 	mov	r9,r21
 8002554:	8811883a 	mov	r8,r17
 8002558:	0009883a 	mov	r4,zero
 800255c:	000d883a 	mov	r6,zero
 8002560:	41c00017 	ldw	r7,0(r8)
 8002564:	49400017 	ldw	r5,0(r9)
 8002568:	42000104 	addi	r8,r8,4
 800256c:	38bfffcc 	andi	r2,r7,65535
 8002570:	14c5383a 	mul	r2,r2,r19
 8002574:	380ed43a 	srli	r7,r7,16
 8002578:	28ffffcc 	andi	r3,r5,65535
 800257c:	2085883a 	add	r2,r4,r2
 8002580:	1008d43a 	srli	r4,r2,16
 8002584:	3ccf383a 	mul	r7,r7,r19
 8002588:	198d883a 	add	r6,r3,r6
 800258c:	10ffffcc 	andi	r3,r2,65535
 8002590:	30c7c83a 	sub	r3,r6,r3
 8002594:	280ad43a 	srli	r5,r5,16
 8002598:	21c9883a 	add	r4,r4,r7
 800259c:	180dd43a 	srai	r6,r3,16
 80025a0:	20bfffcc 	andi	r2,r4,65535
 80025a4:	288bc83a 	sub	r5,r5,r2
 80025a8:	298b883a 	add	r5,r5,r6
 80025ac:	280e943a 	slli	r7,r5,16
 80025b0:	18ffffcc 	andi	r3,r3,65535
 80025b4:	2008d43a 	srli	r4,r4,16
 80025b8:	38ceb03a 	or	r7,r7,r3
 80025bc:	49c00015 	stw	r7,0(r9)
 80025c0:	280dd43a 	srai	r6,r5,16
 80025c4:	4a400104 	addi	r9,r9,4
 80025c8:	a23fe52e 	bgeu	r20,r8,8002560 <__alt_data_end+0xfc002560>
 80025cc:	b0800017 	ldw	r2,0(r22)
 80025d0:	10000b1e 	bne	r2,zero,8002600 <quorem+0x120>
 80025d4:	b0bfff04 	addi	r2,r22,-4
 80025d8:	a880082e 	bgeu	r21,r2,80025fc <quorem+0x11c>
 80025dc:	b0ffff17 	ldw	r3,-4(r22)
 80025e0:	18000326 	beq	r3,zero,80025f0 <quorem+0x110>
 80025e4:	00000506 	br	80025fc <quorem+0x11c>
 80025e8:	10c00017 	ldw	r3,0(r2)
 80025ec:	1800031e 	bne	r3,zero,80025fc <quorem+0x11c>
 80025f0:	10bfff04 	addi	r2,r2,-4
 80025f4:	94bfffc4 	addi	r18,r18,-1
 80025f8:	a8bffb36 	bltu	r21,r2,80025e8 <__alt_data_end+0xfc0025e8>
 80025fc:	84800415 	stw	r18,16(r16)
 8002600:	8009883a 	mov	r4,r16
 8002604:	b80b883a 	mov	r5,r23
 8002608:	8005fc80 	call	8005fc8 <__mcmp>
 800260c:	10002616 	blt	r2,zero,80026a8 <quorem+0x1c8>
 8002610:	9cc00044 	addi	r19,r19,1
 8002614:	a80d883a 	mov	r6,r21
 8002618:	000b883a 	mov	r5,zero
 800261c:	31000017 	ldw	r4,0(r6)
 8002620:	88800017 	ldw	r2,0(r17)
 8002624:	31800104 	addi	r6,r6,4
 8002628:	20ffffcc 	andi	r3,r4,65535
 800262c:	194b883a 	add	r5,r3,r5
 8002630:	10ffffcc 	andi	r3,r2,65535
 8002634:	28c7c83a 	sub	r3,r5,r3
 8002638:	1004d43a 	srli	r2,r2,16
 800263c:	2008d43a 	srli	r4,r4,16
 8002640:	180bd43a 	srai	r5,r3,16
 8002644:	18ffffcc 	andi	r3,r3,65535
 8002648:	2089c83a 	sub	r4,r4,r2
 800264c:	2149883a 	add	r4,r4,r5
 8002650:	2004943a 	slli	r2,r4,16
 8002654:	8c400104 	addi	r17,r17,4
 8002658:	200bd43a 	srai	r5,r4,16
 800265c:	10c6b03a 	or	r3,r2,r3
 8002660:	30ffff15 	stw	r3,-4(r6)
 8002664:	a47fed2e 	bgeu	r20,r17,800261c <__alt_data_end+0xfc00261c>
 8002668:	9485883a 	add	r2,r18,r18
 800266c:	1085883a 	add	r2,r2,r2
 8002670:	a887883a 	add	r3,r21,r2
 8002674:	18800017 	ldw	r2,0(r3)
 8002678:	10000b1e 	bne	r2,zero,80026a8 <quorem+0x1c8>
 800267c:	18bfff04 	addi	r2,r3,-4
 8002680:	a880082e 	bgeu	r21,r2,80026a4 <quorem+0x1c4>
 8002684:	18ffff17 	ldw	r3,-4(r3)
 8002688:	18000326 	beq	r3,zero,8002698 <quorem+0x1b8>
 800268c:	00000506 	br	80026a4 <quorem+0x1c4>
 8002690:	10c00017 	ldw	r3,0(r2)
 8002694:	1800031e 	bne	r3,zero,80026a4 <quorem+0x1c4>
 8002698:	10bfff04 	addi	r2,r2,-4
 800269c:	94bfffc4 	addi	r18,r18,-1
 80026a0:	a8bffb36 	bltu	r21,r2,8002690 <__alt_data_end+0xfc002690>
 80026a4:	84800415 	stw	r18,16(r16)
 80026a8:	9805883a 	mov	r2,r19
 80026ac:	dfc00817 	ldw	ra,32(sp)
 80026b0:	ddc00717 	ldw	r23,28(sp)
 80026b4:	dd800617 	ldw	r22,24(sp)
 80026b8:	dd400517 	ldw	r21,20(sp)
 80026bc:	dd000417 	ldw	r20,16(sp)
 80026c0:	dcc00317 	ldw	r19,12(sp)
 80026c4:	dc800217 	ldw	r18,8(sp)
 80026c8:	dc400117 	ldw	r17,4(sp)
 80026cc:	dc000017 	ldw	r16,0(sp)
 80026d0:	dec00904 	addi	sp,sp,36
 80026d4:	f800283a 	ret
 80026d8:	0005883a 	mov	r2,zero
 80026dc:	003ff306 	br	80026ac <__alt_data_end+0xfc0026ac>

080026e0 <_dtoa_r>:
 80026e0:	20801017 	ldw	r2,64(r4)
 80026e4:	deffde04 	addi	sp,sp,-136
 80026e8:	dd401d15 	stw	r21,116(sp)
 80026ec:	dcc01b15 	stw	r19,108(sp)
 80026f0:	dc801a15 	stw	r18,104(sp)
 80026f4:	dc401915 	stw	r17,100(sp)
 80026f8:	dc001815 	stw	r16,96(sp)
 80026fc:	dfc02115 	stw	ra,132(sp)
 8002700:	df002015 	stw	fp,128(sp)
 8002704:	ddc01f15 	stw	r23,124(sp)
 8002708:	dd801e15 	stw	r22,120(sp)
 800270c:	dd001c15 	stw	r20,112(sp)
 8002710:	d9c00315 	stw	r7,12(sp)
 8002714:	2021883a 	mov	r16,r4
 8002718:	302b883a 	mov	r21,r6
 800271c:	2825883a 	mov	r18,r5
 8002720:	dc402417 	ldw	r17,144(sp)
 8002724:	3027883a 	mov	r19,r6
 8002728:	10000826 	beq	r2,zero,800274c <_dtoa_r+0x6c>
 800272c:	21801117 	ldw	r6,68(r4)
 8002730:	00c00044 	movi	r3,1
 8002734:	100b883a 	mov	r5,r2
 8002738:	1986983a 	sll	r3,r3,r6
 800273c:	11800115 	stw	r6,4(r2)
 8002740:	10c00215 	stw	r3,8(r2)
 8002744:	80057b00 	call	80057b0 <_Bfree>
 8002748:	80001015 	stw	zero,64(r16)
 800274c:	a8002d16 	blt	r21,zero,8002804 <_dtoa_r+0x124>
 8002750:	88000015 	stw	zero,0(r17)
 8002754:	a8dffc2c 	andhi	r3,r21,32752
 8002758:	009ffc34 	movhi	r2,32752
 800275c:	18801b26 	beq	r3,r2,80027cc <_dtoa_r+0xec>
 8002760:	9009883a 	mov	r4,r18
 8002764:	980b883a 	mov	r5,r19
 8002768:	000d883a 	mov	r6,zero
 800276c:	000f883a 	mov	r7,zero
 8002770:	800b1240 	call	800b124 <__eqdf2>
 8002774:	10002a1e 	bne	r2,zero,8002820 <_dtoa_r+0x140>
 8002778:	d8c02317 	ldw	r3,140(sp)
 800277c:	d9002517 	ldw	r4,148(sp)
 8002780:	00800044 	movi	r2,1
 8002784:	18800015 	stw	r2,0(r3)
 8002788:	2001a226 	beq	r4,zero,8002e14 <_dtoa_r+0x734>
 800278c:	00820074 	movhi	r2,2049
 8002790:	10bca644 	addi	r2,r2,-3431
 8002794:	20800015 	stw	r2,0(r4)
 8002798:	10bfffc4 	addi	r2,r2,-1
 800279c:	dfc02117 	ldw	ra,132(sp)
 80027a0:	df002017 	ldw	fp,128(sp)
 80027a4:	ddc01f17 	ldw	r23,124(sp)
 80027a8:	dd801e17 	ldw	r22,120(sp)
 80027ac:	dd401d17 	ldw	r21,116(sp)
 80027b0:	dd001c17 	ldw	r20,112(sp)
 80027b4:	dcc01b17 	ldw	r19,108(sp)
 80027b8:	dc801a17 	ldw	r18,104(sp)
 80027bc:	dc401917 	ldw	r17,100(sp)
 80027c0:	dc001817 	ldw	r16,96(sp)
 80027c4:	dec02204 	addi	sp,sp,136
 80027c8:	f800283a 	ret
 80027cc:	d8c02317 	ldw	r3,140(sp)
 80027d0:	0089c3c4 	movi	r2,9999
 80027d4:	18800015 	stw	r2,0(r3)
 80027d8:	90017c26 	beq	r18,zero,8002dcc <_dtoa_r+0x6ec>
 80027dc:	00820074 	movhi	r2,2049
 80027e0:	10bcb204 	addi	r2,r2,-3384
 80027e4:	d9002517 	ldw	r4,148(sp)
 80027e8:	203fec26 	beq	r4,zero,800279c <__alt_data_end+0xfc00279c>
 80027ec:	10c000c7 	ldb	r3,3(r2)
 80027f0:	18017d1e 	bne	r3,zero,8002de8 <_dtoa_r+0x708>
 80027f4:	10c000c4 	addi	r3,r2,3
 80027f8:	d9802517 	ldw	r6,148(sp)
 80027fc:	30c00015 	stw	r3,0(r6)
 8002800:	003fe606 	br	800279c <__alt_data_end+0xfc00279c>
 8002804:	04e00034 	movhi	r19,32768
 8002808:	9cffffc4 	addi	r19,r19,-1
 800280c:	00800044 	movi	r2,1
 8002810:	ace6703a 	and	r19,r21,r19
 8002814:	88800015 	stw	r2,0(r17)
 8002818:	982b883a 	mov	r21,r19
 800281c:	003fcd06 	br	8002754 <__alt_data_end+0xfc002754>
 8002820:	d8800204 	addi	r2,sp,8
 8002824:	a822d53a 	srli	r17,r21,20
 8002828:	d8800015 	stw	r2,0(sp)
 800282c:	8009883a 	mov	r4,r16
 8002830:	900b883a 	mov	r5,r18
 8002834:	980d883a 	mov	r6,r19
 8002838:	d9c00104 	addi	r7,sp,4
 800283c:	800633c0 	call	800633c <__d2b>
 8002840:	1039883a 	mov	fp,r2
 8002844:	88016a1e 	bne	r17,zero,8002df0 <_dtoa_r+0x710>
 8002848:	dd000217 	ldw	r20,8(sp)
 800284c:	dc400117 	ldw	r17,4(sp)
 8002850:	00befbc4 	movi	r2,-1041
 8002854:	a463883a 	add	r17,r20,r17
 8002858:	8882ea16 	blt	r17,r2,8003404 <_dtoa_r+0xd24>
 800285c:	00bf0384 	movi	r2,-1010
 8002860:	1445c83a 	sub	r2,r2,r17
 8002864:	89010484 	addi	r4,r17,1042
 8002868:	a8aa983a 	sll	r21,r21,r2
 800286c:	9108d83a 	srl	r4,r18,r4
 8002870:	a908b03a 	or	r4,r21,r4
 8002874:	800c4b40 	call	800c4b4 <__floatunsidf>
 8002878:	017f8434 	movhi	r5,65040
 800287c:	01800044 	movi	r6,1
 8002880:	1009883a 	mov	r4,r2
 8002884:	194b883a 	add	r5,r3,r5
 8002888:	8c7fffc4 	addi	r17,r17,-1
 800288c:	d9800f15 	stw	r6,60(sp)
 8002890:	000d883a 	mov	r6,zero
 8002894:	01cffe34 	movhi	r7,16376
 8002898:	800ba8c0 	call	800ba8c <__subdf3>
 800289c:	0198dbf4 	movhi	r6,25455
 80028a0:	01cff4f4 	movhi	r7,16339
 80028a4:	1009883a 	mov	r4,r2
 80028a8:	180b883a 	mov	r5,r3
 80028ac:	3190d844 	addi	r6,r6,17249
 80028b0:	39e1e9c4 	addi	r7,r7,-30809
 80028b4:	800b3680 	call	800b368 <__muldf3>
 80028b8:	01a2d874 	movhi	r6,35681
 80028bc:	01cff1f4 	movhi	r7,16327
 80028c0:	180b883a 	mov	r5,r3
 80028c4:	31b22cc4 	addi	r6,r6,-14157
 80028c8:	39e28a04 	addi	r7,r7,-30168
 80028cc:	1009883a 	mov	r4,r2
 80028d0:	8009fbc0 	call	8009fbc <__adddf3>
 80028d4:	8809883a 	mov	r4,r17
 80028d8:	102d883a 	mov	r22,r2
 80028dc:	182b883a 	mov	r21,r3
 80028e0:	800c3e40 	call	800c3e4 <__floatsidf>
 80028e4:	019427f4 	movhi	r6,20639
 80028e8:	01cff4f4 	movhi	r7,16339
 80028ec:	1009883a 	mov	r4,r2
 80028f0:	180b883a 	mov	r5,r3
 80028f4:	319e7ec4 	addi	r6,r6,31227
 80028f8:	39d104c4 	addi	r7,r7,17427
 80028fc:	800b3680 	call	800b368 <__muldf3>
 8002900:	b009883a 	mov	r4,r22
 8002904:	a80b883a 	mov	r5,r21
 8002908:	100d883a 	mov	r6,r2
 800290c:	180f883a 	mov	r7,r3
 8002910:	8009fbc0 	call	8009fbc <__adddf3>
 8002914:	1009883a 	mov	r4,r2
 8002918:	180b883a 	mov	r5,r3
 800291c:	102d883a 	mov	r22,r2
 8002920:	182b883a 	mov	r21,r3
 8002924:	800c35c0 	call	800c35c <__fixdfsi>
 8002928:	b009883a 	mov	r4,r22
 800292c:	a80b883a 	mov	r5,r21
 8002930:	000d883a 	mov	r6,zero
 8002934:	000f883a 	mov	r7,zero
 8002938:	d8800515 	stw	r2,20(sp)
 800293c:	800b2880 	call	800b288 <__ledf2>
 8002940:	10023116 	blt	r2,zero,8003208 <_dtoa_r+0xb28>
 8002944:	d8c00517 	ldw	r3,20(sp)
 8002948:	00800584 	movi	r2,22
 800294c:	10c21f36 	bltu	r2,r3,80031cc <_dtoa_r+0xaec>
 8002950:	180490fa 	slli	r2,r3,3
 8002954:	00c20074 	movhi	r3,2049
 8002958:	18fcce04 	addi	r3,r3,-3272
 800295c:	1885883a 	add	r2,r3,r2
 8002960:	11000017 	ldw	r4,0(r2)
 8002964:	11400117 	ldw	r5,4(r2)
 8002968:	900d883a 	mov	r6,r18
 800296c:	980f883a 	mov	r7,r19
 8002970:	800b1a80 	call	800b1a8 <__gedf2>
 8002974:	0082a70e 	bge	zero,r2,8003414 <_dtoa_r+0xd34>
 8002978:	d9000517 	ldw	r4,20(sp)
 800297c:	d8000c15 	stw	zero,48(sp)
 8002980:	213fffc4 	addi	r4,r4,-1
 8002984:	d9000515 	stw	r4,20(sp)
 8002988:	a463c83a 	sub	r17,r20,r17
 800298c:	8dbfffc4 	addi	r22,r17,-1
 8002990:	b0021916 	blt	r22,zero,80031f8 <_dtoa_r+0xb18>
 8002994:	d8000815 	stw	zero,32(sp)
 8002998:	d8800517 	ldw	r2,20(sp)
 800299c:	10020e16 	blt	r2,zero,80031d8 <_dtoa_r+0xaf8>
 80029a0:	b0ad883a 	add	r22,r22,r2
 80029a4:	d8800a15 	stw	r2,40(sp)
 80029a8:	d8000915 	stw	zero,36(sp)
 80029ac:	d8c00317 	ldw	r3,12(sp)
 80029b0:	00800244 	movi	r2,9
 80029b4:	10c11a36 	bltu	r2,r3,8002e20 <_dtoa_r+0x740>
 80029b8:	00800144 	movi	r2,5
 80029bc:	10c4fc0e 	bge	r2,r3,8003db0 <_dtoa_r+0x16d0>
 80029c0:	18ffff04 	addi	r3,r3,-4
 80029c4:	d8c00315 	stw	r3,12(sp)
 80029c8:	0029883a 	mov	r20,zero
 80029cc:	d9800317 	ldw	r6,12(sp)
 80029d0:	008000c4 	movi	r2,3
 80029d4:	3083bd26 	beq	r6,r2,80038cc <_dtoa_r+0x11ec>
 80029d8:	1183670e 	bge	r2,r6,8003778 <_dtoa_r+0x1098>
 80029dc:	d8c00317 	ldw	r3,12(sp)
 80029e0:	00800104 	movi	r2,4
 80029e4:	1882e726 	beq	r3,r2,8003584 <_dtoa_r+0xea4>
 80029e8:	00800144 	movi	r2,5
 80029ec:	1884f21e 	bne	r3,r2,8003db8 <_dtoa_r+0x16d8>
 80029f0:	00800044 	movi	r2,1
 80029f4:	d8800b15 	stw	r2,44(sp)
 80029f8:	d8c02217 	ldw	r3,136(sp)
 80029fc:	d9000517 	ldw	r4,20(sp)
 8002a00:	1907883a 	add	r3,r3,r4
 8002a04:	19800044 	addi	r6,r3,1
 8002a08:	d8c00d15 	stw	r3,52(sp)
 8002a0c:	d9800615 	stw	r6,24(sp)
 8002a10:	0183c30e 	bge	zero,r6,8003920 <_dtoa_r+0x1240>
 8002a14:	d9800617 	ldw	r6,24(sp)
 8002a18:	3023883a 	mov	r17,r6
 8002a1c:	80001115 	stw	zero,68(r16)
 8002a20:	008005c4 	movi	r2,23
 8002a24:	1184f62e 	bgeu	r2,r6,8003e00 <_dtoa_r+0x1720>
 8002a28:	00c00044 	movi	r3,1
 8002a2c:	00800104 	movi	r2,4
 8002a30:	1085883a 	add	r2,r2,r2
 8002a34:	11000504 	addi	r4,r2,20
 8002a38:	180b883a 	mov	r5,r3
 8002a3c:	18c00044 	addi	r3,r3,1
 8002a40:	313ffb2e 	bgeu	r6,r4,8002a30 <__alt_data_end+0xfc002a30>
 8002a44:	81401115 	stw	r5,68(r16)
 8002a48:	8009883a 	mov	r4,r16
 8002a4c:	80057080 	call	8005708 <_Balloc>
 8002a50:	d8800715 	stw	r2,28(sp)
 8002a54:	80801015 	stw	r2,64(r16)
 8002a58:	00800384 	movi	r2,14
 8002a5c:	1440fd36 	bltu	r2,r17,8002e54 <_dtoa_r+0x774>
 8002a60:	a000fc26 	beq	r20,zero,8002e54 <_dtoa_r+0x774>
 8002a64:	d8800517 	ldw	r2,20(sp)
 8002a68:	0083b90e 	bge	zero,r2,8003950 <_dtoa_r+0x1270>
 8002a6c:	d8c00517 	ldw	r3,20(sp)
 8002a70:	108003cc 	andi	r2,r2,15
 8002a74:	100490fa 	slli	r2,r2,3
 8002a78:	182fd13a 	srai	r23,r3,4
 8002a7c:	00c20074 	movhi	r3,2049
 8002a80:	18fcce04 	addi	r3,r3,-3272
 8002a84:	1885883a 	add	r2,r3,r2
 8002a88:	b8c0040c 	andi	r3,r23,16
 8002a8c:	12c00017 	ldw	r11,0(r2)
 8002a90:	12800117 	ldw	r10,4(r2)
 8002a94:	18039726 	beq	r3,zero,80038f4 <_dtoa_r+0x1214>
 8002a98:	00820074 	movhi	r2,2049
 8002a9c:	10bcc404 	addi	r2,r2,-3312
 8002aa0:	11800817 	ldw	r6,32(r2)
 8002aa4:	11c00917 	ldw	r7,36(r2)
 8002aa8:	9009883a 	mov	r4,r18
 8002aac:	980b883a 	mov	r5,r19
 8002ab0:	da801615 	stw	r10,88(sp)
 8002ab4:	dac01515 	stw	r11,84(sp)
 8002ab8:	800a8580 	call	800a858 <__divdf3>
 8002abc:	da801617 	ldw	r10,88(sp)
 8002ac0:	dac01517 	ldw	r11,84(sp)
 8002ac4:	bdc003cc 	andi	r23,r23,15
 8002ac8:	044000c4 	movi	r17,3
 8002acc:	d8800e15 	stw	r2,56(sp)
 8002ad0:	182b883a 	mov	r21,r3
 8002ad4:	b8001126 	beq	r23,zero,8002b1c <_dtoa_r+0x43c>
 8002ad8:	05020074 	movhi	r20,2049
 8002adc:	a53cc404 	addi	r20,r20,-3312
 8002ae0:	5805883a 	mov	r2,r11
 8002ae4:	5007883a 	mov	r3,r10
 8002ae8:	b980004c 	andi	r6,r23,1
 8002aec:	1009883a 	mov	r4,r2
 8002af0:	b82fd07a 	srai	r23,r23,1
 8002af4:	180b883a 	mov	r5,r3
 8002af8:	30000426 	beq	r6,zero,8002b0c <_dtoa_r+0x42c>
 8002afc:	a1800017 	ldw	r6,0(r20)
 8002b00:	a1c00117 	ldw	r7,4(r20)
 8002b04:	8c400044 	addi	r17,r17,1
 8002b08:	800b3680 	call	800b368 <__muldf3>
 8002b0c:	a5000204 	addi	r20,r20,8
 8002b10:	b83ff51e 	bne	r23,zero,8002ae8 <__alt_data_end+0xfc002ae8>
 8002b14:	1017883a 	mov	r11,r2
 8002b18:	1815883a 	mov	r10,r3
 8002b1c:	d9000e17 	ldw	r4,56(sp)
 8002b20:	a80b883a 	mov	r5,r21
 8002b24:	580d883a 	mov	r6,r11
 8002b28:	500f883a 	mov	r7,r10
 8002b2c:	800a8580 	call	800a858 <__divdf3>
 8002b30:	1029883a 	mov	r20,r2
 8002b34:	182b883a 	mov	r21,r3
 8002b38:	d9800c17 	ldw	r6,48(sp)
 8002b3c:	30000626 	beq	r6,zero,8002b58 <_dtoa_r+0x478>
 8002b40:	a009883a 	mov	r4,r20
 8002b44:	a80b883a 	mov	r5,r21
 8002b48:	000d883a 	mov	r6,zero
 8002b4c:	01cffc34 	movhi	r7,16368
 8002b50:	800b2880 	call	800b288 <__ledf2>
 8002b54:	10043216 	blt	r2,zero,8003c20 <_dtoa_r+0x1540>
 8002b58:	8809883a 	mov	r4,r17
 8002b5c:	800c3e40 	call	800c3e4 <__floatsidf>
 8002b60:	1009883a 	mov	r4,r2
 8002b64:	180b883a 	mov	r5,r3
 8002b68:	a00d883a 	mov	r6,r20
 8002b6c:	a80f883a 	mov	r7,r21
 8002b70:	800b3680 	call	800b368 <__muldf3>
 8002b74:	000d883a 	mov	r6,zero
 8002b78:	1009883a 	mov	r4,r2
 8002b7c:	180b883a 	mov	r5,r3
 8002b80:	01d00734 	movhi	r7,16412
 8002b84:	8009fbc0 	call	8009fbc <__adddf3>
 8002b88:	1023883a 	mov	r17,r2
 8002b8c:	d9800617 	ldw	r6,24(sp)
 8002b90:	00bf3034 	movhi	r2,64704
 8002b94:	1885883a 	add	r2,r3,r2
 8002b98:	d8800e15 	stw	r2,56(sp)
 8002b9c:	30032e26 	beq	r6,zero,8003858 <_dtoa_r+0x1178>
 8002ba0:	d8c00517 	ldw	r3,20(sp)
 8002ba4:	da800617 	ldw	r10,24(sp)
 8002ba8:	d8c01215 	stw	r3,72(sp)
 8002bac:	d9000b17 	ldw	r4,44(sp)
 8002bb0:	2003b026 	beq	r4,zero,8003a74 <_dtoa_r+0x1394>
 8002bb4:	50bfffc4 	addi	r2,r10,-1
 8002bb8:	100490fa 	slli	r2,r2,3
 8002bbc:	00c20074 	movhi	r3,2049
 8002bc0:	18fcce04 	addi	r3,r3,-3272
 8002bc4:	1885883a 	add	r2,r3,r2
 8002bc8:	11800017 	ldw	r6,0(r2)
 8002bcc:	11c00117 	ldw	r7,4(r2)
 8002bd0:	d8800717 	ldw	r2,28(sp)
 8002bd4:	0009883a 	mov	r4,zero
 8002bd8:	014ff834 	movhi	r5,16352
 8002bdc:	da801615 	stw	r10,88(sp)
 8002be0:	15c00044 	addi	r23,r2,1
 8002be4:	800a8580 	call	800a858 <__divdf3>
 8002be8:	d9c00e17 	ldw	r7,56(sp)
 8002bec:	880d883a 	mov	r6,r17
 8002bf0:	1009883a 	mov	r4,r2
 8002bf4:	180b883a 	mov	r5,r3
 8002bf8:	800ba8c0 	call	800ba8c <__subdf3>
 8002bfc:	a80b883a 	mov	r5,r21
 8002c00:	a009883a 	mov	r4,r20
 8002c04:	d8c01015 	stw	r3,64(sp)
 8002c08:	d8800e15 	stw	r2,56(sp)
 8002c0c:	800c35c0 	call	800c35c <__fixdfsi>
 8002c10:	1009883a 	mov	r4,r2
 8002c14:	d8801715 	stw	r2,92(sp)
 8002c18:	800c3e40 	call	800c3e4 <__floatsidf>
 8002c1c:	a009883a 	mov	r4,r20
 8002c20:	a80b883a 	mov	r5,r21
 8002c24:	100d883a 	mov	r6,r2
 8002c28:	180f883a 	mov	r7,r3
 8002c2c:	800ba8c0 	call	800ba8c <__subdf3>
 8002c30:	da001717 	ldw	r8,92(sp)
 8002c34:	1829883a 	mov	r20,r3
 8002c38:	d8c00717 	ldw	r3,28(sp)
 8002c3c:	d9000e17 	ldw	r4,56(sp)
 8002c40:	d9401017 	ldw	r5,64(sp)
 8002c44:	42000c04 	addi	r8,r8,48
 8002c48:	1023883a 	mov	r17,r2
 8002c4c:	1a000005 	stb	r8,0(r3)
 8002c50:	880d883a 	mov	r6,r17
 8002c54:	a00f883a 	mov	r7,r20
 8002c58:	402b883a 	mov	r21,r8
 8002c5c:	800b1a80 	call	800b1a8 <__gedf2>
 8002c60:	00844516 	blt	zero,r2,8003d78 <_dtoa_r+0x1698>
 8002c64:	0009883a 	mov	r4,zero
 8002c68:	014ffc34 	movhi	r5,16368
 8002c6c:	880d883a 	mov	r6,r17
 8002c70:	a00f883a 	mov	r7,r20
 8002c74:	800ba8c0 	call	800ba8c <__subdf3>
 8002c78:	d9000e17 	ldw	r4,56(sp)
 8002c7c:	d9401017 	ldw	r5,64(sp)
 8002c80:	100d883a 	mov	r6,r2
 8002c84:	180f883a 	mov	r7,r3
 8002c88:	800b1a80 	call	800b1a8 <__gedf2>
 8002c8c:	da801617 	ldw	r10,88(sp)
 8002c90:	00843616 	blt	zero,r2,8003d6c <_dtoa_r+0x168c>
 8002c94:	00800044 	movi	r2,1
 8002c98:	12806e0e 	bge	r2,r10,8002e54 <_dtoa_r+0x774>
 8002c9c:	d9000717 	ldw	r4,28(sp)
 8002ca0:	dd801315 	stw	r22,76(sp)
 8002ca4:	dc001115 	stw	r16,68(sp)
 8002ca8:	2295883a 	add	r10,r4,r10
 8002cac:	dcc01415 	stw	r19,80(sp)
 8002cb0:	502d883a 	mov	r22,r10
 8002cb4:	dcc01017 	ldw	r19,64(sp)
 8002cb8:	b821883a 	mov	r16,r23
 8002cbc:	dc801015 	stw	r18,64(sp)
 8002cc0:	dc800e17 	ldw	r18,56(sp)
 8002cc4:	00000906 	br	8002cec <_dtoa_r+0x60c>
 8002cc8:	800ba8c0 	call	800ba8c <__subdf3>
 8002ccc:	1009883a 	mov	r4,r2
 8002cd0:	180b883a 	mov	r5,r3
 8002cd4:	900d883a 	mov	r6,r18
 8002cd8:	980f883a 	mov	r7,r19
 8002cdc:	800b2880 	call	800b288 <__ledf2>
 8002ce0:	10040e16 	blt	r2,zero,8003d1c <_dtoa_r+0x163c>
 8002ce4:	b821883a 	mov	r16,r23
 8002ce8:	bd841026 	beq	r23,r22,8003d2c <_dtoa_r+0x164c>
 8002cec:	9009883a 	mov	r4,r18
 8002cf0:	980b883a 	mov	r5,r19
 8002cf4:	000d883a 	mov	r6,zero
 8002cf8:	01d00934 	movhi	r7,16420
 8002cfc:	800b3680 	call	800b368 <__muldf3>
 8002d00:	000d883a 	mov	r6,zero
 8002d04:	01d00934 	movhi	r7,16420
 8002d08:	8809883a 	mov	r4,r17
 8002d0c:	a00b883a 	mov	r5,r20
 8002d10:	1025883a 	mov	r18,r2
 8002d14:	1827883a 	mov	r19,r3
 8002d18:	800b3680 	call	800b368 <__muldf3>
 8002d1c:	180b883a 	mov	r5,r3
 8002d20:	1009883a 	mov	r4,r2
 8002d24:	1823883a 	mov	r17,r3
 8002d28:	1029883a 	mov	r20,r2
 8002d2c:	800c35c0 	call	800c35c <__fixdfsi>
 8002d30:	1009883a 	mov	r4,r2
 8002d34:	102b883a 	mov	r21,r2
 8002d38:	800c3e40 	call	800c3e4 <__floatsidf>
 8002d3c:	a009883a 	mov	r4,r20
 8002d40:	880b883a 	mov	r5,r17
 8002d44:	100d883a 	mov	r6,r2
 8002d48:	180f883a 	mov	r7,r3
 8002d4c:	800ba8c0 	call	800ba8c <__subdf3>
 8002d50:	ad400c04 	addi	r21,r21,48
 8002d54:	1009883a 	mov	r4,r2
 8002d58:	180b883a 	mov	r5,r3
 8002d5c:	900d883a 	mov	r6,r18
 8002d60:	980f883a 	mov	r7,r19
 8002d64:	85400005 	stb	r21,0(r16)
 8002d68:	1023883a 	mov	r17,r2
 8002d6c:	1829883a 	mov	r20,r3
 8002d70:	800b2880 	call	800b288 <__ledf2>
 8002d74:	bdc00044 	addi	r23,r23,1
 8002d78:	0009883a 	mov	r4,zero
 8002d7c:	014ffc34 	movhi	r5,16368
 8002d80:	880d883a 	mov	r6,r17
 8002d84:	a00f883a 	mov	r7,r20
 8002d88:	103fcf0e 	bge	r2,zero,8002cc8 <__alt_data_end+0xfc002cc8>
 8002d8c:	d9801217 	ldw	r6,72(sp)
 8002d90:	dc001117 	ldw	r16,68(sp)
 8002d94:	d9800515 	stw	r6,20(sp)
 8002d98:	8009883a 	mov	r4,r16
 8002d9c:	e00b883a 	mov	r5,fp
 8002da0:	80057b00 	call	80057b0 <_Bfree>
 8002da4:	d8c00517 	ldw	r3,20(sp)
 8002da8:	d9002317 	ldw	r4,140(sp)
 8002dac:	d9802517 	ldw	r6,148(sp)
 8002db0:	b8000005 	stb	zero,0(r23)
 8002db4:	18800044 	addi	r2,r3,1
 8002db8:	20800015 	stw	r2,0(r4)
 8002dbc:	30027226 	beq	r6,zero,8003788 <_dtoa_r+0x10a8>
 8002dc0:	35c00015 	stw	r23,0(r6)
 8002dc4:	d8800717 	ldw	r2,28(sp)
 8002dc8:	003e7406 	br	800279c <__alt_data_end+0xfc00279c>
 8002dcc:	00800434 	movhi	r2,16
 8002dd0:	10bfffc4 	addi	r2,r2,-1
 8002dd4:	a8aa703a 	and	r21,r21,r2
 8002dd8:	a83e801e 	bne	r21,zero,80027dc <__alt_data_end+0xfc0027dc>
 8002ddc:	00820074 	movhi	r2,2049
 8002de0:	10bcaf04 	addi	r2,r2,-3396
 8002de4:	003e7f06 	br	80027e4 <__alt_data_end+0xfc0027e4>
 8002de8:	10c00204 	addi	r3,r2,8
 8002dec:	003e8206 	br	80027f8 <__alt_data_end+0xfc0027f8>
 8002df0:	01400434 	movhi	r5,16
 8002df4:	297fffc4 	addi	r5,r5,-1
 8002df8:	994a703a 	and	r5,r19,r5
 8002dfc:	9009883a 	mov	r4,r18
 8002e00:	8c7f0044 	addi	r17,r17,-1023
 8002e04:	294ffc34 	orhi	r5,r5,16368
 8002e08:	dd000217 	ldw	r20,8(sp)
 8002e0c:	d8000f15 	stw	zero,60(sp)
 8002e10:	003e9f06 	br	8002890 <__alt_data_end+0xfc002890>
 8002e14:	00820074 	movhi	r2,2049
 8002e18:	10bca604 	addi	r2,r2,-3432
 8002e1c:	003e5f06 	br	800279c <__alt_data_end+0xfc00279c>
 8002e20:	80001115 	stw	zero,68(r16)
 8002e24:	8009883a 	mov	r4,r16
 8002e28:	000b883a 	mov	r5,zero
 8002e2c:	80057080 	call	8005708 <_Balloc>
 8002e30:	01bfffc4 	movi	r6,-1
 8002e34:	d8800715 	stw	r2,28(sp)
 8002e38:	80801015 	stw	r2,64(r16)
 8002e3c:	00800044 	movi	r2,1
 8002e40:	d9800615 	stw	r6,24(sp)
 8002e44:	d8800b15 	stw	r2,44(sp)
 8002e48:	d8002215 	stw	zero,136(sp)
 8002e4c:	d9800d15 	stw	r6,52(sp)
 8002e50:	d8000315 	stw	zero,12(sp)
 8002e54:	d8800117 	ldw	r2,4(sp)
 8002e58:	10008e16 	blt	r2,zero,8003094 <_dtoa_r+0x9b4>
 8002e5c:	d9000517 	ldw	r4,20(sp)
 8002e60:	00c00384 	movi	r3,14
 8002e64:	19008b16 	blt	r3,r4,8003094 <_dtoa_r+0x9b4>
 8002e68:	200490fa 	slli	r2,r4,3
 8002e6c:	00c20074 	movhi	r3,2049
 8002e70:	d9802217 	ldw	r6,136(sp)
 8002e74:	18fcce04 	addi	r3,r3,-3272
 8002e78:	1885883a 	add	r2,r3,r2
 8002e7c:	14400017 	ldw	r17,0(r2)
 8002e80:	15000117 	ldw	r20,4(r2)
 8002e84:	3001c716 	blt	r6,zero,80035a4 <_dtoa_r+0xec4>
 8002e88:	880d883a 	mov	r6,r17
 8002e8c:	a00f883a 	mov	r7,r20
 8002e90:	9009883a 	mov	r4,r18
 8002e94:	980b883a 	mov	r5,r19
 8002e98:	800a8580 	call	800a858 <__divdf3>
 8002e9c:	180b883a 	mov	r5,r3
 8002ea0:	1009883a 	mov	r4,r2
 8002ea4:	800c35c0 	call	800c35c <__fixdfsi>
 8002ea8:	1009883a 	mov	r4,r2
 8002eac:	102d883a 	mov	r22,r2
 8002eb0:	800c3e40 	call	800c3e4 <__floatsidf>
 8002eb4:	1009883a 	mov	r4,r2
 8002eb8:	180b883a 	mov	r5,r3
 8002ebc:	880d883a 	mov	r6,r17
 8002ec0:	a00f883a 	mov	r7,r20
 8002ec4:	800b3680 	call	800b368 <__muldf3>
 8002ec8:	9009883a 	mov	r4,r18
 8002ecc:	980b883a 	mov	r5,r19
 8002ed0:	100d883a 	mov	r6,r2
 8002ed4:	180f883a 	mov	r7,r3
 8002ed8:	800ba8c0 	call	800ba8c <__subdf3>
 8002edc:	d9000717 	ldw	r4,28(sp)
 8002ee0:	d9800617 	ldw	r6,24(sp)
 8002ee4:	180b883a 	mov	r5,r3
 8002ee8:	b0c00c04 	addi	r3,r22,48
 8002eec:	20c00005 	stb	r3,0(r4)
 8002ef0:	25c00044 	addi	r23,r4,1
 8002ef4:	01000044 	movi	r4,1
 8002ef8:	1011883a 	mov	r8,r2
 8002efc:	2807883a 	mov	r3,r5
 8002f00:	31003d26 	beq	r6,r4,8002ff8 <_dtoa_r+0x918>
 8002f04:	000d883a 	mov	r6,zero
 8002f08:	01d00934 	movhi	r7,16420
 8002f0c:	1009883a 	mov	r4,r2
 8002f10:	800b3680 	call	800b368 <__muldf3>
 8002f14:	1009883a 	mov	r4,r2
 8002f18:	180b883a 	mov	r5,r3
 8002f1c:	000d883a 	mov	r6,zero
 8002f20:	000f883a 	mov	r7,zero
 8002f24:	1027883a 	mov	r19,r2
 8002f28:	182b883a 	mov	r21,r3
 8002f2c:	800b1240 	call	800b124 <__eqdf2>
 8002f30:	103f9926 	beq	r2,zero,8002d98 <__alt_data_end+0xfc002d98>
 8002f34:	d8c00617 	ldw	r3,24(sp)
 8002f38:	d9000717 	ldw	r4,28(sp)
 8002f3c:	b825883a 	mov	r18,r23
 8002f40:	18bfffc4 	addi	r2,r3,-1
 8002f44:	20ad883a 	add	r22,r4,r2
 8002f48:	dc000315 	stw	r16,12(sp)
 8002f4c:	00000a06 	br	8002f78 <_dtoa_r+0x898>
 8002f50:	800b3680 	call	800b368 <__muldf3>
 8002f54:	1009883a 	mov	r4,r2
 8002f58:	180b883a 	mov	r5,r3
 8002f5c:	000d883a 	mov	r6,zero
 8002f60:	000f883a 	mov	r7,zero
 8002f64:	1027883a 	mov	r19,r2
 8002f68:	182b883a 	mov	r21,r3
 8002f6c:	b825883a 	mov	r18,r23
 8002f70:	800b1240 	call	800b124 <__eqdf2>
 8002f74:	10022626 	beq	r2,zero,8003810 <_dtoa_r+0x1130>
 8002f78:	880d883a 	mov	r6,r17
 8002f7c:	a00f883a 	mov	r7,r20
 8002f80:	9809883a 	mov	r4,r19
 8002f84:	a80b883a 	mov	r5,r21
 8002f88:	800a8580 	call	800a858 <__divdf3>
 8002f8c:	180b883a 	mov	r5,r3
 8002f90:	1009883a 	mov	r4,r2
 8002f94:	800c35c0 	call	800c35c <__fixdfsi>
 8002f98:	1009883a 	mov	r4,r2
 8002f9c:	1021883a 	mov	r16,r2
 8002fa0:	800c3e40 	call	800c3e4 <__floatsidf>
 8002fa4:	1009883a 	mov	r4,r2
 8002fa8:	180b883a 	mov	r5,r3
 8002fac:	880d883a 	mov	r6,r17
 8002fb0:	a00f883a 	mov	r7,r20
 8002fb4:	800b3680 	call	800b368 <__muldf3>
 8002fb8:	9809883a 	mov	r4,r19
 8002fbc:	a80b883a 	mov	r5,r21
 8002fc0:	100d883a 	mov	r6,r2
 8002fc4:	180f883a 	mov	r7,r3
 8002fc8:	800ba8c0 	call	800ba8c <__subdf3>
 8002fcc:	82000c04 	addi	r8,r16,48
 8002fd0:	92000005 	stb	r8,0(r18)
 8002fd4:	1009883a 	mov	r4,r2
 8002fd8:	180b883a 	mov	r5,r3
 8002fdc:	000d883a 	mov	r6,zero
 8002fe0:	01d00934 	movhi	r7,16420
 8002fe4:	1011883a 	mov	r8,r2
 8002fe8:	bdc00044 	addi	r23,r23,1
 8002fec:	95bfd81e 	bne	r18,r22,8002f50 <__alt_data_end+0xfc002f50>
 8002ff0:	802d883a 	mov	r22,r16
 8002ff4:	dc000317 	ldw	r16,12(sp)
 8002ff8:	4009883a 	mov	r4,r8
 8002ffc:	180b883a 	mov	r5,r3
 8003000:	400d883a 	mov	r6,r8
 8003004:	180f883a 	mov	r7,r3
 8003008:	8009fbc0 	call	8009fbc <__adddf3>
 800300c:	8809883a 	mov	r4,r17
 8003010:	a00b883a 	mov	r5,r20
 8003014:	100d883a 	mov	r6,r2
 8003018:	180f883a 	mov	r7,r3
 800301c:	1027883a 	mov	r19,r2
 8003020:	1825883a 	mov	r18,r3
 8003024:	800b2880 	call	800b288 <__ledf2>
 8003028:	10000816 	blt	r2,zero,800304c <_dtoa_r+0x96c>
 800302c:	8809883a 	mov	r4,r17
 8003030:	a00b883a 	mov	r5,r20
 8003034:	980d883a 	mov	r6,r19
 8003038:	900f883a 	mov	r7,r18
 800303c:	800b1240 	call	800b124 <__eqdf2>
 8003040:	103f551e 	bne	r2,zero,8002d98 <__alt_data_end+0xfc002d98>
 8003044:	b580004c 	andi	r22,r22,1
 8003048:	b03f5326 	beq	r22,zero,8002d98 <__alt_data_end+0xfc002d98>
 800304c:	bd7fffc3 	ldbu	r21,-1(r23)
 8003050:	b8bfffc4 	addi	r2,r23,-1
 8003054:	1007883a 	mov	r3,r2
 8003058:	01400e44 	movi	r5,57
 800305c:	d9800717 	ldw	r6,28(sp)
 8003060:	00000506 	br	8003078 <_dtoa_r+0x998>
 8003064:	18ffffc4 	addi	r3,r3,-1
 8003068:	30825e26 	beq	r6,r2,80039e4 <_dtoa_r+0x1304>
 800306c:	1d400003 	ldbu	r21,0(r3)
 8003070:	102f883a 	mov	r23,r2
 8003074:	10bfffc4 	addi	r2,r2,-1
 8003078:	a9003fcc 	andi	r4,r21,255
 800307c:	2100201c 	xori	r4,r4,128
 8003080:	213fe004 	addi	r4,r4,-128
 8003084:	217ff726 	beq	r4,r5,8003064 <__alt_data_end+0xfc003064>
 8003088:	aa000044 	addi	r8,r21,1
 800308c:	12000005 	stb	r8,0(r2)
 8003090:	003f4106 	br	8002d98 <__alt_data_end+0xfc002d98>
 8003094:	d8c00b17 	ldw	r3,44(sp)
 8003098:	18006726 	beq	r3,zero,8003238 <_dtoa_r+0xb58>
 800309c:	d9000317 	ldw	r4,12(sp)
 80030a0:	00c00044 	movi	r3,1
 80030a4:	19016a0e 	bge	r3,r4,8003650 <_dtoa_r+0xf70>
 80030a8:	d8800617 	ldw	r2,24(sp)
 80030ac:	d8c00917 	ldw	r3,36(sp)
 80030b0:	157fffc4 	addi	r21,r2,-1
 80030b4:	1d420716 	blt	r3,r21,80038d4 <_dtoa_r+0x11f4>
 80030b8:	1d6bc83a 	sub	r21,r3,r21
 80030bc:	d8800617 	ldw	r2,24(sp)
 80030c0:	1002c716 	blt	r2,zero,8003be0 <_dtoa_r+0x1500>
 80030c4:	dd000817 	ldw	r20,32(sp)
 80030c8:	d8800617 	ldw	r2,24(sp)
 80030cc:	d9800817 	ldw	r6,32(sp)
 80030d0:	8009883a 	mov	r4,r16
 80030d4:	01400044 	movi	r5,1
 80030d8:	308d883a 	add	r6,r6,r2
 80030dc:	d9800815 	stw	r6,32(sp)
 80030e0:	b0ad883a 	add	r22,r22,r2
 80030e4:	8005b080 	call	8005b08 <__i2b>
 80030e8:	1023883a 	mov	r17,r2
 80030ec:	a0000826 	beq	r20,zero,8003110 <_dtoa_r+0xa30>
 80030f0:	0580070e 	bge	zero,r22,8003110 <_dtoa_r+0xa30>
 80030f4:	b005883a 	mov	r2,r22
 80030f8:	a5812016 	blt	r20,r22,800357c <_dtoa_r+0xe9c>
 80030fc:	d8c00817 	ldw	r3,32(sp)
 8003100:	a0a9c83a 	sub	r20,r20,r2
 8003104:	b0adc83a 	sub	r22,r22,r2
 8003108:	1887c83a 	sub	r3,r3,r2
 800310c:	d8c00815 	stw	r3,32(sp)
 8003110:	d9000917 	ldw	r4,36(sp)
 8003114:	0100140e 	bge	zero,r4,8003168 <_dtoa_r+0xa88>
 8003118:	d9800b17 	ldw	r6,44(sp)
 800311c:	3001e526 	beq	r6,zero,80038b4 <_dtoa_r+0x11d4>
 8003120:	05400e0e 	bge	zero,r21,800315c <_dtoa_r+0xa7c>
 8003124:	880b883a 	mov	r5,r17
 8003128:	8009883a 	mov	r4,r16
 800312c:	a80d883a 	mov	r6,r21
 8003130:	8005d400 	call	8005d40 <__pow5mult>
 8003134:	e00d883a 	mov	r6,fp
 8003138:	8009883a 	mov	r4,r16
 800313c:	100b883a 	mov	r5,r2
 8003140:	1023883a 	mov	r17,r2
 8003144:	8005b440 	call	8005b44 <__multiply>
 8003148:	102f883a 	mov	r23,r2
 800314c:	e00b883a 	mov	r5,fp
 8003150:	8009883a 	mov	r4,r16
 8003154:	80057b00 	call	80057b0 <_Bfree>
 8003158:	b839883a 	mov	fp,r23
 800315c:	d8800917 	ldw	r2,36(sp)
 8003160:	154dc83a 	sub	r6,r2,r21
 8003164:	3001281e 	bne	r6,zero,8003608 <_dtoa_r+0xf28>
 8003168:	05c00044 	movi	r23,1
 800316c:	8009883a 	mov	r4,r16
 8003170:	b80b883a 	mov	r5,r23
 8003174:	8005b080 	call	8005b08 <__i2b>
 8003178:	d8c00a17 	ldw	r3,40(sp)
 800317c:	102b883a 	mov	r21,r2
 8003180:	00c0310e 	bge	zero,r3,8003248 <_dtoa_r+0xb68>
 8003184:	8009883a 	mov	r4,r16
 8003188:	100b883a 	mov	r5,r2
 800318c:	180d883a 	mov	r6,r3
 8003190:	8005d400 	call	8005d40 <__pow5mult>
 8003194:	d9000317 	ldw	r4,12(sp)
 8003198:	102b883a 	mov	r21,r2
 800319c:	b9011f0e 	bge	r23,r4,800361c <_dtoa_r+0xf3c>
 80031a0:	0027883a 	mov	r19,zero
 80031a4:	a8800417 	ldw	r2,16(r21)
 80031a8:	10800104 	addi	r2,r2,4
 80031ac:	1085883a 	add	r2,r2,r2
 80031b0:	1085883a 	add	r2,r2,r2
 80031b4:	a885883a 	add	r2,r21,r2
 80031b8:	11000017 	ldw	r4,0(r2)
 80031bc:	80059f00 	call	80059f0 <__hi0bits>
 80031c0:	00c00804 	movi	r3,32
 80031c4:	1885c83a 	sub	r2,r3,r2
 80031c8:	00002506 	br	8003260 <_dtoa_r+0xb80>
 80031cc:	01800044 	movi	r6,1
 80031d0:	d9800c15 	stw	r6,48(sp)
 80031d4:	003dec06 	br	8002988 <__alt_data_end+0xfc002988>
 80031d8:	d8c00817 	ldw	r3,32(sp)
 80031dc:	d9000517 	ldw	r4,20(sp)
 80031e0:	d8000a15 	stw	zero,40(sp)
 80031e4:	1907c83a 	sub	r3,r3,r4
 80031e8:	010dc83a 	sub	r6,zero,r4
 80031ec:	d8c00815 	stw	r3,32(sp)
 80031f0:	d9800915 	stw	r6,36(sp)
 80031f4:	003ded06 	br	80029ac <__alt_data_end+0xfc0029ac>
 80031f8:	05adc83a 	sub	r22,zero,r22
 80031fc:	dd800815 	stw	r22,32(sp)
 8003200:	002d883a 	mov	r22,zero
 8003204:	003de406 	br	8002998 <__alt_data_end+0xfc002998>
 8003208:	d9000517 	ldw	r4,20(sp)
 800320c:	800c3e40 	call	800c3e4 <__floatsidf>
 8003210:	1009883a 	mov	r4,r2
 8003214:	180b883a 	mov	r5,r3
 8003218:	b00d883a 	mov	r6,r22
 800321c:	a80f883a 	mov	r7,r21
 8003220:	800b1240 	call	800b124 <__eqdf2>
 8003224:	103dc726 	beq	r2,zero,8002944 <__alt_data_end+0xfc002944>
 8003228:	d8800517 	ldw	r2,20(sp)
 800322c:	10bfffc4 	addi	r2,r2,-1
 8003230:	d8800515 	stw	r2,20(sp)
 8003234:	003dc306 	br	8002944 <__alt_data_end+0xfc002944>
 8003238:	dd400917 	ldw	r21,36(sp)
 800323c:	dd000817 	ldw	r20,32(sp)
 8003240:	0023883a 	mov	r17,zero
 8003244:	003fa906 	br	80030ec <__alt_data_end+0xfc0030ec>
 8003248:	d9800317 	ldw	r6,12(sp)
 800324c:	b981670e 	bge	r23,r6,80037ec <_dtoa_r+0x110c>
 8003250:	0027883a 	mov	r19,zero
 8003254:	d8c00a17 	ldw	r3,40(sp)
 8003258:	183fd21e 	bne	r3,zero,80031a4 <__alt_data_end+0xfc0031a4>
 800325c:	00800044 	movi	r2,1
 8003260:	1585883a 	add	r2,r2,r22
 8003264:	108007cc 	andi	r2,r2,31
 8003268:	10005f26 	beq	r2,zero,80033e8 <_dtoa_r+0xd08>
 800326c:	00c00804 	movi	r3,32
 8003270:	1887c83a 	sub	r3,r3,r2
 8003274:	01000104 	movi	r4,4
 8003278:	20c2dd0e 	bge	r4,r3,8003df0 <_dtoa_r+0x1710>
 800327c:	d9000817 	ldw	r4,32(sp)
 8003280:	00c00704 	movi	r3,28
 8003284:	1885c83a 	sub	r2,r3,r2
 8003288:	2089883a 	add	r4,r4,r2
 800328c:	d9000815 	stw	r4,32(sp)
 8003290:	a0a9883a 	add	r20,r20,r2
 8003294:	b0ad883a 	add	r22,r22,r2
 8003298:	d8800817 	ldw	r2,32(sp)
 800329c:	0080050e 	bge	zero,r2,80032b4 <_dtoa_r+0xbd4>
 80032a0:	e00b883a 	mov	r5,fp
 80032a4:	8009883a 	mov	r4,r16
 80032a8:	100d883a 	mov	r6,r2
 80032ac:	8005e800 	call	8005e80 <__lshift>
 80032b0:	1039883a 	mov	fp,r2
 80032b4:	0580050e 	bge	zero,r22,80032cc <_dtoa_r+0xbec>
 80032b8:	a80b883a 	mov	r5,r21
 80032bc:	8009883a 	mov	r4,r16
 80032c0:	b00d883a 	mov	r6,r22
 80032c4:	8005e800 	call	8005e80 <__lshift>
 80032c8:	102b883a 	mov	r21,r2
 80032cc:	d8c00c17 	ldw	r3,48(sp)
 80032d0:	1801161e 	bne	r3,zero,800372c <_dtoa_r+0x104c>
 80032d4:	d8c00617 	ldw	r3,24(sp)
 80032d8:	00c12d0e 	bge	zero,r3,8003790 <_dtoa_r+0x10b0>
 80032dc:	d8c00b17 	ldw	r3,44(sp)
 80032e0:	1800571e 	bne	r3,zero,8003440 <_dtoa_r+0xd60>
 80032e4:	dc800717 	ldw	r18,28(sp)
 80032e8:	dcc00617 	ldw	r19,24(sp)
 80032ec:	9029883a 	mov	r20,r18
 80032f0:	00000206 	br	80032fc <_dtoa_r+0xc1c>
 80032f4:	80057d80 	call	80057d8 <__multadd>
 80032f8:	1039883a 	mov	fp,r2
 80032fc:	e009883a 	mov	r4,fp
 8003300:	a80b883a 	mov	r5,r21
 8003304:	80024e00 	call	80024e0 <quorem>
 8003308:	10800c04 	addi	r2,r2,48
 800330c:	90800005 	stb	r2,0(r18)
 8003310:	94800044 	addi	r18,r18,1
 8003314:	9507c83a 	sub	r3,r18,r20
 8003318:	8009883a 	mov	r4,r16
 800331c:	e00b883a 	mov	r5,fp
 8003320:	01800284 	movi	r6,10
 8003324:	000f883a 	mov	r7,zero
 8003328:	1cfff216 	blt	r3,r19,80032f4 <__alt_data_end+0xfc0032f4>
 800332c:	1011883a 	mov	r8,r2
 8003330:	d8800617 	ldw	r2,24(sp)
 8003334:	00822e0e 	bge	zero,r2,8003bf0 <_dtoa_r+0x1510>
 8003338:	d9000717 	ldw	r4,28(sp)
 800333c:	0025883a 	mov	r18,zero
 8003340:	20af883a 	add	r23,r4,r2
 8003344:	e00b883a 	mov	r5,fp
 8003348:	01800044 	movi	r6,1
 800334c:	8009883a 	mov	r4,r16
 8003350:	da001715 	stw	r8,92(sp)
 8003354:	8005e800 	call	8005e80 <__lshift>
 8003358:	1009883a 	mov	r4,r2
 800335c:	a80b883a 	mov	r5,r21
 8003360:	1039883a 	mov	fp,r2
 8003364:	8005fc80 	call	8005fc8 <__mcmp>
 8003368:	da001717 	ldw	r8,92(sp)
 800336c:	00816e0e 	bge	zero,r2,8003928 <_dtoa_r+0x1248>
 8003370:	b93fffc3 	ldbu	r4,-1(r23)
 8003374:	b8bfffc4 	addi	r2,r23,-1
 8003378:	1007883a 	mov	r3,r2
 800337c:	01800e44 	movi	r6,57
 8003380:	d9c00717 	ldw	r7,28(sp)
 8003384:	00000506 	br	800339c <_dtoa_r+0xcbc>
 8003388:	18ffffc4 	addi	r3,r3,-1
 800338c:	38811926 	beq	r7,r2,80037f4 <_dtoa_r+0x1114>
 8003390:	19000003 	ldbu	r4,0(r3)
 8003394:	102f883a 	mov	r23,r2
 8003398:	10bfffc4 	addi	r2,r2,-1
 800339c:	21403fcc 	andi	r5,r4,255
 80033a0:	2940201c 	xori	r5,r5,128
 80033a4:	297fe004 	addi	r5,r5,-128
 80033a8:	29bff726 	beq	r5,r6,8003388 <__alt_data_end+0xfc003388>
 80033ac:	21000044 	addi	r4,r4,1
 80033b0:	11000005 	stb	r4,0(r2)
 80033b4:	8009883a 	mov	r4,r16
 80033b8:	a80b883a 	mov	r5,r21
 80033bc:	80057b00 	call	80057b0 <_Bfree>
 80033c0:	883e7526 	beq	r17,zero,8002d98 <__alt_data_end+0xfc002d98>
 80033c4:	90000426 	beq	r18,zero,80033d8 <_dtoa_r+0xcf8>
 80033c8:	94400326 	beq	r18,r17,80033d8 <_dtoa_r+0xcf8>
 80033cc:	8009883a 	mov	r4,r16
 80033d0:	900b883a 	mov	r5,r18
 80033d4:	80057b00 	call	80057b0 <_Bfree>
 80033d8:	8009883a 	mov	r4,r16
 80033dc:	880b883a 	mov	r5,r17
 80033e0:	80057b00 	call	80057b0 <_Bfree>
 80033e4:	003e6c06 	br	8002d98 <__alt_data_end+0xfc002d98>
 80033e8:	00800704 	movi	r2,28
 80033ec:	d9800817 	ldw	r6,32(sp)
 80033f0:	a0a9883a 	add	r20,r20,r2
 80033f4:	b0ad883a 	add	r22,r22,r2
 80033f8:	308d883a 	add	r6,r6,r2
 80033fc:	d9800815 	stw	r6,32(sp)
 8003400:	003fa506 	br	8003298 <__alt_data_end+0xfc003298>
 8003404:	013efb84 	movi	r4,-1042
 8003408:	246bc83a 	sub	r21,r4,r17
 800340c:	9548983a 	sll	r4,r18,r21
 8003410:	003d1806 	br	8002874 <__alt_data_end+0xfc002874>
 8003414:	d8000c15 	stw	zero,48(sp)
 8003418:	003d5b06 	br	8002988 <__alt_data_end+0xfc002988>
 800341c:	880b883a 	mov	r5,r17
 8003420:	8009883a 	mov	r4,r16
 8003424:	01800284 	movi	r6,10
 8003428:	000f883a 	mov	r7,zero
 800342c:	80057d80 	call	80057d8 <__multadd>
 8003430:	1023883a 	mov	r17,r2
 8003434:	d8800d17 	ldw	r2,52(sp)
 8003438:	0082550e 	bge	zero,r2,8003d90 <_dtoa_r+0x16b0>
 800343c:	d8800615 	stw	r2,24(sp)
 8003440:	0500050e 	bge	zero,r20,8003458 <_dtoa_r+0xd78>
 8003444:	880b883a 	mov	r5,r17
 8003448:	8009883a 	mov	r4,r16
 800344c:	a00d883a 	mov	r6,r20
 8003450:	8005e800 	call	8005e80 <__lshift>
 8003454:	1023883a 	mov	r17,r2
 8003458:	98016a1e 	bne	r19,zero,8003a04 <_dtoa_r+0x1324>
 800345c:	8829883a 	mov	r20,r17
 8003460:	d9000617 	ldw	r4,24(sp)
 8003464:	dcc00717 	ldw	r19,28(sp)
 8003468:	9480004c 	andi	r18,r18,1
 800346c:	20bfffc4 	addi	r2,r4,-1
 8003470:	9885883a 	add	r2,r19,r2
 8003474:	d8800415 	stw	r2,16(sp)
 8003478:	dc800615 	stw	r18,24(sp)
 800347c:	e009883a 	mov	r4,fp
 8003480:	a80b883a 	mov	r5,r21
 8003484:	80024e00 	call	80024e0 <quorem>
 8003488:	e009883a 	mov	r4,fp
 800348c:	880b883a 	mov	r5,r17
 8003490:	102f883a 	mov	r23,r2
 8003494:	8005fc80 	call	8005fc8 <__mcmp>
 8003498:	8009883a 	mov	r4,r16
 800349c:	a80b883a 	mov	r5,r21
 80034a0:	a00d883a 	mov	r6,r20
 80034a4:	102d883a 	mov	r22,r2
 80034a8:	80060280 	call	8006028 <__mdiff>
 80034ac:	1007883a 	mov	r3,r2
 80034b0:	10800317 	ldw	r2,12(r2)
 80034b4:	bc800c04 	addi	r18,r23,48
 80034b8:	1000971e 	bne	r2,zero,8003718 <_dtoa_r+0x1038>
 80034bc:	180b883a 	mov	r5,r3
 80034c0:	e009883a 	mov	r4,fp
 80034c4:	d8c01515 	stw	r3,84(sp)
 80034c8:	8005fc80 	call	8005fc8 <__mcmp>
 80034cc:	d8c01517 	ldw	r3,84(sp)
 80034d0:	8009883a 	mov	r4,r16
 80034d4:	d8801515 	stw	r2,84(sp)
 80034d8:	180b883a 	mov	r5,r3
 80034dc:	80057b00 	call	80057b0 <_Bfree>
 80034e0:	d8801517 	ldw	r2,84(sp)
 80034e4:	1000041e 	bne	r2,zero,80034f8 <_dtoa_r+0xe18>
 80034e8:	d9800317 	ldw	r6,12(sp)
 80034ec:	3000021e 	bne	r6,zero,80034f8 <_dtoa_r+0xe18>
 80034f0:	d8c00617 	ldw	r3,24(sp)
 80034f4:	18007626 	beq	r3,zero,80036d0 <_dtoa_r+0xff0>
 80034f8:	b0005b16 	blt	r22,zero,8003668 <_dtoa_r+0xf88>
 80034fc:	b000041e 	bne	r22,zero,8003510 <_dtoa_r+0xe30>
 8003500:	d9000317 	ldw	r4,12(sp)
 8003504:	2000021e 	bne	r4,zero,8003510 <_dtoa_r+0xe30>
 8003508:	d8c00617 	ldw	r3,24(sp)
 800350c:	18005626 	beq	r3,zero,8003668 <_dtoa_r+0xf88>
 8003510:	00814d16 	blt	zero,r2,8003a48 <_dtoa_r+0x1368>
 8003514:	d8c00417 	ldw	r3,16(sp)
 8003518:	9d800044 	addi	r22,r19,1
 800351c:	9c800005 	stb	r18,0(r19)
 8003520:	b02f883a 	mov	r23,r22
 8003524:	98c14c26 	beq	r19,r3,8003a58 <_dtoa_r+0x1378>
 8003528:	e00b883a 	mov	r5,fp
 800352c:	8009883a 	mov	r4,r16
 8003530:	01800284 	movi	r6,10
 8003534:	000f883a 	mov	r7,zero
 8003538:	80057d80 	call	80057d8 <__multadd>
 800353c:	1039883a 	mov	fp,r2
 8003540:	8d006d26 	beq	r17,r20,80036f8 <_dtoa_r+0x1018>
 8003544:	880b883a 	mov	r5,r17
 8003548:	01800284 	movi	r6,10
 800354c:	000f883a 	mov	r7,zero
 8003550:	8009883a 	mov	r4,r16
 8003554:	80057d80 	call	80057d8 <__multadd>
 8003558:	a00b883a 	mov	r5,r20
 800355c:	8009883a 	mov	r4,r16
 8003560:	01800284 	movi	r6,10
 8003564:	000f883a 	mov	r7,zero
 8003568:	1023883a 	mov	r17,r2
 800356c:	80057d80 	call	80057d8 <__multadd>
 8003570:	1029883a 	mov	r20,r2
 8003574:	b027883a 	mov	r19,r22
 8003578:	003fc006 	br	800347c <__alt_data_end+0xfc00347c>
 800357c:	a005883a 	mov	r2,r20
 8003580:	003ede06 	br	80030fc <__alt_data_end+0xfc0030fc>
 8003584:	01000044 	movi	r4,1
 8003588:	d9000b15 	stw	r4,44(sp)
 800358c:	d9802217 	ldw	r6,136(sp)
 8003590:	0180dc0e 	bge	zero,r6,8003904 <_dtoa_r+0x1224>
 8003594:	3023883a 	mov	r17,r6
 8003598:	d9800d15 	stw	r6,52(sp)
 800359c:	d9800615 	stw	r6,24(sp)
 80035a0:	003d1e06 	br	8002a1c <__alt_data_end+0xfc002a1c>
 80035a4:	d8800617 	ldw	r2,24(sp)
 80035a8:	00be3716 	blt	zero,r2,8002e88 <__alt_data_end+0xfc002e88>
 80035ac:	1000be1e 	bne	r2,zero,80038a8 <_dtoa_r+0x11c8>
 80035b0:	8809883a 	mov	r4,r17
 80035b4:	a00b883a 	mov	r5,r20
 80035b8:	000d883a 	mov	r6,zero
 80035bc:	01d00534 	movhi	r7,16404
 80035c0:	800b3680 	call	800b368 <__muldf3>
 80035c4:	1009883a 	mov	r4,r2
 80035c8:	180b883a 	mov	r5,r3
 80035cc:	900d883a 	mov	r6,r18
 80035d0:	980f883a 	mov	r7,r19
 80035d4:	800b1a80 	call	800b1a8 <__gedf2>
 80035d8:	002b883a 	mov	r21,zero
 80035dc:	0023883a 	mov	r17,zero
 80035e0:	10007a16 	blt	r2,zero,80037cc <_dtoa_r+0x10ec>
 80035e4:	d9002217 	ldw	r4,136(sp)
 80035e8:	ddc00717 	ldw	r23,28(sp)
 80035ec:	0108303a 	nor	r4,zero,r4
 80035f0:	d9000515 	stw	r4,20(sp)
 80035f4:	8009883a 	mov	r4,r16
 80035f8:	a80b883a 	mov	r5,r21
 80035fc:	80057b00 	call	80057b0 <_Bfree>
 8003600:	883f751e 	bne	r17,zero,80033d8 <__alt_data_end+0xfc0033d8>
 8003604:	003de406 	br	8002d98 <__alt_data_end+0xfc002d98>
 8003608:	e00b883a 	mov	r5,fp
 800360c:	8009883a 	mov	r4,r16
 8003610:	8005d400 	call	8005d40 <__pow5mult>
 8003614:	1039883a 	mov	fp,r2
 8003618:	003ed306 	br	8003168 <__alt_data_end+0xfc003168>
 800361c:	903ee01e 	bne	r18,zero,80031a0 <__alt_data_end+0xfc0031a0>
 8003620:	00800434 	movhi	r2,16
 8003624:	10bfffc4 	addi	r2,r2,-1
 8003628:	9884703a 	and	r2,r19,r2
 800362c:	103f081e 	bne	r2,zero,8003250 <__alt_data_end+0xfc003250>
 8003630:	9cdffc2c 	andhi	r19,r19,32752
 8003634:	983f0626 	beq	r19,zero,8003250 <__alt_data_end+0xfc003250>
 8003638:	d8800817 	ldw	r2,32(sp)
 800363c:	b5800044 	addi	r22,r22,1
 8003640:	04c00044 	movi	r19,1
 8003644:	10800044 	addi	r2,r2,1
 8003648:	d8800815 	stw	r2,32(sp)
 800364c:	003f0106 	br	8003254 <__alt_data_end+0xfc003254>
 8003650:	d9800f17 	ldw	r6,60(sp)
 8003654:	30016826 	beq	r6,zero,8003bf8 <_dtoa_r+0x1518>
 8003658:	10810cc4 	addi	r2,r2,1075
 800365c:	dd400917 	ldw	r21,36(sp)
 8003660:	dd000817 	ldw	r20,32(sp)
 8003664:	003e9906 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003668:	9011883a 	mov	r8,r18
 800366c:	4007883a 	mov	r3,r8
 8003670:	e02d883a 	mov	r22,fp
 8003674:	0080100e 	bge	zero,r2,80036b8 <_dtoa_r+0xfd8>
 8003678:	01800044 	movi	r6,1
 800367c:	8009883a 	mov	r4,r16
 8003680:	e00b883a 	mov	r5,fp
 8003684:	da001515 	stw	r8,84(sp)
 8003688:	da001715 	stw	r8,92(sp)
 800368c:	8005e800 	call	8005e80 <__lshift>
 8003690:	1009883a 	mov	r4,r2
 8003694:	a80b883a 	mov	r5,r21
 8003698:	102d883a 	mov	r22,r2
 800369c:	8005fc80 	call	8005fc8 <__mcmp>
 80036a0:	d8c01517 	ldw	r3,84(sp)
 80036a4:	da001717 	ldw	r8,92(sp)
 80036a8:	0081a50e 	bge	zero,r2,8003d40 <_dtoa_r+0x1660>
 80036ac:	00800e44 	movi	r2,57
 80036b0:	40817b26 	beq	r8,r2,8003ca0 <_dtoa_r+0x15c0>
 80036b4:	40c00044 	addi	r3,r8,1
 80036b8:	8825883a 	mov	r18,r17
 80036bc:	9dc00044 	addi	r23,r19,1
 80036c0:	98c00005 	stb	r3,0(r19)
 80036c4:	a023883a 	mov	r17,r20
 80036c8:	b039883a 	mov	fp,r22
 80036cc:	003f3906 	br	80033b4 <__alt_data_end+0xfc0033b4>
 80036d0:	00800e44 	movi	r2,57
 80036d4:	9011883a 	mov	r8,r18
 80036d8:	90817226 	beq	r18,r2,8003ca4 <_dtoa_r+0x15c4>
 80036dc:	0580010e 	bge	zero,r22,80036e4 <_dtoa_r+0x1004>
 80036e0:	ba000c44 	addi	r8,r23,49
 80036e4:	8825883a 	mov	r18,r17
 80036e8:	9dc00044 	addi	r23,r19,1
 80036ec:	9a000005 	stb	r8,0(r19)
 80036f0:	a023883a 	mov	r17,r20
 80036f4:	003f2f06 	br	80033b4 <__alt_data_end+0xfc0033b4>
 80036f8:	880b883a 	mov	r5,r17
 80036fc:	8009883a 	mov	r4,r16
 8003700:	01800284 	movi	r6,10
 8003704:	000f883a 	mov	r7,zero
 8003708:	80057d80 	call	80057d8 <__multadd>
 800370c:	1023883a 	mov	r17,r2
 8003710:	1029883a 	mov	r20,r2
 8003714:	003f9706 	br	8003574 <__alt_data_end+0xfc003574>
 8003718:	8009883a 	mov	r4,r16
 800371c:	180b883a 	mov	r5,r3
 8003720:	80057b00 	call	80057b0 <_Bfree>
 8003724:	00800044 	movi	r2,1
 8003728:	003f7306 	br	80034f8 <__alt_data_end+0xfc0034f8>
 800372c:	e009883a 	mov	r4,fp
 8003730:	a80b883a 	mov	r5,r21
 8003734:	8005fc80 	call	8005fc8 <__mcmp>
 8003738:	103ee60e 	bge	r2,zero,80032d4 <__alt_data_end+0xfc0032d4>
 800373c:	8009883a 	mov	r4,r16
 8003740:	e00b883a 	mov	r5,fp
 8003744:	01800284 	movi	r6,10
 8003748:	000f883a 	mov	r7,zero
 800374c:	80057d80 	call	80057d8 <__multadd>
 8003750:	d9000517 	ldw	r4,20(sp)
 8003754:	d9800b17 	ldw	r6,44(sp)
 8003758:	1039883a 	mov	fp,r2
 800375c:	213fffc4 	addi	r4,r4,-1
 8003760:	d9000515 	stw	r4,20(sp)
 8003764:	303f2d1e 	bne	r6,zero,800341c <__alt_data_end+0xfc00341c>
 8003768:	d9000d17 	ldw	r4,52(sp)
 800376c:	0101780e 	bge	zero,r4,8003d50 <_dtoa_r+0x1670>
 8003770:	d9000615 	stw	r4,24(sp)
 8003774:	003edb06 	br	80032e4 <__alt_data_end+0xfc0032e4>
 8003778:	00800084 	movi	r2,2
 800377c:	30818e1e 	bne	r6,r2,8003db8 <_dtoa_r+0x16d8>
 8003780:	d8000b15 	stw	zero,44(sp)
 8003784:	003f8106 	br	800358c <__alt_data_end+0xfc00358c>
 8003788:	d8800717 	ldw	r2,28(sp)
 800378c:	003c0306 	br	800279c <__alt_data_end+0xfc00279c>
 8003790:	d9000317 	ldw	r4,12(sp)
 8003794:	00800084 	movi	r2,2
 8003798:	113ed00e 	bge	r2,r4,80032dc <__alt_data_end+0xfc0032dc>
 800379c:	d8c00617 	ldw	r3,24(sp)
 80037a0:	183f901e 	bne	r3,zero,80035e4 <__alt_data_end+0xfc0035e4>
 80037a4:	a80b883a 	mov	r5,r21
 80037a8:	8009883a 	mov	r4,r16
 80037ac:	01800144 	movi	r6,5
 80037b0:	000f883a 	mov	r7,zero
 80037b4:	80057d80 	call	80057d8 <__multadd>
 80037b8:	e009883a 	mov	r4,fp
 80037bc:	100b883a 	mov	r5,r2
 80037c0:	102b883a 	mov	r21,r2
 80037c4:	8005fc80 	call	8005fc8 <__mcmp>
 80037c8:	00bf860e 	bge	zero,r2,80035e4 <__alt_data_end+0xfc0035e4>
 80037cc:	d9800717 	ldw	r6,28(sp)
 80037d0:	00800c44 	movi	r2,49
 80037d4:	30800005 	stb	r2,0(r6)
 80037d8:	d8800517 	ldw	r2,20(sp)
 80037dc:	35c00044 	addi	r23,r6,1
 80037e0:	10800044 	addi	r2,r2,1
 80037e4:	d8800515 	stw	r2,20(sp)
 80037e8:	003f8206 	br	80035f4 <__alt_data_end+0xfc0035f4>
 80037ec:	903e981e 	bne	r18,zero,8003250 <__alt_data_end+0xfc003250>
 80037f0:	003f8b06 	br	8003620 <__alt_data_end+0xfc003620>
 80037f4:	d9800517 	ldw	r6,20(sp)
 80037f8:	d8c00717 	ldw	r3,28(sp)
 80037fc:	00800c44 	movi	r2,49
 8003800:	31800044 	addi	r6,r6,1
 8003804:	d9800515 	stw	r6,20(sp)
 8003808:	18800005 	stb	r2,0(r3)
 800380c:	003ee906 	br	80033b4 <__alt_data_end+0xfc0033b4>
 8003810:	dc000317 	ldw	r16,12(sp)
 8003814:	003d6006 	br	8002d98 <__alt_data_end+0xfc002d98>
 8003818:	8809883a 	mov	r4,r17
 800381c:	800c3e40 	call	800c3e4 <__floatsidf>
 8003820:	a009883a 	mov	r4,r20
 8003824:	a80b883a 	mov	r5,r21
 8003828:	100d883a 	mov	r6,r2
 800382c:	180f883a 	mov	r7,r3
 8003830:	800b3680 	call	800b368 <__muldf3>
 8003834:	1009883a 	mov	r4,r2
 8003838:	180b883a 	mov	r5,r3
 800383c:	000d883a 	mov	r6,zero
 8003840:	01d00734 	movhi	r7,16412
 8003844:	8009fbc0 	call	8009fbc <__adddf3>
 8003848:	1023883a 	mov	r17,r2
 800384c:	00bf3034 	movhi	r2,64704
 8003850:	1885883a 	add	r2,r3,r2
 8003854:	d8800e15 	stw	r2,56(sp)
 8003858:	a009883a 	mov	r4,r20
 800385c:	a80b883a 	mov	r5,r21
 8003860:	000d883a 	mov	r6,zero
 8003864:	01d00534 	movhi	r7,16404
 8003868:	800ba8c0 	call	800ba8c <__subdf3>
 800386c:	d9c00e17 	ldw	r7,56(sp)
 8003870:	1009883a 	mov	r4,r2
 8003874:	180b883a 	mov	r5,r3
 8003878:	880d883a 	mov	r6,r17
 800387c:	102b883a 	mov	r21,r2
 8003880:	1829883a 	mov	r20,r3
 8003884:	800b1a80 	call	800b1a8 <__gedf2>
 8003888:	00807716 	blt	zero,r2,8003a68 <_dtoa_r+0x1388>
 800388c:	d8800e17 	ldw	r2,56(sp)
 8003890:	a809883a 	mov	r4,r21
 8003894:	a00b883a 	mov	r5,r20
 8003898:	11e0003c 	xorhi	r7,r2,32768
 800389c:	880d883a 	mov	r6,r17
 80038a0:	800b2880 	call	800b288 <__ledf2>
 80038a4:	103d6b0e 	bge	r2,zero,8002e54 <__alt_data_end+0xfc002e54>
 80038a8:	002b883a 	mov	r21,zero
 80038ac:	0023883a 	mov	r17,zero
 80038b0:	003f4c06 	br	80035e4 <__alt_data_end+0xfc0035e4>
 80038b4:	d9800917 	ldw	r6,36(sp)
 80038b8:	e00b883a 	mov	r5,fp
 80038bc:	8009883a 	mov	r4,r16
 80038c0:	8005d400 	call	8005d40 <__pow5mult>
 80038c4:	1039883a 	mov	fp,r2
 80038c8:	003e2706 	br	8003168 <__alt_data_end+0xfc003168>
 80038cc:	d8000b15 	stw	zero,44(sp)
 80038d0:	003c4906 	br	80029f8 <__alt_data_end+0xfc0029f8>
 80038d4:	d9000917 	ldw	r4,36(sp)
 80038d8:	d9800a17 	ldw	r6,40(sp)
 80038dc:	dd400915 	stw	r21,36(sp)
 80038e0:	a905c83a 	sub	r2,r21,r4
 80038e4:	308d883a 	add	r6,r6,r2
 80038e8:	d9800a15 	stw	r6,40(sp)
 80038ec:	002b883a 	mov	r21,zero
 80038f0:	003df206 	br	80030bc <__alt_data_end+0xfc0030bc>
 80038f4:	dc800e15 	stw	r18,56(sp)
 80038f8:	982b883a 	mov	r21,r19
 80038fc:	04400084 	movi	r17,2
 8003900:	003c7406 	br	8002ad4 <__alt_data_end+0xfc002ad4>
 8003904:	04400044 	movi	r17,1
 8003908:	dc400d15 	stw	r17,52(sp)
 800390c:	dc400615 	stw	r17,24(sp)
 8003910:	dc402215 	stw	r17,136(sp)
 8003914:	80001115 	stw	zero,68(r16)
 8003918:	000b883a 	mov	r5,zero
 800391c:	003c4a06 	br	8002a48 <__alt_data_end+0xfc002a48>
 8003920:	3023883a 	mov	r17,r6
 8003924:	003ffb06 	br	8003914 <__alt_data_end+0xfc003914>
 8003928:	1000021e 	bne	r2,zero,8003934 <_dtoa_r+0x1254>
 800392c:	4200004c 	andi	r8,r8,1
 8003930:	403e8f1e 	bne	r8,zero,8003370 <__alt_data_end+0xfc003370>
 8003934:	01000c04 	movi	r4,48
 8003938:	00000106 	br	8003940 <_dtoa_r+0x1260>
 800393c:	102f883a 	mov	r23,r2
 8003940:	b8bfffc4 	addi	r2,r23,-1
 8003944:	10c00007 	ldb	r3,0(r2)
 8003948:	193ffc26 	beq	r3,r4,800393c <__alt_data_end+0xfc00393c>
 800394c:	003e9906 	br	80033b4 <__alt_data_end+0xfc0033b4>
 8003950:	d9000517 	ldw	r4,20(sp)
 8003954:	012fc83a 	sub	r23,zero,r4
 8003958:	b800ad26 	beq	r23,zero,8003c10 <_dtoa_r+0x1530>
 800395c:	b88003cc 	andi	r2,r23,15
 8003960:	100490fa 	slli	r2,r2,3
 8003964:	00c20074 	movhi	r3,2049
 8003968:	18fcce04 	addi	r3,r3,-3272
 800396c:	1885883a 	add	r2,r3,r2
 8003970:	11800017 	ldw	r6,0(r2)
 8003974:	11c00117 	ldw	r7,4(r2)
 8003978:	b82fd13a 	srai	r23,r23,4
 800397c:	9009883a 	mov	r4,r18
 8003980:	980b883a 	mov	r5,r19
 8003984:	800b3680 	call	800b368 <__muldf3>
 8003988:	1029883a 	mov	r20,r2
 800398c:	182b883a 	mov	r21,r3
 8003990:	b800f426 	beq	r23,zero,8003d64 <_dtoa_r+0x1684>
 8003994:	02020074 	movhi	r8,2049
 8003998:	423cc404 	addi	r8,r8,-3312
 800399c:	8029883a 	mov	r20,r16
 80039a0:	04400084 	movi	r17,2
 80039a4:	4021883a 	mov	r16,r8
 80039a8:	b980004c 	andi	r6,r23,1
 80039ac:	1009883a 	mov	r4,r2
 80039b0:	b82fd07a 	srai	r23,r23,1
 80039b4:	180b883a 	mov	r5,r3
 80039b8:	30000426 	beq	r6,zero,80039cc <_dtoa_r+0x12ec>
 80039bc:	81800017 	ldw	r6,0(r16)
 80039c0:	81c00117 	ldw	r7,4(r16)
 80039c4:	8c400044 	addi	r17,r17,1
 80039c8:	800b3680 	call	800b368 <__muldf3>
 80039cc:	84000204 	addi	r16,r16,8
 80039d0:	b83ff51e 	bne	r23,zero,80039a8 <__alt_data_end+0xfc0039a8>
 80039d4:	a021883a 	mov	r16,r20
 80039d8:	182b883a 	mov	r21,r3
 80039dc:	1029883a 	mov	r20,r2
 80039e0:	003c5506 	br	8002b38 <__alt_data_end+0xfc002b38>
 80039e4:	d9800517 	ldw	r6,20(sp)
 80039e8:	d9000717 	ldw	r4,28(sp)
 80039ec:	00c00c04 	movi	r3,48
 80039f0:	31800044 	addi	r6,r6,1
 80039f4:	d9800515 	stw	r6,20(sp)
 80039f8:	20c00005 	stb	r3,0(r4)
 80039fc:	02000c44 	movi	r8,49
 8003a00:	003da206 	br	800308c <__alt_data_end+0xfc00308c>
 8003a04:	89400117 	ldw	r5,4(r17)
 8003a08:	8009883a 	mov	r4,r16
 8003a0c:	80057080 	call	8005708 <_Balloc>
 8003a10:	89800417 	ldw	r6,16(r17)
 8003a14:	11000304 	addi	r4,r2,12
 8003a18:	89400304 	addi	r5,r17,12
 8003a1c:	31800084 	addi	r6,r6,2
 8003a20:	318d883a 	add	r6,r6,r6
 8003a24:	318d883a 	add	r6,r6,r6
 8003a28:	1027883a 	mov	r19,r2
 8003a2c:	80054ac0 	call	80054ac <memcpy>
 8003a30:	8009883a 	mov	r4,r16
 8003a34:	980b883a 	mov	r5,r19
 8003a38:	01800044 	movi	r6,1
 8003a3c:	8005e800 	call	8005e80 <__lshift>
 8003a40:	1029883a 	mov	r20,r2
 8003a44:	003e8606 	br	8003460 <__alt_data_end+0xfc003460>
 8003a48:	00800e44 	movi	r2,57
 8003a4c:	90809526 	beq	r18,r2,8003ca4 <_dtoa_r+0x15c4>
 8003a50:	92000044 	addi	r8,r18,1
 8003a54:	003f2306 	br	80036e4 <__alt_data_end+0xfc0036e4>
 8003a58:	9011883a 	mov	r8,r18
 8003a5c:	8825883a 	mov	r18,r17
 8003a60:	a023883a 	mov	r17,r20
 8003a64:	003e3706 	br	8003344 <__alt_data_end+0xfc003344>
 8003a68:	002b883a 	mov	r21,zero
 8003a6c:	0023883a 	mov	r17,zero
 8003a70:	003f5606 	br	80037cc <__alt_data_end+0xfc0037cc>
 8003a74:	51bfffc4 	addi	r6,r10,-1
 8003a78:	300490fa 	slli	r2,r6,3
 8003a7c:	00c20074 	movhi	r3,2049
 8003a80:	18fcce04 	addi	r3,r3,-3272
 8003a84:	1885883a 	add	r2,r3,r2
 8003a88:	d9c00e17 	ldw	r7,56(sp)
 8003a8c:	11000017 	ldw	r4,0(r2)
 8003a90:	11400117 	ldw	r5,4(r2)
 8003a94:	d8800717 	ldw	r2,28(sp)
 8003a98:	d9801015 	stw	r6,64(sp)
 8003a9c:	880d883a 	mov	r6,r17
 8003aa0:	da801615 	stw	r10,88(sp)
 8003aa4:	15c00044 	addi	r23,r2,1
 8003aa8:	800b3680 	call	800b368 <__muldf3>
 8003aac:	a80b883a 	mov	r5,r21
 8003ab0:	a009883a 	mov	r4,r20
 8003ab4:	d8c01115 	stw	r3,68(sp)
 8003ab8:	d8800e15 	stw	r2,56(sp)
 8003abc:	800c35c0 	call	800c35c <__fixdfsi>
 8003ac0:	1009883a 	mov	r4,r2
 8003ac4:	1023883a 	mov	r17,r2
 8003ac8:	800c3e40 	call	800c3e4 <__floatsidf>
 8003acc:	a009883a 	mov	r4,r20
 8003ad0:	a80b883a 	mov	r5,r21
 8003ad4:	100d883a 	mov	r6,r2
 8003ad8:	180f883a 	mov	r7,r3
 8003adc:	800ba8c0 	call	800ba8c <__subdf3>
 8003ae0:	1813883a 	mov	r9,r3
 8003ae4:	d8c00717 	ldw	r3,28(sp)
 8003ae8:	8c400c04 	addi	r17,r17,48
 8003aec:	1011883a 	mov	r8,r2
 8003af0:	1c400005 	stb	r17,0(r3)
 8003af4:	da801617 	ldw	r10,88(sp)
 8003af8:	00800044 	movi	r2,1
 8003afc:	50802326 	beq	r10,r2,8003b8c <_dtoa_r+0x14ac>
 8003b00:	d8800717 	ldw	r2,28(sp)
 8003b04:	b82b883a 	mov	r21,r23
 8003b08:	dc001315 	stw	r16,76(sp)
 8003b0c:	12a9883a 	add	r20,r2,r10
 8003b10:	4807883a 	mov	r3,r9
 8003b14:	4005883a 	mov	r2,r8
 8003b18:	dc801415 	stw	r18,80(sp)
 8003b1c:	000d883a 	mov	r6,zero
 8003b20:	01d00934 	movhi	r7,16420
 8003b24:	1009883a 	mov	r4,r2
 8003b28:	180b883a 	mov	r5,r3
 8003b2c:	800b3680 	call	800b368 <__muldf3>
 8003b30:	180b883a 	mov	r5,r3
 8003b34:	1009883a 	mov	r4,r2
 8003b38:	1821883a 	mov	r16,r3
 8003b3c:	1025883a 	mov	r18,r2
 8003b40:	800c35c0 	call	800c35c <__fixdfsi>
 8003b44:	1009883a 	mov	r4,r2
 8003b48:	1023883a 	mov	r17,r2
 8003b4c:	800c3e40 	call	800c3e4 <__floatsidf>
 8003b50:	9009883a 	mov	r4,r18
 8003b54:	800b883a 	mov	r5,r16
 8003b58:	100d883a 	mov	r6,r2
 8003b5c:	180f883a 	mov	r7,r3
 8003b60:	8c400c04 	addi	r17,r17,48
 8003b64:	800ba8c0 	call	800ba8c <__subdf3>
 8003b68:	ad400044 	addi	r21,r21,1
 8003b6c:	ac7fffc5 	stb	r17,-1(r21)
 8003b70:	ad3fea1e 	bne	r21,r20,8003b1c <__alt_data_end+0xfc003b1c>
 8003b74:	1813883a 	mov	r9,r3
 8003b78:	d8c01017 	ldw	r3,64(sp)
 8003b7c:	dc001317 	ldw	r16,76(sp)
 8003b80:	dc801417 	ldw	r18,80(sp)
 8003b84:	1011883a 	mov	r8,r2
 8003b88:	b8ef883a 	add	r23,r23,r3
 8003b8c:	d9000e17 	ldw	r4,56(sp)
 8003b90:	d9401117 	ldw	r5,68(sp)
 8003b94:	000d883a 	mov	r6,zero
 8003b98:	01cff834 	movhi	r7,16352
 8003b9c:	da001715 	stw	r8,92(sp)
 8003ba0:	da401515 	stw	r9,84(sp)
 8003ba4:	8009fbc0 	call	8009fbc <__adddf3>
 8003ba8:	da001717 	ldw	r8,92(sp)
 8003bac:	da401517 	ldw	r9,84(sp)
 8003bb0:	1009883a 	mov	r4,r2
 8003bb4:	400d883a 	mov	r6,r8
 8003bb8:	480f883a 	mov	r7,r9
 8003bbc:	180b883a 	mov	r5,r3
 8003bc0:	800b2880 	call	800b288 <__ledf2>
 8003bc4:	da001717 	ldw	r8,92(sp)
 8003bc8:	da401517 	ldw	r9,84(sp)
 8003bcc:	10003b0e 	bge	r2,zero,8003cbc <_dtoa_r+0x15dc>
 8003bd0:	d9001217 	ldw	r4,72(sp)
 8003bd4:	bd7fffc3 	ldbu	r21,-1(r23)
 8003bd8:	d9000515 	stw	r4,20(sp)
 8003bdc:	003d1c06 	br	8003050 <__alt_data_end+0xfc003050>
 8003be0:	d8c00817 	ldw	r3,32(sp)
 8003be4:	18a9c83a 	sub	r20,r3,r2
 8003be8:	0005883a 	mov	r2,zero
 8003bec:	003d3706 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003bf0:	00800044 	movi	r2,1
 8003bf4:	003dd006 	br	8003338 <__alt_data_end+0xfc003338>
 8003bf8:	d8c00217 	ldw	r3,8(sp)
 8003bfc:	00800d84 	movi	r2,54
 8003c00:	dd400917 	ldw	r21,36(sp)
 8003c04:	10c5c83a 	sub	r2,r2,r3
 8003c08:	dd000817 	ldw	r20,32(sp)
 8003c0c:	003d2f06 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003c10:	9029883a 	mov	r20,r18
 8003c14:	982b883a 	mov	r21,r19
 8003c18:	04400084 	movi	r17,2
 8003c1c:	003bc606 	br	8002b38 <__alt_data_end+0xfc002b38>
 8003c20:	d8800617 	ldw	r2,24(sp)
 8003c24:	103efc26 	beq	r2,zero,8003818 <__alt_data_end+0xfc003818>
 8003c28:	d8c00d17 	ldw	r3,52(sp)
 8003c2c:	00fc890e 	bge	zero,r3,8002e54 <__alt_data_end+0xfc002e54>
 8003c30:	a80b883a 	mov	r5,r21
 8003c34:	a009883a 	mov	r4,r20
 8003c38:	000d883a 	mov	r6,zero
 8003c3c:	01d00934 	movhi	r7,16420
 8003c40:	800b3680 	call	800b368 <__muldf3>
 8003c44:	89000044 	addi	r4,r17,1
 8003c48:	1029883a 	mov	r20,r2
 8003c4c:	182b883a 	mov	r21,r3
 8003c50:	800c3e40 	call	800c3e4 <__floatsidf>
 8003c54:	a009883a 	mov	r4,r20
 8003c58:	a80b883a 	mov	r5,r21
 8003c5c:	100d883a 	mov	r6,r2
 8003c60:	180f883a 	mov	r7,r3
 8003c64:	800b3680 	call	800b368 <__muldf3>
 8003c68:	1009883a 	mov	r4,r2
 8003c6c:	180b883a 	mov	r5,r3
 8003c70:	000d883a 	mov	r6,zero
 8003c74:	01d00734 	movhi	r7,16412
 8003c78:	8009fbc0 	call	8009fbc <__adddf3>
 8003c7c:	d9000517 	ldw	r4,20(sp)
 8003c80:	1023883a 	mov	r17,r2
 8003c84:	00bf3034 	movhi	r2,64704
 8003c88:	213fffc4 	addi	r4,r4,-1
 8003c8c:	1885883a 	add	r2,r3,r2
 8003c90:	d9001215 	stw	r4,72(sp)
 8003c94:	d8800e15 	stw	r2,56(sp)
 8003c98:	da800d17 	ldw	r10,52(sp)
 8003c9c:	003bc306 	br	8002bac <__alt_data_end+0xfc002bac>
 8003ca0:	b039883a 	mov	fp,r22
 8003ca4:	01000e44 	movi	r4,57
 8003ca8:	8825883a 	mov	r18,r17
 8003cac:	9dc00044 	addi	r23,r19,1
 8003cb0:	99000005 	stb	r4,0(r19)
 8003cb4:	a023883a 	mov	r17,r20
 8003cb8:	003dae06 	br	8003374 <__alt_data_end+0xfc003374>
 8003cbc:	d9800e17 	ldw	r6,56(sp)
 8003cc0:	d9c01117 	ldw	r7,68(sp)
 8003cc4:	0009883a 	mov	r4,zero
 8003cc8:	014ff834 	movhi	r5,16352
 8003ccc:	da001715 	stw	r8,92(sp)
 8003cd0:	da401515 	stw	r9,84(sp)
 8003cd4:	800ba8c0 	call	800ba8c <__subdf3>
 8003cd8:	da001717 	ldw	r8,92(sp)
 8003cdc:	da401517 	ldw	r9,84(sp)
 8003ce0:	1009883a 	mov	r4,r2
 8003ce4:	180b883a 	mov	r5,r3
 8003ce8:	400d883a 	mov	r6,r8
 8003cec:	480f883a 	mov	r7,r9
 8003cf0:	800b1a80 	call	800b1a8 <__gedf2>
 8003cf4:	00bc570e 	bge	zero,r2,8002e54 <__alt_data_end+0xfc002e54>
 8003cf8:	01000c04 	movi	r4,48
 8003cfc:	00000106 	br	8003d04 <_dtoa_r+0x1624>
 8003d00:	102f883a 	mov	r23,r2
 8003d04:	b8bfffc4 	addi	r2,r23,-1
 8003d08:	10c00007 	ldb	r3,0(r2)
 8003d0c:	193ffc26 	beq	r3,r4,8003d00 <__alt_data_end+0xfc003d00>
 8003d10:	d9801217 	ldw	r6,72(sp)
 8003d14:	d9800515 	stw	r6,20(sp)
 8003d18:	003c1f06 	br	8002d98 <__alt_data_end+0xfc002d98>
 8003d1c:	d8801217 	ldw	r2,72(sp)
 8003d20:	dc001117 	ldw	r16,68(sp)
 8003d24:	d8800515 	stw	r2,20(sp)
 8003d28:	003cc906 	br	8003050 <__alt_data_end+0xfc003050>
 8003d2c:	dd801317 	ldw	r22,76(sp)
 8003d30:	dc001117 	ldw	r16,68(sp)
 8003d34:	dcc01417 	ldw	r19,80(sp)
 8003d38:	dc801017 	ldw	r18,64(sp)
 8003d3c:	003c4506 	br	8002e54 <__alt_data_end+0xfc002e54>
 8003d40:	103e5d1e 	bne	r2,zero,80036b8 <__alt_data_end+0xfc0036b8>
 8003d44:	4080004c 	andi	r2,r8,1
 8003d48:	103e5b26 	beq	r2,zero,80036b8 <__alt_data_end+0xfc0036b8>
 8003d4c:	003e5706 	br	80036ac <__alt_data_end+0xfc0036ac>
 8003d50:	d8c00317 	ldw	r3,12(sp)
 8003d54:	00800084 	movi	r2,2
 8003d58:	10c00a16 	blt	r2,r3,8003d84 <_dtoa_r+0x16a4>
 8003d5c:	d9000d17 	ldw	r4,52(sp)
 8003d60:	003e8306 	br	8003770 <__alt_data_end+0xfc003770>
 8003d64:	04400084 	movi	r17,2
 8003d68:	003b7306 	br	8002b38 <__alt_data_end+0xfc002b38>
 8003d6c:	d9801217 	ldw	r6,72(sp)
 8003d70:	d9800515 	stw	r6,20(sp)
 8003d74:	003cb606 	br	8003050 <__alt_data_end+0xfc003050>
 8003d78:	d9001217 	ldw	r4,72(sp)
 8003d7c:	d9000515 	stw	r4,20(sp)
 8003d80:	003c0506 	br	8002d98 <__alt_data_end+0xfc002d98>
 8003d84:	d9800d17 	ldw	r6,52(sp)
 8003d88:	d9800615 	stw	r6,24(sp)
 8003d8c:	003e8306 	br	800379c <__alt_data_end+0xfc00379c>
 8003d90:	d9800317 	ldw	r6,12(sp)
 8003d94:	00800084 	movi	r2,2
 8003d98:	11800216 	blt	r2,r6,8003da4 <_dtoa_r+0x16c4>
 8003d9c:	d8800d17 	ldw	r2,52(sp)
 8003da0:	003da606 	br	800343c <__alt_data_end+0xfc00343c>
 8003da4:	d8800d17 	ldw	r2,52(sp)
 8003da8:	d8800615 	stw	r2,24(sp)
 8003dac:	003e7b06 	br	800379c <__alt_data_end+0xfc00379c>
 8003db0:	05000044 	movi	r20,1
 8003db4:	003b0506 	br	80029cc <__alt_data_end+0xfc0029cc>
 8003db8:	8009883a 	mov	r4,r16
 8003dbc:	80001115 	stw	zero,68(r16)
 8003dc0:	000b883a 	mov	r5,zero
 8003dc4:	80057080 	call	8005708 <_Balloc>
 8003dc8:	d8800715 	stw	r2,28(sp)
 8003dcc:	d8c00717 	ldw	r3,28(sp)
 8003dd0:	00bfffc4 	movi	r2,-1
 8003dd4:	01000044 	movi	r4,1
 8003dd8:	d8800615 	stw	r2,24(sp)
 8003ddc:	80c01015 	stw	r3,64(r16)
 8003de0:	d9000b15 	stw	r4,44(sp)
 8003de4:	d8002215 	stw	zero,136(sp)
 8003de8:	d8800d15 	stw	r2,52(sp)
 8003dec:	003c1906 	br	8002e54 <__alt_data_end+0xfc002e54>
 8003df0:	193d2926 	beq	r3,r4,8003298 <__alt_data_end+0xfc003298>
 8003df4:	00c00f04 	movi	r3,60
 8003df8:	1885c83a 	sub	r2,r3,r2
 8003dfc:	003d7b06 	br	80033ec <__alt_data_end+0xfc0033ec>
 8003e00:	000b883a 	mov	r5,zero
 8003e04:	003b1006 	br	8002a48 <__alt_data_end+0xfc002a48>

08003e08 <_fflush_r>:
 8003e08:	defffb04 	addi	sp,sp,-20
 8003e0c:	dcc00315 	stw	r19,12(sp)
 8003e10:	dc000015 	stw	r16,0(sp)
 8003e14:	dfc00415 	stw	ra,16(sp)
 8003e18:	dc800215 	stw	r18,8(sp)
 8003e1c:	dc400115 	stw	r17,4(sp)
 8003e20:	2027883a 	mov	r19,r4
 8003e24:	2821883a 	mov	r16,r5
 8003e28:	20000226 	beq	r4,zero,8003e34 <_fflush_r+0x2c>
 8003e2c:	20800e17 	ldw	r2,56(r4)
 8003e30:	10005326 	beq	r2,zero,8003f80 <_fflush_r+0x178>
 8003e34:	8080030b 	ldhu	r2,12(r16)
 8003e38:	10ffffcc 	andi	r3,r2,65535
 8003e3c:	18e0001c 	xori	r3,r3,32768
 8003e40:	18e00004 	addi	r3,r3,-32768
 8003e44:	18002c26 	beq	r3,zero,8003ef8 <_fflush_r+0xf0>
 8003e48:	10c0020c 	andi	r3,r2,8
 8003e4c:	1800321e 	bne	r3,zero,8003f18 <_fflush_r+0x110>
 8003e50:	80c00117 	ldw	r3,4(r16)
 8003e54:	10820014 	ori	r2,r2,2048
 8003e58:	8080030d 	sth	r2,12(r16)
 8003e5c:	00c0570e 	bge	zero,r3,8003fbc <_fflush_r+0x1b4>
 8003e60:	82000a17 	ldw	r8,40(r16)
 8003e64:	40002426 	beq	r8,zero,8003ef8 <_fflush_r+0xf0>
 8003e68:	9c400017 	ldw	r17,0(r19)
 8003e6c:	10c4000c 	andi	r3,r2,4096
 8003e70:	98000015 	stw	zero,0(r19)
 8003e74:	18004626 	beq	r3,zero,8003f90 <_fflush_r+0x188>
 8003e78:	81801417 	ldw	r6,80(r16)
 8003e7c:	10c0010c 	andi	r3,r2,4
 8003e80:	18000626 	beq	r3,zero,8003e9c <_fflush_r+0x94>
 8003e84:	80c00117 	ldw	r3,4(r16)
 8003e88:	80800c17 	ldw	r2,48(r16)
 8003e8c:	30cdc83a 	sub	r6,r6,r3
 8003e90:	10000226 	beq	r2,zero,8003e9c <_fflush_r+0x94>
 8003e94:	80800f17 	ldw	r2,60(r16)
 8003e98:	308dc83a 	sub	r6,r6,r2
 8003e9c:	81400717 	ldw	r5,28(r16)
 8003ea0:	9809883a 	mov	r4,r19
 8003ea4:	000f883a 	mov	r7,zero
 8003ea8:	403ee83a 	callr	r8
 8003eac:	00ffffc4 	movi	r3,-1
 8003eb0:	10c04526 	beq	r2,r3,8003fc8 <_fflush_r+0x1c0>
 8003eb4:	80c0030b 	ldhu	r3,12(r16)
 8003eb8:	81000417 	ldw	r4,16(r16)
 8003ebc:	80000115 	stw	zero,4(r16)
 8003ec0:	197dffcc 	andi	r5,r3,63487
 8003ec4:	8140030d 	sth	r5,12(r16)
 8003ec8:	81000015 	stw	r4,0(r16)
 8003ecc:	18c4000c 	andi	r3,r3,4096
 8003ed0:	18000126 	beq	r3,zero,8003ed8 <_fflush_r+0xd0>
 8003ed4:	80801415 	stw	r2,80(r16)
 8003ed8:	81400c17 	ldw	r5,48(r16)
 8003edc:	9c400015 	stw	r17,0(r19)
 8003ee0:	28000526 	beq	r5,zero,8003ef8 <_fflush_r+0xf0>
 8003ee4:	80801004 	addi	r2,r16,64
 8003ee8:	28800226 	beq	r5,r2,8003ef4 <_fflush_r+0xec>
 8003eec:	9809883a 	mov	r4,r19
 8003ef0:	80045240 	call	8004524 <_free_r>
 8003ef4:	80000c15 	stw	zero,48(r16)
 8003ef8:	0005883a 	mov	r2,zero
 8003efc:	dfc00417 	ldw	ra,16(sp)
 8003f00:	dcc00317 	ldw	r19,12(sp)
 8003f04:	dc800217 	ldw	r18,8(sp)
 8003f08:	dc400117 	ldw	r17,4(sp)
 8003f0c:	dc000017 	ldw	r16,0(sp)
 8003f10:	dec00504 	addi	sp,sp,20
 8003f14:	f800283a 	ret
 8003f18:	84800417 	ldw	r18,16(r16)
 8003f1c:	903ff626 	beq	r18,zero,8003ef8 <__alt_data_end+0xfc003ef8>
 8003f20:	84400017 	ldw	r17,0(r16)
 8003f24:	108000cc 	andi	r2,r2,3
 8003f28:	84800015 	stw	r18,0(r16)
 8003f2c:	8ca3c83a 	sub	r17,r17,r18
 8003f30:	10001526 	beq	r2,zero,8003f88 <_fflush_r+0x180>
 8003f34:	0005883a 	mov	r2,zero
 8003f38:	80800215 	stw	r2,8(r16)
 8003f3c:	04400316 	blt	zero,r17,8003f4c <_fflush_r+0x144>
 8003f40:	003fed06 	br	8003ef8 <__alt_data_end+0xfc003ef8>
 8003f44:	90a5883a 	add	r18,r18,r2
 8003f48:	047feb0e 	bge	zero,r17,8003ef8 <__alt_data_end+0xfc003ef8>
 8003f4c:	80800917 	ldw	r2,36(r16)
 8003f50:	81400717 	ldw	r5,28(r16)
 8003f54:	880f883a 	mov	r7,r17
 8003f58:	900d883a 	mov	r6,r18
 8003f5c:	9809883a 	mov	r4,r19
 8003f60:	103ee83a 	callr	r2
 8003f64:	88a3c83a 	sub	r17,r17,r2
 8003f68:	00bff616 	blt	zero,r2,8003f44 <__alt_data_end+0xfc003f44>
 8003f6c:	80c0030b 	ldhu	r3,12(r16)
 8003f70:	00bfffc4 	movi	r2,-1
 8003f74:	18c01014 	ori	r3,r3,64
 8003f78:	80c0030d 	sth	r3,12(r16)
 8003f7c:	003fdf06 	br	8003efc <__alt_data_end+0xfc003efc>
 8003f80:	80043b00 	call	80043b0 <__sinit>
 8003f84:	003fab06 	br	8003e34 <__alt_data_end+0xfc003e34>
 8003f88:	80800517 	ldw	r2,20(r16)
 8003f8c:	003fea06 	br	8003f38 <__alt_data_end+0xfc003f38>
 8003f90:	81400717 	ldw	r5,28(r16)
 8003f94:	000d883a 	mov	r6,zero
 8003f98:	9809883a 	mov	r4,r19
 8003f9c:	01c00044 	movi	r7,1
 8003fa0:	403ee83a 	callr	r8
 8003fa4:	100d883a 	mov	r6,r2
 8003fa8:	00bfffc4 	movi	r2,-1
 8003fac:	30801326 	beq	r6,r2,8003ffc <_fflush_r+0x1f4>
 8003fb0:	8080030b 	ldhu	r2,12(r16)
 8003fb4:	82000a17 	ldw	r8,40(r16)
 8003fb8:	003fb006 	br	8003e7c <__alt_data_end+0xfc003e7c>
 8003fbc:	80c00f17 	ldw	r3,60(r16)
 8003fc0:	00ffa716 	blt	zero,r3,8003e60 <__alt_data_end+0xfc003e60>
 8003fc4:	003fcc06 	br	8003ef8 <__alt_data_end+0xfc003ef8>
 8003fc8:	98c00017 	ldw	r3,0(r19)
 8003fcc:	183fb926 	beq	r3,zero,8003eb4 <__alt_data_end+0xfc003eb4>
 8003fd0:	01000744 	movi	r4,29
 8003fd4:	19000226 	beq	r3,r4,8003fe0 <_fflush_r+0x1d8>
 8003fd8:	01000584 	movi	r4,22
 8003fdc:	1900101e 	bne	r3,r4,8004020 <_fflush_r+0x218>
 8003fe0:	8080030b 	ldhu	r2,12(r16)
 8003fe4:	80c00417 	ldw	r3,16(r16)
 8003fe8:	80000115 	stw	zero,4(r16)
 8003fec:	10bdffcc 	andi	r2,r2,63487
 8003ff0:	8080030d 	sth	r2,12(r16)
 8003ff4:	80c00015 	stw	r3,0(r16)
 8003ff8:	003fb706 	br	8003ed8 <__alt_data_end+0xfc003ed8>
 8003ffc:	98800017 	ldw	r2,0(r19)
 8004000:	103feb26 	beq	r2,zero,8003fb0 <__alt_data_end+0xfc003fb0>
 8004004:	00c00744 	movi	r3,29
 8004008:	10c00226 	beq	r2,r3,8004014 <_fflush_r+0x20c>
 800400c:	00c00584 	movi	r3,22
 8004010:	10ffd61e 	bne	r2,r3,8003f6c <__alt_data_end+0xfc003f6c>
 8004014:	9c400015 	stw	r17,0(r19)
 8004018:	0005883a 	mov	r2,zero
 800401c:	003fb706 	br	8003efc <__alt_data_end+0xfc003efc>
 8004020:	80c0030b 	ldhu	r3,12(r16)
 8004024:	18c01014 	ori	r3,r3,64
 8004028:	80c0030d 	sth	r3,12(r16)
 800402c:	003fb306 	br	8003efc <__alt_data_end+0xfc003efc>

08004030 <fflush>:
 8004030:	20000526 	beq	r4,zero,8004048 <fflush+0x18>
 8004034:	00820074 	movhi	r2,2049
 8004038:	10841204 	addi	r2,r2,4168
 800403c:	200b883a 	mov	r5,r4
 8004040:	11000017 	ldw	r4,0(r2)
 8004044:	8003e081 	jmpi	8003e08 <_fflush_r>
 8004048:	00820074 	movhi	r2,2049
 800404c:	10841104 	addi	r2,r2,4164
 8004050:	11000017 	ldw	r4,0(r2)
 8004054:	01420034 	movhi	r5,2048
 8004058:	294f8204 	addi	r5,r5,15880
 800405c:	80048cc1 	jmpi	80048cc <_fwalk_reent>

08004060 <__fp_lock>:
 8004060:	0005883a 	mov	r2,zero
 8004064:	f800283a 	ret

08004068 <__fp_unlock>:
 8004068:	0005883a 	mov	r2,zero
 800406c:	f800283a 	ret

08004070 <_cleanup_r>:
 8004070:	01420074 	movhi	r5,2049
 8004074:	29603704 	addi	r5,r5,-32548
 8004078:	80048141 	jmpi	8004814 <_fwalk>

0800407c <__sinit.part.1>:
 800407c:	defff604 	addi	sp,sp,-40
 8004080:	00c20034 	movhi	r3,2048
 8004084:	dfc00915 	stw	ra,36(sp)
 8004088:	df000815 	stw	fp,32(sp)
 800408c:	ddc00715 	stw	r23,28(sp)
 8004090:	dd800615 	stw	r22,24(sp)
 8004094:	dd400515 	stw	r21,20(sp)
 8004098:	dd000415 	stw	r20,16(sp)
 800409c:	dcc00315 	stw	r19,12(sp)
 80040a0:	dc800215 	stw	r18,8(sp)
 80040a4:	dc400115 	stw	r17,4(sp)
 80040a8:	dc000015 	stw	r16,0(sp)
 80040ac:	18d01c04 	addi	r3,r3,16496
 80040b0:	24000117 	ldw	r16,4(r4)
 80040b4:	20c00f15 	stw	r3,60(r4)
 80040b8:	07000044 	movi	fp,1
 80040bc:	00c000c4 	movi	r3,3
 80040c0:	2080bb04 	addi	r2,r4,748
 80040c4:	20c0b915 	stw	r3,740(r4)
 80040c8:	27000e15 	stw	fp,56(r4)
 80040cc:	2080ba15 	stw	r2,744(r4)
 80040d0:	2000b815 	stw	zero,736(r4)
 80040d4:	05c00204 	movi	r23,8
 80040d8:	00800104 	movi	r2,4
 80040dc:	2025883a 	mov	r18,r4
 80040e0:	b80d883a 	mov	r6,r23
 80040e4:	81001704 	addi	r4,r16,92
 80040e8:	000b883a 	mov	r5,zero
 80040ec:	80000015 	stw	zero,0(r16)
 80040f0:	80000115 	stw	zero,4(r16)
 80040f4:	80000215 	stw	zero,8(r16)
 80040f8:	8080030d 	sth	r2,12(r16)
 80040fc:	80001915 	stw	zero,100(r16)
 8004100:	8000038d 	sth	zero,14(r16)
 8004104:	80000415 	stw	zero,16(r16)
 8004108:	80000515 	stw	zero,20(r16)
 800410c:	80000615 	stw	zero,24(r16)
 8004110:	80055e40 	call	80055e4 <memset>
 8004114:	05820034 	movhi	r22,2048
 8004118:	94400217 	ldw	r17,8(r18)
 800411c:	05420034 	movhi	r21,2048
 8004120:	05020034 	movhi	r20,2048
 8004124:	04c20034 	movhi	r19,2048
 8004128:	b599d704 	addi	r22,r22,26460
 800412c:	ad59ee04 	addi	r21,r21,26552
 8004130:	a51a0d04 	addi	r20,r20,26676
 8004134:	9cda2404 	addi	r19,r19,26768
 8004138:	85800815 	stw	r22,32(r16)
 800413c:	85400915 	stw	r21,36(r16)
 8004140:	85000a15 	stw	r20,40(r16)
 8004144:	84c00b15 	stw	r19,44(r16)
 8004148:	84000715 	stw	r16,28(r16)
 800414c:	00800284 	movi	r2,10
 8004150:	89001704 	addi	r4,r17,92
 8004154:	b80d883a 	mov	r6,r23
 8004158:	000b883a 	mov	r5,zero
 800415c:	88000015 	stw	zero,0(r17)
 8004160:	88000115 	stw	zero,4(r17)
 8004164:	88000215 	stw	zero,8(r17)
 8004168:	8880030d 	sth	r2,12(r17)
 800416c:	88001915 	stw	zero,100(r17)
 8004170:	8f00038d 	sth	fp,14(r17)
 8004174:	88000415 	stw	zero,16(r17)
 8004178:	88000515 	stw	zero,20(r17)
 800417c:	88000615 	stw	zero,24(r17)
 8004180:	80055e40 	call	80055e4 <memset>
 8004184:	94000317 	ldw	r16,12(r18)
 8004188:	00800484 	movi	r2,18
 800418c:	8c400715 	stw	r17,28(r17)
 8004190:	8d800815 	stw	r22,32(r17)
 8004194:	8d400915 	stw	r21,36(r17)
 8004198:	8d000a15 	stw	r20,40(r17)
 800419c:	8cc00b15 	stw	r19,44(r17)
 80041a0:	8080030d 	sth	r2,12(r16)
 80041a4:	00800084 	movi	r2,2
 80041a8:	80000015 	stw	zero,0(r16)
 80041ac:	80000115 	stw	zero,4(r16)
 80041b0:	80000215 	stw	zero,8(r16)
 80041b4:	80001915 	stw	zero,100(r16)
 80041b8:	8080038d 	sth	r2,14(r16)
 80041bc:	80000415 	stw	zero,16(r16)
 80041c0:	80000515 	stw	zero,20(r16)
 80041c4:	80000615 	stw	zero,24(r16)
 80041c8:	81001704 	addi	r4,r16,92
 80041cc:	000b883a 	mov	r5,zero
 80041d0:	b80d883a 	mov	r6,r23
 80041d4:	80055e40 	call	80055e4 <memset>
 80041d8:	84000715 	stw	r16,28(r16)
 80041dc:	85800815 	stw	r22,32(r16)
 80041e0:	85400915 	stw	r21,36(r16)
 80041e4:	85000a15 	stw	r20,40(r16)
 80041e8:	84c00b15 	stw	r19,44(r16)
 80041ec:	dfc00917 	ldw	ra,36(sp)
 80041f0:	df000817 	ldw	fp,32(sp)
 80041f4:	ddc00717 	ldw	r23,28(sp)
 80041f8:	dd800617 	ldw	r22,24(sp)
 80041fc:	dd400517 	ldw	r21,20(sp)
 8004200:	dd000417 	ldw	r20,16(sp)
 8004204:	dcc00317 	ldw	r19,12(sp)
 8004208:	dc800217 	ldw	r18,8(sp)
 800420c:	dc400117 	ldw	r17,4(sp)
 8004210:	dc000017 	ldw	r16,0(sp)
 8004214:	dec00a04 	addi	sp,sp,40
 8004218:	f800283a 	ret

0800421c <__sfmoreglue>:
 800421c:	defffc04 	addi	sp,sp,-16
 8004220:	dc400115 	stw	r17,4(sp)
 8004224:	2c401a24 	muli	r17,r5,104
 8004228:	dc800215 	stw	r18,8(sp)
 800422c:	2825883a 	mov	r18,r5
 8004230:	89400304 	addi	r5,r17,12
 8004234:	dc000015 	stw	r16,0(sp)
 8004238:	dfc00315 	stw	ra,12(sp)
 800423c:	8004c1c0 	call	8004c1c <_malloc_r>
 8004240:	1021883a 	mov	r16,r2
 8004244:	10000726 	beq	r2,zero,8004264 <__sfmoreglue+0x48>
 8004248:	11000304 	addi	r4,r2,12
 800424c:	10000015 	stw	zero,0(r2)
 8004250:	14800115 	stw	r18,4(r2)
 8004254:	11000215 	stw	r4,8(r2)
 8004258:	000b883a 	mov	r5,zero
 800425c:	880d883a 	mov	r6,r17
 8004260:	80055e40 	call	80055e4 <memset>
 8004264:	8005883a 	mov	r2,r16
 8004268:	dfc00317 	ldw	ra,12(sp)
 800426c:	dc800217 	ldw	r18,8(sp)
 8004270:	dc400117 	ldw	r17,4(sp)
 8004274:	dc000017 	ldw	r16,0(sp)
 8004278:	dec00404 	addi	sp,sp,16
 800427c:	f800283a 	ret

08004280 <__sfp>:
 8004280:	00820074 	movhi	r2,2049
 8004284:	defffb04 	addi	sp,sp,-20
 8004288:	10841104 	addi	r2,r2,4164
 800428c:	dc800215 	stw	r18,8(sp)
 8004290:	14800017 	ldw	r18,0(r2)
 8004294:	dcc00315 	stw	r19,12(sp)
 8004298:	dfc00415 	stw	ra,16(sp)
 800429c:	90800e17 	ldw	r2,56(r18)
 80042a0:	dc400115 	stw	r17,4(sp)
 80042a4:	dc000015 	stw	r16,0(sp)
 80042a8:	2027883a 	mov	r19,r4
 80042ac:	1000021e 	bne	r2,zero,80042b8 <__sfp+0x38>
 80042b0:	9009883a 	mov	r4,r18
 80042b4:	800407c0 	call	800407c <__sinit.part.1>
 80042b8:	9480b804 	addi	r18,r18,736
 80042bc:	047fffc4 	movi	r17,-1
 80042c0:	91400117 	ldw	r5,4(r18)
 80042c4:	94000217 	ldw	r16,8(r18)
 80042c8:	297fffc4 	addi	r5,r5,-1
 80042cc:	28000a16 	blt	r5,zero,80042f8 <__sfp+0x78>
 80042d0:	8080030f 	ldh	r2,12(r16)
 80042d4:	10000c26 	beq	r2,zero,8004308 <__sfp+0x88>
 80042d8:	80c01d04 	addi	r3,r16,116
 80042dc:	00000206 	br	80042e8 <__sfp+0x68>
 80042e0:	18bfe60f 	ldh	r2,-104(r3)
 80042e4:	10000826 	beq	r2,zero,8004308 <__sfp+0x88>
 80042e8:	297fffc4 	addi	r5,r5,-1
 80042ec:	1c3ffd04 	addi	r16,r3,-12
 80042f0:	18c01a04 	addi	r3,r3,104
 80042f4:	2c7ffa1e 	bne	r5,r17,80042e0 <__alt_data_end+0xfc0042e0>
 80042f8:	90800017 	ldw	r2,0(r18)
 80042fc:	10001d26 	beq	r2,zero,8004374 <__sfp+0xf4>
 8004300:	1025883a 	mov	r18,r2
 8004304:	003fee06 	br	80042c0 <__alt_data_end+0xfc0042c0>
 8004308:	00bfffc4 	movi	r2,-1
 800430c:	8080038d 	sth	r2,14(r16)
 8004310:	00800044 	movi	r2,1
 8004314:	8080030d 	sth	r2,12(r16)
 8004318:	80001915 	stw	zero,100(r16)
 800431c:	80000015 	stw	zero,0(r16)
 8004320:	80000215 	stw	zero,8(r16)
 8004324:	80000115 	stw	zero,4(r16)
 8004328:	80000415 	stw	zero,16(r16)
 800432c:	80000515 	stw	zero,20(r16)
 8004330:	80000615 	stw	zero,24(r16)
 8004334:	81001704 	addi	r4,r16,92
 8004338:	000b883a 	mov	r5,zero
 800433c:	01800204 	movi	r6,8
 8004340:	80055e40 	call	80055e4 <memset>
 8004344:	8005883a 	mov	r2,r16
 8004348:	80000c15 	stw	zero,48(r16)
 800434c:	80000d15 	stw	zero,52(r16)
 8004350:	80001115 	stw	zero,68(r16)
 8004354:	80001215 	stw	zero,72(r16)
 8004358:	dfc00417 	ldw	ra,16(sp)
 800435c:	dcc00317 	ldw	r19,12(sp)
 8004360:	dc800217 	ldw	r18,8(sp)
 8004364:	dc400117 	ldw	r17,4(sp)
 8004368:	dc000017 	ldw	r16,0(sp)
 800436c:	dec00504 	addi	sp,sp,20
 8004370:	f800283a 	ret
 8004374:	9809883a 	mov	r4,r19
 8004378:	01400104 	movi	r5,4
 800437c:	800421c0 	call	800421c <__sfmoreglue>
 8004380:	90800015 	stw	r2,0(r18)
 8004384:	103fde1e 	bne	r2,zero,8004300 <__alt_data_end+0xfc004300>
 8004388:	00800304 	movi	r2,12
 800438c:	98800015 	stw	r2,0(r19)
 8004390:	0005883a 	mov	r2,zero
 8004394:	003ff006 	br	8004358 <__alt_data_end+0xfc004358>

08004398 <_cleanup>:
 8004398:	00820074 	movhi	r2,2049
 800439c:	10841104 	addi	r2,r2,4164
 80043a0:	11000017 	ldw	r4,0(r2)
 80043a4:	01420074 	movhi	r5,2049
 80043a8:	29603704 	addi	r5,r5,-32548
 80043ac:	80048141 	jmpi	8004814 <_fwalk>

080043b0 <__sinit>:
 80043b0:	20800e17 	ldw	r2,56(r4)
 80043b4:	10000126 	beq	r2,zero,80043bc <__sinit+0xc>
 80043b8:	f800283a 	ret
 80043bc:	800407c1 	jmpi	800407c <__sinit.part.1>

080043c0 <__sfp_lock_acquire>:
 80043c0:	f800283a 	ret

080043c4 <__sfp_lock_release>:
 80043c4:	f800283a 	ret

080043c8 <__sinit_lock_acquire>:
 80043c8:	f800283a 	ret

080043cc <__sinit_lock_release>:
 80043cc:	f800283a 	ret

080043d0 <__fp_lock_all>:
 80043d0:	00820074 	movhi	r2,2049
 80043d4:	10841204 	addi	r2,r2,4168
 80043d8:	11000017 	ldw	r4,0(r2)
 80043dc:	01420034 	movhi	r5,2048
 80043e0:	29501804 	addi	r5,r5,16480
 80043e4:	80048141 	jmpi	8004814 <_fwalk>

080043e8 <__fp_unlock_all>:
 80043e8:	00820074 	movhi	r2,2049
 80043ec:	10841204 	addi	r2,r2,4168
 80043f0:	11000017 	ldw	r4,0(r2)
 80043f4:	01420034 	movhi	r5,2048
 80043f8:	29501a04 	addi	r5,r5,16488
 80043fc:	80048141 	jmpi	8004814 <_fwalk>

08004400 <_malloc_trim_r>:
 8004400:	defffb04 	addi	sp,sp,-20
 8004404:	dcc00315 	stw	r19,12(sp)
 8004408:	04c20074 	movhi	r19,2049
 800440c:	dc800215 	stw	r18,8(sp)
 8004410:	dc400115 	stw	r17,4(sp)
 8004414:	dc000015 	stw	r16,0(sp)
 8004418:	dfc00415 	stw	ra,16(sp)
 800441c:	2821883a 	mov	r16,r5
 8004420:	9cfe8204 	addi	r19,r19,-1528
 8004424:	2025883a 	mov	r18,r4
 8004428:	800cb7c0 	call	800cb7c <__malloc_lock>
 800442c:	98800217 	ldw	r2,8(r19)
 8004430:	14400117 	ldw	r17,4(r2)
 8004434:	00bfff04 	movi	r2,-4
 8004438:	88a2703a 	and	r17,r17,r2
 800443c:	8c21c83a 	sub	r16,r17,r16
 8004440:	8403fbc4 	addi	r16,r16,4079
 8004444:	8020d33a 	srli	r16,r16,12
 8004448:	0083ffc4 	movi	r2,4095
 800444c:	843fffc4 	addi	r16,r16,-1
 8004450:	8020933a 	slli	r16,r16,12
 8004454:	1400060e 	bge	r2,r16,8004470 <_malloc_trim_r+0x70>
 8004458:	9009883a 	mov	r4,r18
 800445c:	000b883a 	mov	r5,zero
 8004460:	80067080 	call	8006708 <_sbrk_r>
 8004464:	98c00217 	ldw	r3,8(r19)
 8004468:	1c47883a 	add	r3,r3,r17
 800446c:	10c00a26 	beq	r2,r3,8004498 <_malloc_trim_r+0x98>
 8004470:	9009883a 	mov	r4,r18
 8004474:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8004478:	0005883a 	mov	r2,zero
 800447c:	dfc00417 	ldw	ra,16(sp)
 8004480:	dcc00317 	ldw	r19,12(sp)
 8004484:	dc800217 	ldw	r18,8(sp)
 8004488:	dc400117 	ldw	r17,4(sp)
 800448c:	dc000017 	ldw	r16,0(sp)
 8004490:	dec00504 	addi	sp,sp,20
 8004494:	f800283a 	ret
 8004498:	9009883a 	mov	r4,r18
 800449c:	040bc83a 	sub	r5,zero,r16
 80044a0:	80067080 	call	8006708 <_sbrk_r>
 80044a4:	00ffffc4 	movi	r3,-1
 80044a8:	10c00d26 	beq	r2,r3,80044e0 <_malloc_trim_r+0xe0>
 80044ac:	00c20074 	movhi	r3,2049
 80044b0:	18caf404 	addi	r3,r3,11216
 80044b4:	18800017 	ldw	r2,0(r3)
 80044b8:	99000217 	ldw	r4,8(r19)
 80044bc:	8c23c83a 	sub	r17,r17,r16
 80044c0:	8c400054 	ori	r17,r17,1
 80044c4:	1421c83a 	sub	r16,r2,r16
 80044c8:	24400115 	stw	r17,4(r4)
 80044cc:	9009883a 	mov	r4,r18
 80044d0:	1c000015 	stw	r16,0(r3)
 80044d4:	800cb9c0 	call	800cb9c <__malloc_unlock>
 80044d8:	00800044 	movi	r2,1
 80044dc:	003fe706 	br	800447c <__alt_data_end+0xfc00447c>
 80044e0:	9009883a 	mov	r4,r18
 80044e4:	000b883a 	mov	r5,zero
 80044e8:	80067080 	call	8006708 <_sbrk_r>
 80044ec:	99000217 	ldw	r4,8(r19)
 80044f0:	014003c4 	movi	r5,15
 80044f4:	1107c83a 	sub	r3,r2,r4
 80044f8:	28ffdd0e 	bge	r5,r3,8004470 <__alt_data_end+0xfc004470>
 80044fc:	01420074 	movhi	r5,2049
 8004500:	29441404 	addi	r5,r5,4176
 8004504:	29400017 	ldw	r5,0(r5)
 8004508:	18c00054 	ori	r3,r3,1
 800450c:	20c00115 	stw	r3,4(r4)
 8004510:	00c20074 	movhi	r3,2049
 8004514:	1145c83a 	sub	r2,r2,r5
 8004518:	18caf404 	addi	r3,r3,11216
 800451c:	18800015 	stw	r2,0(r3)
 8004520:	003fd306 	br	8004470 <__alt_data_end+0xfc004470>

08004524 <_free_r>:
 8004524:	28004c26 	beq	r5,zero,8004658 <_free_r+0x134>
 8004528:	defffd04 	addi	sp,sp,-12
 800452c:	dc400115 	stw	r17,4(sp)
 8004530:	dc000015 	stw	r16,0(sp)
 8004534:	2023883a 	mov	r17,r4
 8004538:	2821883a 	mov	r16,r5
 800453c:	dfc00215 	stw	ra,8(sp)
 8004540:	800cb7c0 	call	800cb7c <__malloc_lock>
 8004544:	813fff17 	ldw	r4,-4(r16)
 8004548:	00bfff84 	movi	r2,-2
 800454c:	02420074 	movhi	r9,2049
 8004550:	81bffe04 	addi	r6,r16,-8
 8004554:	2084703a 	and	r2,r4,r2
 8004558:	4a7e8204 	addi	r9,r9,-1528
 800455c:	308b883a 	add	r5,r6,r2
 8004560:	2a000117 	ldw	r8,4(r5)
 8004564:	49c00217 	ldw	r7,8(r9)
 8004568:	00ffff04 	movi	r3,-4
 800456c:	40c6703a 	and	r3,r8,r3
 8004570:	39405326 	beq	r7,r5,80046c0 <_free_r+0x19c>
 8004574:	28c00115 	stw	r3,4(r5)
 8004578:	2100004c 	andi	r4,r4,1
 800457c:	2000091e 	bne	r4,zero,80045a4 <_free_r+0x80>
 8004580:	81fffe17 	ldw	r7,-8(r16)
 8004584:	4a000204 	addi	r8,r9,8
 8004588:	31cdc83a 	sub	r6,r6,r7
 800458c:	31000217 	ldw	r4,8(r6)
 8004590:	11c5883a 	add	r2,r2,r7
 8004594:	22006126 	beq	r4,r8,800471c <_free_r+0x1f8>
 8004598:	31c00317 	ldw	r7,12(r6)
 800459c:	21c00315 	stw	r7,12(r4)
 80045a0:	39000215 	stw	r4,8(r7)
 80045a4:	28c9883a 	add	r4,r5,r3
 80045a8:	21c00117 	ldw	r7,4(r4)
 80045ac:	39c0004c 	andi	r7,r7,1
 80045b0:	38000d1e 	bne	r7,zero,80045e8 <_free_r+0xc4>
 80045b4:	29000217 	ldw	r4,8(r5)
 80045b8:	10c5883a 	add	r2,r2,r3
 80045bc:	00c20074 	movhi	r3,2049
 80045c0:	18fe8404 	addi	r3,r3,-1520
 80045c4:	20c07526 	beq	r4,r3,800479c <_free_r+0x278>
 80045c8:	29c00317 	ldw	r7,12(r5)
 80045cc:	11400054 	ori	r5,r2,1
 80045d0:	3087883a 	add	r3,r6,r2
 80045d4:	21c00315 	stw	r7,12(r4)
 80045d8:	39000215 	stw	r4,8(r7)
 80045dc:	31400115 	stw	r5,4(r6)
 80045e0:	18800015 	stw	r2,0(r3)
 80045e4:	00000406 	br	80045f8 <_free_r+0xd4>
 80045e8:	10c00054 	ori	r3,r2,1
 80045ec:	30c00115 	stw	r3,4(r6)
 80045f0:	3087883a 	add	r3,r6,r2
 80045f4:	18800015 	stw	r2,0(r3)
 80045f8:	00c07fc4 	movi	r3,511
 80045fc:	18801736 	bltu	r3,r2,800465c <_free_r+0x138>
 8004600:	1004d0fa 	srli	r2,r2,3
 8004604:	01400044 	movi	r5,1
 8004608:	49000117 	ldw	r4,4(r9)
 800460c:	1087883a 	add	r3,r2,r2
 8004610:	18c7883a 	add	r3,r3,r3
 8004614:	1005d0ba 	srai	r2,r2,2
 8004618:	18c7883a 	add	r3,r3,r3
 800461c:	1a47883a 	add	r3,r3,r9
 8004620:	19c00217 	ldw	r7,8(r3)
 8004624:	2884983a 	sll	r2,r5,r2
 8004628:	30c00315 	stw	r3,12(r6)
 800462c:	31c00215 	stw	r7,8(r6)
 8004630:	1104b03a 	or	r2,r2,r4
 8004634:	19800215 	stw	r6,8(r3)
 8004638:	48800115 	stw	r2,4(r9)
 800463c:	39800315 	stw	r6,12(r7)
 8004640:	8809883a 	mov	r4,r17
 8004644:	dfc00217 	ldw	ra,8(sp)
 8004648:	dc400117 	ldw	r17,4(sp)
 800464c:	dc000017 	ldw	r16,0(sp)
 8004650:	dec00304 	addi	sp,sp,12
 8004654:	800cb9c1 	jmpi	800cb9c <__malloc_unlock>
 8004658:	f800283a 	ret
 800465c:	1006d27a 	srli	r3,r2,9
 8004660:	01000104 	movi	r4,4
 8004664:	20c04036 	bltu	r4,r3,8004768 <_free_r+0x244>
 8004668:	1006d1ba 	srli	r3,r2,6
 800466c:	19400e04 	addi	r5,r3,56
 8004670:	2947883a 	add	r3,r5,r5
 8004674:	18c7883a 	add	r3,r3,r3
 8004678:	18c7883a 	add	r3,r3,r3
 800467c:	1a49883a 	add	r4,r3,r9
 8004680:	20c00217 	ldw	r3,8(r4)
 8004684:	01c20074 	movhi	r7,2049
 8004688:	39fe8204 	addi	r7,r7,-1528
 800468c:	19003b26 	beq	r3,r4,800477c <_free_r+0x258>
 8004690:	01ffff04 	movi	r7,-4
 8004694:	19400117 	ldw	r5,4(r3)
 8004698:	29ca703a 	and	r5,r5,r7
 800469c:	1140022e 	bgeu	r2,r5,80046a8 <_free_r+0x184>
 80046a0:	18c00217 	ldw	r3,8(r3)
 80046a4:	20fffb1e 	bne	r4,r3,8004694 <__alt_data_end+0xfc004694>
 80046a8:	18800317 	ldw	r2,12(r3)
 80046ac:	30800315 	stw	r2,12(r6)
 80046b0:	30c00215 	stw	r3,8(r6)
 80046b4:	11800215 	stw	r6,8(r2)
 80046b8:	19800315 	stw	r6,12(r3)
 80046bc:	003fe006 	br	8004640 <__alt_data_end+0xfc004640>
 80046c0:	2100004c 	andi	r4,r4,1
 80046c4:	1885883a 	add	r2,r3,r2
 80046c8:	2000071e 	bne	r4,zero,80046e8 <_free_r+0x1c4>
 80046cc:	817ffe17 	ldw	r5,-8(r16)
 80046d0:	314dc83a 	sub	r6,r6,r5
 80046d4:	30c00317 	ldw	r3,12(r6)
 80046d8:	31000217 	ldw	r4,8(r6)
 80046dc:	1145883a 	add	r2,r2,r5
 80046e0:	20c00315 	stw	r3,12(r4)
 80046e4:	19000215 	stw	r4,8(r3)
 80046e8:	10c00054 	ori	r3,r2,1
 80046ec:	30c00115 	stw	r3,4(r6)
 80046f0:	00c20074 	movhi	r3,2049
 80046f4:	18c41504 	addi	r3,r3,4180
 80046f8:	18c00017 	ldw	r3,0(r3)
 80046fc:	49800215 	stw	r6,8(r9)
 8004700:	10ffcf36 	bltu	r2,r3,8004640 <__alt_data_end+0xfc004640>
 8004704:	00820074 	movhi	r2,2049
 8004708:	108aec04 	addi	r2,r2,11184
 800470c:	11400017 	ldw	r5,0(r2)
 8004710:	8809883a 	mov	r4,r17
 8004714:	80044000 	call	8004400 <_malloc_trim_r>
 8004718:	003fc906 	br	8004640 <__alt_data_end+0xfc004640>
 800471c:	28c9883a 	add	r4,r5,r3
 8004720:	21000117 	ldw	r4,4(r4)
 8004724:	2100004c 	andi	r4,r4,1
 8004728:	20000a1e 	bne	r4,zero,8004754 <_free_r+0x230>
 800472c:	29000317 	ldw	r4,12(r5)
 8004730:	29400217 	ldw	r5,8(r5)
 8004734:	10c5883a 	add	r2,r2,r3
 8004738:	10c00054 	ori	r3,r2,1
 800473c:	29000315 	stw	r4,12(r5)
 8004740:	21400215 	stw	r5,8(r4)
 8004744:	30c00115 	stw	r3,4(r6)
 8004748:	308d883a 	add	r6,r6,r2
 800474c:	30800015 	stw	r2,0(r6)
 8004750:	003fbb06 	br	8004640 <__alt_data_end+0xfc004640>
 8004754:	10c00054 	ori	r3,r2,1
 8004758:	30c00115 	stw	r3,4(r6)
 800475c:	308d883a 	add	r6,r6,r2
 8004760:	30800015 	stw	r2,0(r6)
 8004764:	003fb606 	br	8004640 <__alt_data_end+0xfc004640>
 8004768:	01000504 	movi	r4,20
 800476c:	20c01436 	bltu	r4,r3,80047c0 <_free_r+0x29c>
 8004770:	194016c4 	addi	r5,r3,91
 8004774:	2947883a 	add	r3,r5,r5
 8004778:	003fbe06 	br	8004674 <__alt_data_end+0xfc004674>
 800477c:	280bd0ba 	srai	r5,r5,2
 8004780:	00800044 	movi	r2,1
 8004784:	39000117 	ldw	r4,4(r7)
 8004788:	114a983a 	sll	r5,r2,r5
 800478c:	1805883a 	mov	r2,r3
 8004790:	2908b03a 	or	r4,r5,r4
 8004794:	39000115 	stw	r4,4(r7)
 8004798:	003fc406 	br	80046ac <__alt_data_end+0xfc0046ac>
 800479c:	49800515 	stw	r6,20(r9)
 80047a0:	49800415 	stw	r6,16(r9)
 80047a4:	10c00054 	ori	r3,r2,1
 80047a8:	31000315 	stw	r4,12(r6)
 80047ac:	31000215 	stw	r4,8(r6)
 80047b0:	30c00115 	stw	r3,4(r6)
 80047b4:	308d883a 	add	r6,r6,r2
 80047b8:	30800015 	stw	r2,0(r6)
 80047bc:	003fa006 	br	8004640 <__alt_data_end+0xfc004640>
 80047c0:	01001504 	movi	r4,84
 80047c4:	20c00436 	bltu	r4,r3,80047d8 <_free_r+0x2b4>
 80047c8:	1006d33a 	srli	r3,r2,12
 80047cc:	19401b84 	addi	r5,r3,110
 80047d0:	2947883a 	add	r3,r5,r5
 80047d4:	003fa706 	br	8004674 <__alt_data_end+0xfc004674>
 80047d8:	01005504 	movi	r4,340
 80047dc:	20c00436 	bltu	r4,r3,80047f0 <_free_r+0x2cc>
 80047e0:	1006d3fa 	srli	r3,r2,15
 80047e4:	19401dc4 	addi	r5,r3,119
 80047e8:	2947883a 	add	r3,r5,r5
 80047ec:	003fa106 	br	8004674 <__alt_data_end+0xfc004674>
 80047f0:	01015504 	movi	r4,1364
 80047f4:	20c00436 	bltu	r4,r3,8004808 <_free_r+0x2e4>
 80047f8:	1006d4ba 	srli	r3,r2,18
 80047fc:	19401f04 	addi	r5,r3,124
 8004800:	2947883a 	add	r3,r5,r5
 8004804:	003f9b06 	br	8004674 <__alt_data_end+0xfc004674>
 8004808:	00c03f04 	movi	r3,252
 800480c:	01401f84 	movi	r5,126
 8004810:	003f9806 	br	8004674 <__alt_data_end+0xfc004674>

08004814 <_fwalk>:
 8004814:	defff804 	addi	sp,sp,-32
 8004818:	dd400515 	stw	r21,20(sp)
 800481c:	2540b804 	addi	r21,r4,736
 8004820:	dd800615 	stw	r22,24(sp)
 8004824:	dd000415 	stw	r20,16(sp)
 8004828:	dfc00715 	stw	ra,28(sp)
 800482c:	dcc00315 	stw	r19,12(sp)
 8004830:	dc800215 	stw	r18,8(sp)
 8004834:	dc400115 	stw	r17,4(sp)
 8004838:	dc000015 	stw	r16,0(sp)
 800483c:	2829883a 	mov	r20,r5
 8004840:	002d883a 	mov	r22,zero
 8004844:	80043c00 	call	80043c0 <__sfp_lock_acquire>
 8004848:	a8001426 	beq	r21,zero,800489c <_fwalk+0x88>
 800484c:	04ffffc4 	movi	r19,-1
 8004850:	ac400117 	ldw	r17,4(r21)
 8004854:	ac800217 	ldw	r18,8(r21)
 8004858:	8c7fffc4 	addi	r17,r17,-1
 800485c:	88000d16 	blt	r17,zero,8004894 <_fwalk+0x80>
 8004860:	94000304 	addi	r16,r18,12
 8004864:	94800384 	addi	r18,r18,14
 8004868:	80c0000f 	ldh	r3,0(r16)
 800486c:	8c7fffc4 	addi	r17,r17,-1
 8004870:	813ffd04 	addi	r4,r16,-12
 8004874:	18000426 	beq	r3,zero,8004888 <_fwalk+0x74>
 8004878:	90c0000f 	ldh	r3,0(r18)
 800487c:	1cc00226 	beq	r3,r19,8004888 <_fwalk+0x74>
 8004880:	a03ee83a 	callr	r20
 8004884:	b0acb03a 	or	r22,r22,r2
 8004888:	84001a04 	addi	r16,r16,104
 800488c:	94801a04 	addi	r18,r18,104
 8004890:	8cfff51e 	bne	r17,r19,8004868 <__alt_data_end+0xfc004868>
 8004894:	ad400017 	ldw	r21,0(r21)
 8004898:	a83fed1e 	bne	r21,zero,8004850 <__alt_data_end+0xfc004850>
 800489c:	80043c40 	call	80043c4 <__sfp_lock_release>
 80048a0:	b005883a 	mov	r2,r22
 80048a4:	dfc00717 	ldw	ra,28(sp)
 80048a8:	dd800617 	ldw	r22,24(sp)
 80048ac:	dd400517 	ldw	r21,20(sp)
 80048b0:	dd000417 	ldw	r20,16(sp)
 80048b4:	dcc00317 	ldw	r19,12(sp)
 80048b8:	dc800217 	ldw	r18,8(sp)
 80048bc:	dc400117 	ldw	r17,4(sp)
 80048c0:	dc000017 	ldw	r16,0(sp)
 80048c4:	dec00804 	addi	sp,sp,32
 80048c8:	f800283a 	ret

080048cc <_fwalk_reent>:
 80048cc:	defff804 	addi	sp,sp,-32
 80048d0:	dd400515 	stw	r21,20(sp)
 80048d4:	2540b804 	addi	r21,r4,736
 80048d8:	dd800615 	stw	r22,24(sp)
 80048dc:	dd000415 	stw	r20,16(sp)
 80048e0:	dcc00315 	stw	r19,12(sp)
 80048e4:	dfc00715 	stw	ra,28(sp)
 80048e8:	dc800215 	stw	r18,8(sp)
 80048ec:	dc400115 	stw	r17,4(sp)
 80048f0:	dc000015 	stw	r16,0(sp)
 80048f4:	2027883a 	mov	r19,r4
 80048f8:	2829883a 	mov	r20,r5
 80048fc:	002d883a 	mov	r22,zero
 8004900:	80043c00 	call	80043c0 <__sfp_lock_acquire>
 8004904:	a8001326 	beq	r21,zero,8004954 <_fwalk_reent+0x88>
 8004908:	04bfffc4 	movi	r18,-1
 800490c:	ac400117 	ldw	r17,4(r21)
 8004910:	ac000217 	ldw	r16,8(r21)
 8004914:	8c7fffc4 	addi	r17,r17,-1
 8004918:	88000c16 	blt	r17,zero,800494c <_fwalk_reent+0x80>
 800491c:	84000304 	addi	r16,r16,12
 8004920:	80c0000f 	ldh	r3,0(r16)
 8004924:	8c7fffc4 	addi	r17,r17,-1
 8004928:	817ffd04 	addi	r5,r16,-12
 800492c:	18000526 	beq	r3,zero,8004944 <_fwalk_reent+0x78>
 8004930:	80c0008f 	ldh	r3,2(r16)
 8004934:	9809883a 	mov	r4,r19
 8004938:	1c800226 	beq	r3,r18,8004944 <_fwalk_reent+0x78>
 800493c:	a03ee83a 	callr	r20
 8004940:	b0acb03a 	or	r22,r22,r2
 8004944:	84001a04 	addi	r16,r16,104
 8004948:	8cbff51e 	bne	r17,r18,8004920 <__alt_data_end+0xfc004920>
 800494c:	ad400017 	ldw	r21,0(r21)
 8004950:	a83fee1e 	bne	r21,zero,800490c <__alt_data_end+0xfc00490c>
 8004954:	80043c40 	call	80043c4 <__sfp_lock_release>
 8004958:	b005883a 	mov	r2,r22
 800495c:	dfc00717 	ldw	ra,28(sp)
 8004960:	dd800617 	ldw	r22,24(sp)
 8004964:	dd400517 	ldw	r21,20(sp)
 8004968:	dd000417 	ldw	r20,16(sp)
 800496c:	dcc00317 	ldw	r19,12(sp)
 8004970:	dc800217 	ldw	r18,8(sp)
 8004974:	dc400117 	ldw	r17,4(sp)
 8004978:	dc000017 	ldw	r16,0(sp)
 800497c:	dec00804 	addi	sp,sp,32
 8004980:	f800283a 	ret

08004984 <_setlocale_r>:
 8004984:	30001b26 	beq	r6,zero,80049f4 <_setlocale_r+0x70>
 8004988:	01420074 	movhi	r5,2049
 800498c:	defffe04 	addi	sp,sp,-8
 8004990:	297cb404 	addi	r5,r5,-3376
 8004994:	3009883a 	mov	r4,r6
 8004998:	dc000015 	stw	r16,0(sp)
 800499c:	dfc00115 	stw	ra,4(sp)
 80049a0:	3021883a 	mov	r16,r6
 80049a4:	80068980 	call	8006898 <strcmp>
 80049a8:	1000061e 	bne	r2,zero,80049c4 <_setlocale_r+0x40>
 80049ac:	00820074 	movhi	r2,2049
 80049b0:	10bcb304 	addi	r2,r2,-3380
 80049b4:	dfc00117 	ldw	ra,4(sp)
 80049b8:	dc000017 	ldw	r16,0(sp)
 80049bc:	dec00204 	addi	sp,sp,8
 80049c0:	f800283a 	ret
 80049c4:	01420074 	movhi	r5,2049
 80049c8:	297cb304 	addi	r5,r5,-3380
 80049cc:	8009883a 	mov	r4,r16
 80049d0:	80068980 	call	8006898 <strcmp>
 80049d4:	103ff526 	beq	r2,zero,80049ac <__alt_data_end+0xfc0049ac>
 80049d8:	01420074 	movhi	r5,2049
 80049dc:	297c9e04 	addi	r5,r5,-3464
 80049e0:	8009883a 	mov	r4,r16
 80049e4:	80068980 	call	8006898 <strcmp>
 80049e8:	103ff026 	beq	r2,zero,80049ac <__alt_data_end+0xfc0049ac>
 80049ec:	0005883a 	mov	r2,zero
 80049f0:	003ff006 	br	80049b4 <__alt_data_end+0xfc0049b4>
 80049f4:	00820074 	movhi	r2,2049
 80049f8:	10bcb304 	addi	r2,r2,-3380
 80049fc:	f800283a 	ret

08004a00 <__locale_charset>:
 8004a00:	00820074 	movhi	r2,2049
 8004a04:	10be6c04 	addi	r2,r2,-1616
 8004a08:	f800283a 	ret

08004a0c <__locale_mb_cur_max>:
 8004a0c:	00820074 	movhi	r2,2049
 8004a10:	10841304 	addi	r2,r2,4172
 8004a14:	10800017 	ldw	r2,0(r2)
 8004a18:	f800283a 	ret

08004a1c <__locale_msgcharset>:
 8004a1c:	00820074 	movhi	r2,2049
 8004a20:	10be6404 	addi	r2,r2,-1648
 8004a24:	f800283a 	ret

08004a28 <__locale_cjk_lang>:
 8004a28:	0005883a 	mov	r2,zero
 8004a2c:	f800283a 	ret

08004a30 <_localeconv_r>:
 8004a30:	00820074 	movhi	r2,2049
 8004a34:	10be7404 	addi	r2,r2,-1584
 8004a38:	f800283a 	ret

08004a3c <setlocale>:
 8004a3c:	00c20074 	movhi	r3,2049
 8004a40:	18c41204 	addi	r3,r3,4168
 8004a44:	2005883a 	mov	r2,r4
 8004a48:	19000017 	ldw	r4,0(r3)
 8004a4c:	280d883a 	mov	r6,r5
 8004a50:	100b883a 	mov	r5,r2
 8004a54:	80049841 	jmpi	8004984 <_setlocale_r>

08004a58 <localeconv>:
 8004a58:	00820074 	movhi	r2,2049
 8004a5c:	10be7404 	addi	r2,r2,-1584
 8004a60:	f800283a 	ret

08004a64 <__smakebuf_r>:
 8004a64:	2880030b 	ldhu	r2,12(r5)
 8004a68:	10c0008c 	andi	r3,r2,2
 8004a6c:	1800401e 	bne	r3,zero,8004b70 <__smakebuf_r+0x10c>
 8004a70:	deffec04 	addi	sp,sp,-80
 8004a74:	dc000f15 	stw	r16,60(sp)
 8004a78:	2821883a 	mov	r16,r5
 8004a7c:	2940038f 	ldh	r5,14(r5)
 8004a80:	dc401015 	stw	r17,64(sp)
 8004a84:	dfc01315 	stw	ra,76(sp)
 8004a88:	dcc01215 	stw	r19,72(sp)
 8004a8c:	dc801115 	stw	r18,68(sp)
 8004a90:	2023883a 	mov	r17,r4
 8004a94:	28001b16 	blt	r5,zero,8004b04 <__smakebuf_r+0xa0>
 8004a98:	d80d883a 	mov	r6,sp
 8004a9c:	80082cc0 	call	80082cc <_fstat_r>
 8004aa0:	10001716 	blt	r2,zero,8004b00 <__smakebuf_r+0x9c>
 8004aa4:	d8800117 	ldw	r2,4(sp)
 8004aa8:	00e00014 	movui	r3,32768
 8004aac:	10bc000c 	andi	r2,r2,61440
 8004ab0:	10c03726 	beq	r2,r3,8004b90 <__smakebuf_r+0x12c>
 8004ab4:	80c0030b 	ldhu	r3,12(r16)
 8004ab8:	18c20014 	ori	r3,r3,2048
 8004abc:	80c0030d 	sth	r3,12(r16)
 8004ac0:	00c80004 	movi	r3,8192
 8004ac4:	10c03c1e 	bne	r2,r3,8004bb8 <__smakebuf_r+0x154>
 8004ac8:	8140038f 	ldh	r5,14(r16)
 8004acc:	8809883a 	mov	r4,r17
 8004ad0:	80087c80 	call	80087c8 <_isatty_r>
 8004ad4:	10004e26 	beq	r2,zero,8004c10 <__smakebuf_r+0x1ac>
 8004ad8:	8080030b 	ldhu	r2,12(r16)
 8004adc:	04c00044 	movi	r19,1
 8004ae0:	80c010c4 	addi	r3,r16,67
 8004ae4:	14c4b03a 	or	r2,r2,r19
 8004ae8:	8080030d 	sth	r2,12(r16)
 8004aec:	80c00015 	stw	r3,0(r16)
 8004af0:	80c00415 	stw	r3,16(r16)
 8004af4:	84c00515 	stw	r19,20(r16)
 8004af8:	04810004 	movi	r18,1024
 8004afc:	00000706 	br	8004b1c <__smakebuf_r+0xb8>
 8004b00:	8080030b 	ldhu	r2,12(r16)
 8004b04:	10c0200c 	andi	r3,r2,128
 8004b08:	18001f1e 	bne	r3,zero,8004b88 <__smakebuf_r+0x124>
 8004b0c:	04810004 	movi	r18,1024
 8004b10:	10820014 	ori	r2,r2,2048
 8004b14:	8080030d 	sth	r2,12(r16)
 8004b18:	0027883a 	mov	r19,zero
 8004b1c:	8809883a 	mov	r4,r17
 8004b20:	900b883a 	mov	r5,r18
 8004b24:	8004c1c0 	call	8004c1c <_malloc_r>
 8004b28:	10002e26 	beq	r2,zero,8004be4 <__smakebuf_r+0x180>
 8004b2c:	80c0030b 	ldhu	r3,12(r16)
 8004b30:	01020034 	movhi	r4,2048
 8004b34:	21101c04 	addi	r4,r4,16496
 8004b38:	89000f15 	stw	r4,60(r17)
 8004b3c:	18c02014 	ori	r3,r3,128
 8004b40:	80c0030d 	sth	r3,12(r16)
 8004b44:	80800015 	stw	r2,0(r16)
 8004b48:	80800415 	stw	r2,16(r16)
 8004b4c:	84800515 	stw	r18,20(r16)
 8004b50:	98001c1e 	bne	r19,zero,8004bc4 <__smakebuf_r+0x160>
 8004b54:	dfc01317 	ldw	ra,76(sp)
 8004b58:	dcc01217 	ldw	r19,72(sp)
 8004b5c:	dc801117 	ldw	r18,68(sp)
 8004b60:	dc401017 	ldw	r17,64(sp)
 8004b64:	dc000f17 	ldw	r16,60(sp)
 8004b68:	dec01404 	addi	sp,sp,80
 8004b6c:	f800283a 	ret
 8004b70:	288010c4 	addi	r2,r5,67
 8004b74:	28800015 	stw	r2,0(r5)
 8004b78:	28800415 	stw	r2,16(r5)
 8004b7c:	00800044 	movi	r2,1
 8004b80:	28800515 	stw	r2,20(r5)
 8004b84:	f800283a 	ret
 8004b88:	04801004 	movi	r18,64
 8004b8c:	003fe006 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004b90:	81000a17 	ldw	r4,40(r16)
 8004b94:	00c20034 	movhi	r3,2048
 8004b98:	18da0d04 	addi	r3,r3,26676
 8004b9c:	20ffc51e 	bne	r4,r3,8004ab4 <__alt_data_end+0xfc004ab4>
 8004ba0:	80c0030b 	ldhu	r3,12(r16)
 8004ba4:	01010004 	movi	r4,1024
 8004ba8:	81001315 	stw	r4,76(r16)
 8004bac:	1906b03a 	or	r3,r3,r4
 8004bb0:	80c0030d 	sth	r3,12(r16)
 8004bb4:	003fc206 	br	8004ac0 <__alt_data_end+0xfc004ac0>
 8004bb8:	0027883a 	mov	r19,zero
 8004bbc:	04810004 	movi	r18,1024
 8004bc0:	003fd606 	br	8004b1c <__alt_data_end+0xfc004b1c>
 8004bc4:	8140038f 	ldh	r5,14(r16)
 8004bc8:	8809883a 	mov	r4,r17
 8004bcc:	80087c80 	call	80087c8 <_isatty_r>
 8004bd0:	103fe026 	beq	r2,zero,8004b54 <__alt_data_end+0xfc004b54>
 8004bd4:	8080030b 	ldhu	r2,12(r16)
 8004bd8:	10800054 	ori	r2,r2,1
 8004bdc:	8080030d 	sth	r2,12(r16)
 8004be0:	003fdc06 	br	8004b54 <__alt_data_end+0xfc004b54>
 8004be4:	8080030b 	ldhu	r2,12(r16)
 8004be8:	10c0800c 	andi	r3,r2,512
 8004bec:	183fd91e 	bne	r3,zero,8004b54 <__alt_data_end+0xfc004b54>
 8004bf0:	10800094 	ori	r2,r2,2
 8004bf4:	80c010c4 	addi	r3,r16,67
 8004bf8:	8080030d 	sth	r2,12(r16)
 8004bfc:	00800044 	movi	r2,1
 8004c00:	80c00015 	stw	r3,0(r16)
 8004c04:	80c00415 	stw	r3,16(r16)
 8004c08:	80800515 	stw	r2,20(r16)
 8004c0c:	003fd106 	br	8004b54 <__alt_data_end+0xfc004b54>
 8004c10:	04c00044 	movi	r19,1
 8004c14:	04810004 	movi	r18,1024
 8004c18:	003fc006 	br	8004b1c <__alt_data_end+0xfc004b1c>

08004c1c <_malloc_r>:
 8004c1c:	defff504 	addi	sp,sp,-44
 8004c20:	dc800315 	stw	r18,12(sp)
 8004c24:	dfc00a15 	stw	ra,40(sp)
 8004c28:	df000915 	stw	fp,36(sp)
 8004c2c:	ddc00815 	stw	r23,32(sp)
 8004c30:	dd800715 	stw	r22,28(sp)
 8004c34:	dd400615 	stw	r21,24(sp)
 8004c38:	dd000515 	stw	r20,20(sp)
 8004c3c:	dcc00415 	stw	r19,16(sp)
 8004c40:	dc400215 	stw	r17,8(sp)
 8004c44:	dc000115 	stw	r16,4(sp)
 8004c48:	288002c4 	addi	r2,r5,11
 8004c4c:	00c00584 	movi	r3,22
 8004c50:	2025883a 	mov	r18,r4
 8004c54:	18802a2e 	bgeu	r3,r2,8004d00 <_malloc_r+0xe4>
 8004c58:	047ffe04 	movi	r17,-8
 8004c5c:	1462703a 	and	r17,r2,r17
 8004c60:	88009e16 	blt	r17,zero,8004edc <_malloc_r+0x2c0>
 8004c64:	89409d36 	bltu	r17,r5,8004edc <_malloc_r+0x2c0>
 8004c68:	800cb7c0 	call	800cb7c <__malloc_lock>
 8004c6c:	00807dc4 	movi	r2,503
 8004c70:	14402736 	bltu	r2,r17,8004d10 <_malloc_r+0xf4>
 8004c74:	8806d0fa 	srli	r3,r17,3
 8004c78:	04c20074 	movhi	r19,2049
 8004c7c:	9cfe8204 	addi	r19,r19,-1528
 8004c80:	18c5883a 	add	r2,r3,r3
 8004c84:	1085883a 	add	r2,r2,r2
 8004c88:	1085883a 	add	r2,r2,r2
 8004c8c:	9885883a 	add	r2,r19,r2
 8004c90:	14000317 	ldw	r16,12(r2)
 8004c94:	80814a26 	beq	r16,r2,80051c0 <_malloc_r+0x5a4>
 8004c98:	80c00117 	ldw	r3,4(r16)
 8004c9c:	81000317 	ldw	r4,12(r16)
 8004ca0:	00bfff04 	movi	r2,-4
 8004ca4:	1884703a 	and	r2,r3,r2
 8004ca8:	81400217 	ldw	r5,8(r16)
 8004cac:	8085883a 	add	r2,r16,r2
 8004cb0:	10c00117 	ldw	r3,4(r2)
 8004cb4:	29000315 	stw	r4,12(r5)
 8004cb8:	21400215 	stw	r5,8(r4)
 8004cbc:	18c00054 	ori	r3,r3,1
 8004cc0:	10c00115 	stw	r3,4(r2)
 8004cc4:	9009883a 	mov	r4,r18
 8004cc8:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8004ccc:	80800204 	addi	r2,r16,8
 8004cd0:	dfc00a17 	ldw	ra,40(sp)
 8004cd4:	df000917 	ldw	fp,36(sp)
 8004cd8:	ddc00817 	ldw	r23,32(sp)
 8004cdc:	dd800717 	ldw	r22,28(sp)
 8004ce0:	dd400617 	ldw	r21,24(sp)
 8004ce4:	dd000517 	ldw	r20,20(sp)
 8004ce8:	dcc00417 	ldw	r19,16(sp)
 8004cec:	dc800317 	ldw	r18,12(sp)
 8004cf0:	dc400217 	ldw	r17,8(sp)
 8004cf4:	dc000117 	ldw	r16,4(sp)
 8004cf8:	dec00b04 	addi	sp,sp,44
 8004cfc:	f800283a 	ret
 8004d00:	04400404 	movi	r17,16
 8004d04:	89407536 	bltu	r17,r5,8004edc <_malloc_r+0x2c0>
 8004d08:	800cb7c0 	call	800cb7c <__malloc_lock>
 8004d0c:	003fd906 	br	8004c74 <__alt_data_end+0xfc004c74>
 8004d10:	8806d27a 	srli	r3,r17,9
 8004d14:	18007526 	beq	r3,zero,8004eec <_malloc_r+0x2d0>
 8004d18:	00800104 	movi	r2,4
 8004d1c:	10c0ef36 	bltu	r2,r3,80050dc <_malloc_r+0x4c0>
 8004d20:	8806d1ba 	srli	r3,r17,6
 8004d24:	19c00e04 	addi	r7,r3,56
 8004d28:	39cb883a 	add	r5,r7,r7
 8004d2c:	04c20074 	movhi	r19,2049
 8004d30:	294b883a 	add	r5,r5,r5
 8004d34:	9cfe8204 	addi	r19,r19,-1528
 8004d38:	294b883a 	add	r5,r5,r5
 8004d3c:	994b883a 	add	r5,r19,r5
 8004d40:	2c000317 	ldw	r16,12(r5)
 8004d44:	2c000e26 	beq	r5,r16,8004d80 <_malloc_r+0x164>
 8004d48:	80800117 	ldw	r2,4(r16)
 8004d4c:	01bfff04 	movi	r6,-4
 8004d50:	010003c4 	movi	r4,15
 8004d54:	1184703a 	and	r2,r2,r6
 8004d58:	1447c83a 	sub	r3,r2,r17
 8004d5c:	20c00716 	blt	r4,r3,8004d7c <_malloc_r+0x160>
 8004d60:	1800650e 	bge	r3,zero,8004ef8 <_malloc_r+0x2dc>
 8004d64:	84000317 	ldw	r16,12(r16)
 8004d68:	2c000526 	beq	r5,r16,8004d80 <_malloc_r+0x164>
 8004d6c:	80800117 	ldw	r2,4(r16)
 8004d70:	1184703a 	and	r2,r2,r6
 8004d74:	1447c83a 	sub	r3,r2,r17
 8004d78:	20fff90e 	bge	r4,r3,8004d60 <__alt_data_end+0xfc004d60>
 8004d7c:	39ffffc4 	addi	r7,r7,-1
 8004d80:	38c00044 	addi	r3,r7,1
 8004d84:	01820074 	movhi	r6,2049
 8004d88:	9c000417 	ldw	r16,16(r19)
 8004d8c:	31be8204 	addi	r6,r6,-1528
 8004d90:	32400204 	addi	r9,r6,8
 8004d94:	82410326 	beq	r16,r9,80051a4 <_malloc_r+0x588>
 8004d98:	81000117 	ldw	r4,4(r16)
 8004d9c:	00bfff04 	movi	r2,-4
 8004da0:	208e703a 	and	r7,r4,r2
 8004da4:	3c45c83a 	sub	r2,r7,r17
 8004da8:	010003c4 	movi	r4,15
 8004dac:	2080ee16 	blt	r4,r2,8005168 <_malloc_r+0x54c>
 8004db0:	32400515 	stw	r9,20(r6)
 8004db4:	32400415 	stw	r9,16(r6)
 8004db8:	1000510e 	bge	r2,zero,8004f00 <_malloc_r+0x2e4>
 8004dbc:	00807fc4 	movi	r2,511
 8004dc0:	11c0ce36 	bltu	r2,r7,80050fc <_malloc_r+0x4e0>
 8004dc4:	3808d0fa 	srli	r4,r7,3
 8004dc8:	01c00044 	movi	r7,1
 8004dcc:	30800117 	ldw	r2,4(r6)
 8004dd0:	210b883a 	add	r5,r4,r4
 8004dd4:	294b883a 	add	r5,r5,r5
 8004dd8:	2009d0ba 	srai	r4,r4,2
 8004ddc:	294b883a 	add	r5,r5,r5
 8004de0:	298b883a 	add	r5,r5,r6
 8004de4:	2a000217 	ldw	r8,8(r5)
 8004de8:	3908983a 	sll	r4,r7,r4
 8004dec:	81400315 	stw	r5,12(r16)
 8004df0:	82000215 	stw	r8,8(r16)
 8004df4:	2088b03a 	or	r4,r4,r2
 8004df8:	2c000215 	stw	r16,8(r5)
 8004dfc:	31000115 	stw	r4,4(r6)
 8004e00:	44000315 	stw	r16,12(r8)
 8004e04:	1805d0ba 	srai	r2,r3,2
 8004e08:	01400044 	movi	r5,1
 8004e0c:	288a983a 	sll	r5,r5,r2
 8004e10:	21404336 	bltu	r4,r5,8004f20 <_malloc_r+0x304>
 8004e14:	2144703a 	and	r2,r4,r5
 8004e18:	10000a1e 	bne	r2,zero,8004e44 <_malloc_r+0x228>
 8004e1c:	00bfff04 	movi	r2,-4
 8004e20:	294b883a 	add	r5,r5,r5
 8004e24:	1886703a 	and	r3,r3,r2
 8004e28:	2144703a 	and	r2,r4,r5
 8004e2c:	18c00104 	addi	r3,r3,4
 8004e30:	1000041e 	bne	r2,zero,8004e44 <_malloc_r+0x228>
 8004e34:	294b883a 	add	r5,r5,r5
 8004e38:	2144703a 	and	r2,r4,r5
 8004e3c:	18c00104 	addi	r3,r3,4
 8004e40:	103ffc26 	beq	r2,zero,8004e34 <__alt_data_end+0xfc004e34>
 8004e44:	023fff04 	movi	r8,-4
 8004e48:	01c003c4 	movi	r7,15
 8004e4c:	18c5883a 	add	r2,r3,r3
 8004e50:	1085883a 	add	r2,r2,r2
 8004e54:	1085883a 	add	r2,r2,r2
 8004e58:	9895883a 	add	r10,r19,r2
 8004e5c:	52c00304 	addi	r11,r10,12
 8004e60:	1819883a 	mov	r12,r3
 8004e64:	5c000017 	ldw	r16,0(r11)
 8004e68:	59bffd04 	addi	r6,r11,-12
 8004e6c:	8180041e 	bne	r16,r6,8004e80 <_malloc_r+0x264>
 8004e70:	0000ce06 	br	80051ac <_malloc_r+0x590>
 8004e74:	2000d70e 	bge	r4,zero,80051d4 <_malloc_r+0x5b8>
 8004e78:	84000317 	ldw	r16,12(r16)
 8004e7c:	8180cb26 	beq	r16,r6,80051ac <_malloc_r+0x590>
 8004e80:	80800117 	ldw	r2,4(r16)
 8004e84:	1204703a 	and	r2,r2,r8
 8004e88:	1449c83a 	sub	r4,r2,r17
 8004e8c:	393ff90e 	bge	r7,r4,8004e74 <__alt_data_end+0xfc004e74>
 8004e90:	80800317 	ldw	r2,12(r16)
 8004e94:	80c00217 	ldw	r3,8(r16)
 8004e98:	89400054 	ori	r5,r17,1
 8004e9c:	81400115 	stw	r5,4(r16)
 8004ea0:	18800315 	stw	r2,12(r3)
 8004ea4:	10c00215 	stw	r3,8(r2)
 8004ea8:	8463883a 	add	r17,r16,r17
 8004eac:	9c400515 	stw	r17,20(r19)
 8004eb0:	9c400415 	stw	r17,16(r19)
 8004eb4:	20800054 	ori	r2,r4,1
 8004eb8:	88800115 	stw	r2,4(r17)
 8004ebc:	8a400315 	stw	r9,12(r17)
 8004ec0:	8a400215 	stw	r9,8(r17)
 8004ec4:	8923883a 	add	r17,r17,r4
 8004ec8:	89000015 	stw	r4,0(r17)
 8004ecc:	9009883a 	mov	r4,r18
 8004ed0:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8004ed4:	80800204 	addi	r2,r16,8
 8004ed8:	003f7d06 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 8004edc:	00800304 	movi	r2,12
 8004ee0:	90800015 	stw	r2,0(r18)
 8004ee4:	0005883a 	mov	r2,zero
 8004ee8:	003f7906 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 8004eec:	01401f84 	movi	r5,126
 8004ef0:	01c00fc4 	movi	r7,63
 8004ef4:	003f8d06 	br	8004d2c <__alt_data_end+0xfc004d2c>
 8004ef8:	81000317 	ldw	r4,12(r16)
 8004efc:	003f6a06 	br	8004ca8 <__alt_data_end+0xfc004ca8>
 8004f00:	81c5883a 	add	r2,r16,r7
 8004f04:	10c00117 	ldw	r3,4(r2)
 8004f08:	9009883a 	mov	r4,r18
 8004f0c:	18c00054 	ori	r3,r3,1
 8004f10:	10c00115 	stw	r3,4(r2)
 8004f14:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8004f18:	80800204 	addi	r2,r16,8
 8004f1c:	003f6c06 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 8004f20:	9c000217 	ldw	r16,8(r19)
 8004f24:	00bfff04 	movi	r2,-4
 8004f28:	85800117 	ldw	r22,4(r16)
 8004f2c:	b0ac703a 	and	r22,r22,r2
 8004f30:	b4400336 	bltu	r22,r17,8004f40 <_malloc_r+0x324>
 8004f34:	b445c83a 	sub	r2,r22,r17
 8004f38:	00c003c4 	movi	r3,15
 8004f3c:	18805d16 	blt	r3,r2,80050b4 <_malloc_r+0x498>
 8004f40:	05c20074 	movhi	r23,2049
 8004f44:	00820074 	movhi	r2,2049
 8004f48:	bdc41404 	addi	r23,r23,4176
 8004f4c:	108aec04 	addi	r2,r2,11184
 8004f50:	15400017 	ldw	r21,0(r2)
 8004f54:	b9000017 	ldw	r4,0(r23)
 8004f58:	00ffffc4 	movi	r3,-1
 8004f5c:	858d883a 	add	r6,r16,r22
 8004f60:	8d6b883a 	add	r21,r17,r21
 8004f64:	20c0e426 	beq	r4,r3,80052f8 <_malloc_r+0x6dc>
 8004f68:	ad4403c4 	addi	r21,r21,4111
 8004f6c:	00fc0004 	movi	r3,-4096
 8004f70:	a8ea703a 	and	r21,r21,r3
 8004f74:	9009883a 	mov	r4,r18
 8004f78:	a80b883a 	mov	r5,r21
 8004f7c:	d9800015 	stw	r6,0(sp)
 8004f80:	80067080 	call	8006708 <_sbrk_r>
 8004f84:	00ffffc4 	movi	r3,-1
 8004f88:	1029883a 	mov	r20,r2
 8004f8c:	d9800017 	ldw	r6,0(sp)
 8004f90:	10c0a426 	beq	r2,r3,8005224 <_malloc_r+0x608>
 8004f94:	1180a236 	bltu	r2,r6,8005220 <_malloc_r+0x604>
 8004f98:	07020074 	movhi	fp,2049
 8004f9c:	e70af404 	addi	fp,fp,11216
 8004fa0:	e0c00017 	ldw	r3,0(fp)
 8004fa4:	a8c7883a 	add	r3,r21,r3
 8004fa8:	e0c00015 	stw	r3,0(fp)
 8004fac:	3500da26 	beq	r6,r20,8005318 <_malloc_r+0x6fc>
 8004fb0:	b9000017 	ldw	r4,0(r23)
 8004fb4:	00bfffc4 	movi	r2,-1
 8004fb8:	2080e426 	beq	r4,r2,800534c <_malloc_r+0x730>
 8004fbc:	a185c83a 	sub	r2,r20,r6
 8004fc0:	1885883a 	add	r2,r3,r2
 8004fc4:	e0800015 	stw	r2,0(fp)
 8004fc8:	a0c001cc 	andi	r3,r20,7
 8004fcc:	1800b526 	beq	r3,zero,80052a4 <_malloc_r+0x688>
 8004fd0:	a0e9c83a 	sub	r20,r20,r3
 8004fd4:	00840204 	movi	r2,4104
 8004fd8:	a5000204 	addi	r20,r20,8
 8004fdc:	10c7c83a 	sub	r3,r2,r3
 8004fe0:	a545883a 	add	r2,r20,r21
 8004fe4:	1083ffcc 	andi	r2,r2,4095
 8004fe8:	18abc83a 	sub	r21,r3,r2
 8004fec:	9009883a 	mov	r4,r18
 8004ff0:	a80b883a 	mov	r5,r21
 8004ff4:	80067080 	call	8006708 <_sbrk_r>
 8004ff8:	00ffffc4 	movi	r3,-1
 8004ffc:	10c0d026 	beq	r2,r3,8005340 <_malloc_r+0x724>
 8005000:	1507c83a 	sub	r3,r2,r20
 8005004:	a8c7883a 	add	r3,r21,r3
 8005008:	18c00054 	ori	r3,r3,1
 800500c:	e0800017 	ldw	r2,0(fp)
 8005010:	9d000215 	stw	r20,8(r19)
 8005014:	a0c00115 	stw	r3,4(r20)
 8005018:	a887883a 	add	r3,r21,r2
 800501c:	e0c00015 	stw	r3,0(fp)
 8005020:	84c00e26 	beq	r16,r19,800505c <_malloc_r+0x440>
 8005024:	018003c4 	movi	r6,15
 8005028:	3580a02e 	bgeu	r6,r22,80052ac <_malloc_r+0x690>
 800502c:	81400117 	ldw	r5,4(r16)
 8005030:	013ffe04 	movi	r4,-8
 8005034:	b0bffd04 	addi	r2,r22,-12
 8005038:	1104703a 	and	r2,r2,r4
 800503c:	2900004c 	andi	r4,r5,1
 8005040:	1108b03a 	or	r4,r2,r4
 8005044:	81000115 	stw	r4,4(r16)
 8005048:	01400144 	movi	r5,5
 800504c:	8089883a 	add	r4,r16,r2
 8005050:	21400115 	stw	r5,4(r4)
 8005054:	21400215 	stw	r5,8(r4)
 8005058:	3080c036 	bltu	r6,r2,800535c <_malloc_r+0x740>
 800505c:	00820074 	movhi	r2,2049
 8005060:	108aeb04 	addi	r2,r2,11180
 8005064:	11000017 	ldw	r4,0(r2)
 8005068:	20c0012e 	bgeu	r4,r3,8005070 <_malloc_r+0x454>
 800506c:	10c00015 	stw	r3,0(r2)
 8005070:	00820074 	movhi	r2,2049
 8005074:	108aea04 	addi	r2,r2,11176
 8005078:	11000017 	ldw	r4,0(r2)
 800507c:	9c000217 	ldw	r16,8(r19)
 8005080:	20c0012e 	bgeu	r4,r3,8005088 <_malloc_r+0x46c>
 8005084:	10c00015 	stw	r3,0(r2)
 8005088:	80c00117 	ldw	r3,4(r16)
 800508c:	00bfff04 	movi	r2,-4
 8005090:	1886703a 	and	r3,r3,r2
 8005094:	1c45c83a 	sub	r2,r3,r17
 8005098:	1c400236 	bltu	r3,r17,80050a4 <_malloc_r+0x488>
 800509c:	00c003c4 	movi	r3,15
 80050a0:	18800416 	blt	r3,r2,80050b4 <_malloc_r+0x498>
 80050a4:	9009883a 	mov	r4,r18
 80050a8:	800cb9c0 	call	800cb9c <__malloc_unlock>
 80050ac:	0005883a 	mov	r2,zero
 80050b0:	003f0706 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 80050b4:	88c00054 	ori	r3,r17,1
 80050b8:	80c00115 	stw	r3,4(r16)
 80050bc:	8463883a 	add	r17,r16,r17
 80050c0:	10800054 	ori	r2,r2,1
 80050c4:	9c400215 	stw	r17,8(r19)
 80050c8:	88800115 	stw	r2,4(r17)
 80050cc:	9009883a 	mov	r4,r18
 80050d0:	800cb9c0 	call	800cb9c <__malloc_unlock>
 80050d4:	80800204 	addi	r2,r16,8
 80050d8:	003efd06 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 80050dc:	00800504 	movi	r2,20
 80050e0:	10c0482e 	bgeu	r2,r3,8005204 <_malloc_r+0x5e8>
 80050e4:	00801504 	movi	r2,84
 80050e8:	10c06836 	bltu	r2,r3,800528c <_malloc_r+0x670>
 80050ec:	8806d33a 	srli	r3,r17,12
 80050f0:	19c01b84 	addi	r7,r3,110
 80050f4:	39cb883a 	add	r5,r7,r7
 80050f8:	003f0c06 	br	8004d2c <__alt_data_end+0xfc004d2c>
 80050fc:	3804d27a 	srli	r2,r7,9
 8005100:	01000104 	movi	r4,4
 8005104:	2080422e 	bgeu	r4,r2,8005210 <_malloc_r+0x5f4>
 8005108:	01000504 	movi	r4,20
 800510c:	20807c36 	bltu	r4,r2,8005300 <_malloc_r+0x6e4>
 8005110:	110016c4 	addi	r4,r2,91
 8005114:	210b883a 	add	r5,r4,r4
 8005118:	294b883a 	add	r5,r5,r5
 800511c:	294b883a 	add	r5,r5,r5
 8005120:	994b883a 	add	r5,r19,r5
 8005124:	28800217 	ldw	r2,8(r5)
 8005128:	02020074 	movhi	r8,2049
 800512c:	423e8204 	addi	r8,r8,-1528
 8005130:	11406326 	beq	r2,r5,80052c0 <_malloc_r+0x6a4>
 8005134:	01bfff04 	movi	r6,-4
 8005138:	11000117 	ldw	r4,4(r2)
 800513c:	2188703a 	and	r4,r4,r6
 8005140:	3900022e 	bgeu	r7,r4,800514c <_malloc_r+0x530>
 8005144:	10800217 	ldw	r2,8(r2)
 8005148:	28bffb1e 	bne	r5,r2,8005138 <__alt_data_end+0xfc005138>
 800514c:	11800317 	ldw	r6,12(r2)
 8005150:	99000117 	ldw	r4,4(r19)
 8005154:	81800315 	stw	r6,12(r16)
 8005158:	80800215 	stw	r2,8(r16)
 800515c:	34000215 	stw	r16,8(r6)
 8005160:	14000315 	stw	r16,12(r2)
 8005164:	003f2706 	br	8004e04 <__alt_data_end+0xfc004e04>
 8005168:	88c00054 	ori	r3,r17,1
 800516c:	80c00115 	stw	r3,4(r16)
 8005170:	8463883a 	add	r17,r16,r17
 8005174:	34400515 	stw	r17,20(r6)
 8005178:	34400415 	stw	r17,16(r6)
 800517c:	10c00054 	ori	r3,r2,1
 8005180:	8a400315 	stw	r9,12(r17)
 8005184:	8a400215 	stw	r9,8(r17)
 8005188:	88c00115 	stw	r3,4(r17)
 800518c:	88a3883a 	add	r17,r17,r2
 8005190:	88800015 	stw	r2,0(r17)
 8005194:	9009883a 	mov	r4,r18
 8005198:	800cb9c0 	call	800cb9c <__malloc_unlock>
 800519c:	80800204 	addi	r2,r16,8
 80051a0:	003ecb06 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 80051a4:	31000117 	ldw	r4,4(r6)
 80051a8:	003f1606 	br	8004e04 <__alt_data_end+0xfc004e04>
 80051ac:	63000044 	addi	r12,r12,1
 80051b0:	608000cc 	andi	r2,r12,3
 80051b4:	5ac00204 	addi	r11,r11,8
 80051b8:	103f2a1e 	bne	r2,zero,8004e64 <__alt_data_end+0xfc004e64>
 80051bc:	00002106 	br	8005244 <_malloc_r+0x628>
 80051c0:	80800204 	addi	r2,r16,8
 80051c4:	84000517 	ldw	r16,20(r16)
 80051c8:	143eb31e 	bne	r2,r16,8004c98 <__alt_data_end+0xfc004c98>
 80051cc:	18c00084 	addi	r3,r3,2
 80051d0:	003eec06 	br	8004d84 <__alt_data_end+0xfc004d84>
 80051d4:	8085883a 	add	r2,r16,r2
 80051d8:	10c00117 	ldw	r3,4(r2)
 80051dc:	81000317 	ldw	r4,12(r16)
 80051e0:	81400217 	ldw	r5,8(r16)
 80051e4:	18c00054 	ori	r3,r3,1
 80051e8:	10c00115 	stw	r3,4(r2)
 80051ec:	29000315 	stw	r4,12(r5)
 80051f0:	21400215 	stw	r5,8(r4)
 80051f4:	9009883a 	mov	r4,r18
 80051f8:	800cb9c0 	call	800cb9c <__malloc_unlock>
 80051fc:	80800204 	addi	r2,r16,8
 8005200:	003eb306 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 8005204:	19c016c4 	addi	r7,r3,91
 8005208:	39cb883a 	add	r5,r7,r7
 800520c:	003ec706 	br	8004d2c <__alt_data_end+0xfc004d2c>
 8005210:	3804d1ba 	srli	r2,r7,6
 8005214:	11000e04 	addi	r4,r2,56
 8005218:	210b883a 	add	r5,r4,r4
 800521c:	003fbe06 	br	8005118 <__alt_data_end+0xfc005118>
 8005220:	84ff5d26 	beq	r16,r19,8004f98 <__alt_data_end+0xfc004f98>
 8005224:	9c000217 	ldw	r16,8(r19)
 8005228:	00bfff04 	movi	r2,-4
 800522c:	80c00117 	ldw	r3,4(r16)
 8005230:	1886703a 	and	r3,r3,r2
 8005234:	003f9706 	br	8005094 <__alt_data_end+0xfc005094>
 8005238:	52800017 	ldw	r10,0(r10)
 800523c:	18ffffc4 	addi	r3,r3,-1
 8005240:	50805c1e 	bne	r10,r2,80053b4 <_malloc_r+0x798>
 8005244:	190000cc 	andi	r4,r3,3
 8005248:	50bffe04 	addi	r2,r10,-8
 800524c:	203ffa1e 	bne	r4,zero,8005238 <__alt_data_end+0xfc005238>
 8005250:	98800117 	ldw	r2,4(r19)
 8005254:	0146303a 	nor	r3,zero,r5
 8005258:	1884703a 	and	r2,r3,r2
 800525c:	98800115 	stw	r2,4(r19)
 8005260:	294b883a 	add	r5,r5,r5
 8005264:	117f2e36 	bltu	r2,r5,8004f20 <__alt_data_end+0xfc004f20>
 8005268:	283f2d26 	beq	r5,zero,8004f20 <__alt_data_end+0xfc004f20>
 800526c:	1146703a 	and	r3,r2,r5
 8005270:	1800521e 	bne	r3,zero,80053bc <_malloc_r+0x7a0>
 8005274:	6007883a 	mov	r3,r12
 8005278:	294b883a 	add	r5,r5,r5
 800527c:	1148703a 	and	r4,r2,r5
 8005280:	18c00104 	addi	r3,r3,4
 8005284:	203ffc26 	beq	r4,zero,8005278 <__alt_data_end+0xfc005278>
 8005288:	003ef006 	br	8004e4c <__alt_data_end+0xfc004e4c>
 800528c:	00805504 	movi	r2,340
 8005290:	10c01336 	bltu	r2,r3,80052e0 <_malloc_r+0x6c4>
 8005294:	8806d3fa 	srli	r3,r17,15
 8005298:	19c01dc4 	addi	r7,r3,119
 800529c:	39cb883a 	add	r5,r7,r7
 80052a0:	003ea206 	br	8004d2c <__alt_data_end+0xfc004d2c>
 80052a4:	00c40004 	movi	r3,4096
 80052a8:	003f4d06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 80052ac:	00800044 	movi	r2,1
 80052b0:	a0800115 	stw	r2,4(r20)
 80052b4:	a021883a 	mov	r16,r20
 80052b8:	0007883a 	mov	r3,zero
 80052bc:	003f7506 	br	8005094 <__alt_data_end+0xfc005094>
 80052c0:	200bd0ba 	srai	r5,r4,2
 80052c4:	01800044 	movi	r6,1
 80052c8:	41000117 	ldw	r4,4(r8)
 80052cc:	314a983a 	sll	r5,r6,r5
 80052d0:	100d883a 	mov	r6,r2
 80052d4:	2908b03a 	or	r4,r5,r4
 80052d8:	41000115 	stw	r4,4(r8)
 80052dc:	003f9d06 	br	8005154 <__alt_data_end+0xfc005154>
 80052e0:	00815504 	movi	r2,1364
 80052e4:	10c01336 	bltu	r2,r3,8005334 <_malloc_r+0x718>
 80052e8:	8806d4ba 	srli	r3,r17,18
 80052ec:	19c01f04 	addi	r7,r3,124
 80052f0:	39cb883a 	add	r5,r7,r7
 80052f4:	003e8d06 	br	8004d2c <__alt_data_end+0xfc004d2c>
 80052f8:	ad400404 	addi	r21,r21,16
 80052fc:	003f1d06 	br	8004f74 <__alt_data_end+0xfc004f74>
 8005300:	01001504 	movi	r4,84
 8005304:	20801c36 	bltu	r4,r2,8005378 <_malloc_r+0x75c>
 8005308:	3804d33a 	srli	r2,r7,12
 800530c:	11001b84 	addi	r4,r2,110
 8005310:	210b883a 	add	r5,r4,r4
 8005314:	003f8006 	br	8005118 <__alt_data_end+0xfc005118>
 8005318:	3083ffcc 	andi	r2,r6,4095
 800531c:	103f241e 	bne	r2,zero,8004fb0 <__alt_data_end+0xfc004fb0>
 8005320:	99000217 	ldw	r4,8(r19)
 8005324:	ad85883a 	add	r2,r21,r22
 8005328:	10800054 	ori	r2,r2,1
 800532c:	20800115 	stw	r2,4(r4)
 8005330:	003f4a06 	br	800505c <__alt_data_end+0xfc00505c>
 8005334:	01403f04 	movi	r5,252
 8005338:	01c01f84 	movi	r7,126
 800533c:	003e7b06 	br	8004d2c <__alt_data_end+0xfc004d2c>
 8005340:	00c00044 	movi	r3,1
 8005344:	002b883a 	mov	r21,zero
 8005348:	003f3006 	br	800500c <__alt_data_end+0xfc00500c>
 800534c:	00820074 	movhi	r2,2049
 8005350:	10841404 	addi	r2,r2,4176
 8005354:	15000015 	stw	r20,0(r2)
 8005358:	003f1b06 	br	8004fc8 <__alt_data_end+0xfc004fc8>
 800535c:	9009883a 	mov	r4,r18
 8005360:	81400204 	addi	r5,r16,8
 8005364:	80045240 	call	8004524 <_free_r>
 8005368:	00820074 	movhi	r2,2049
 800536c:	108af404 	addi	r2,r2,11216
 8005370:	10c00017 	ldw	r3,0(r2)
 8005374:	003f3906 	br	800505c <__alt_data_end+0xfc00505c>
 8005378:	01005504 	movi	r4,340
 800537c:	20800436 	bltu	r4,r2,8005390 <_malloc_r+0x774>
 8005380:	3804d3fa 	srli	r2,r7,15
 8005384:	11001dc4 	addi	r4,r2,119
 8005388:	210b883a 	add	r5,r4,r4
 800538c:	003f6206 	br	8005118 <__alt_data_end+0xfc005118>
 8005390:	01015504 	movi	r4,1364
 8005394:	20800436 	bltu	r4,r2,80053a8 <_malloc_r+0x78c>
 8005398:	3804d4ba 	srli	r2,r7,18
 800539c:	11001f04 	addi	r4,r2,124
 80053a0:	210b883a 	add	r5,r4,r4
 80053a4:	003f5c06 	br	8005118 <__alt_data_end+0xfc005118>
 80053a8:	01403f04 	movi	r5,252
 80053ac:	01001f84 	movi	r4,126
 80053b0:	003f5906 	br	8005118 <__alt_data_end+0xfc005118>
 80053b4:	98800117 	ldw	r2,4(r19)
 80053b8:	003fa906 	br	8005260 <__alt_data_end+0xfc005260>
 80053bc:	6007883a 	mov	r3,r12
 80053c0:	003ea206 	br	8004e4c <__alt_data_end+0xfc004e4c>

080053c4 <memchr>:
 80053c4:	208000cc 	andi	r2,r4,3
 80053c8:	280f883a 	mov	r7,r5
 80053cc:	10003526 	beq	r2,zero,80054a4 <memchr+0xe0>
 80053d0:	30bfffc4 	addi	r2,r6,-1
 80053d4:	30001b26 	beq	r6,zero,8005444 <memchr+0x80>
 80053d8:	21800003 	ldbu	r6,0(r4)
 80053dc:	28c03fcc 	andi	r3,r5,255
 80053e0:	30c01a26 	beq	r6,r3,800544c <memchr+0x88>
 80053e4:	180d883a 	mov	r6,r3
 80053e8:	00000406 	br	80053fc <memchr+0x38>
 80053ec:	10001526 	beq	r2,zero,8005444 <memchr+0x80>
 80053f0:	20c00003 	ldbu	r3,0(r4)
 80053f4:	10bfffc4 	addi	r2,r2,-1
 80053f8:	19801426 	beq	r3,r6,800544c <memchr+0x88>
 80053fc:	21000044 	addi	r4,r4,1
 8005400:	20c000cc 	andi	r3,r4,3
 8005404:	183ff91e 	bne	r3,zero,80053ec <__alt_data_end+0xfc0053ec>
 8005408:	024000c4 	movi	r9,3
 800540c:	48801136 	bltu	r9,r2,8005454 <memchr+0x90>
 8005410:	10000c26 	beq	r2,zero,8005444 <memchr+0x80>
 8005414:	20c00003 	ldbu	r3,0(r4)
 8005418:	29403fcc 	andi	r5,r5,255
 800541c:	19400b26 	beq	r3,r5,800544c <memchr+0x88>
 8005420:	20c00044 	addi	r3,r4,1
 8005424:	2085883a 	add	r2,r4,r2
 8005428:	39803fcc 	andi	r6,r7,255
 800542c:	00000306 	br	800543c <memchr+0x78>
 8005430:	18c00044 	addi	r3,r3,1
 8005434:	197fffc3 	ldbu	r5,-1(r3)
 8005438:	29800426 	beq	r5,r6,800544c <memchr+0x88>
 800543c:	1809883a 	mov	r4,r3
 8005440:	18bffb1e 	bne	r3,r2,8005430 <__alt_data_end+0xfc005430>
 8005444:	0005883a 	mov	r2,zero
 8005448:	f800283a 	ret
 800544c:	2005883a 	mov	r2,r4
 8005450:	f800283a 	ret
 8005454:	28c03fcc 	andi	r3,r5,255
 8005458:	1810923a 	slli	r8,r3,8
 800545c:	02ffbff4 	movhi	r11,65279
 8005460:	02a02074 	movhi	r10,32897
 8005464:	40c6b03a 	or	r3,r8,r3
 8005468:	1810943a 	slli	r8,r3,16
 800546c:	5affbfc4 	addi	r11,r11,-257
 8005470:	52a02004 	addi	r10,r10,-32640
 8005474:	40d0b03a 	or	r8,r8,r3
 8005478:	20c00017 	ldw	r3,0(r4)
 800547c:	40c6f03a 	xor	r3,r8,r3
 8005480:	1acd883a 	add	r6,r3,r11
 8005484:	00c6303a 	nor	r3,zero,r3
 8005488:	30c6703a 	and	r3,r6,r3
 800548c:	1a86703a 	and	r3,r3,r10
 8005490:	183fdf1e 	bne	r3,zero,8005410 <__alt_data_end+0xfc005410>
 8005494:	10bfff04 	addi	r2,r2,-4
 8005498:	21000104 	addi	r4,r4,4
 800549c:	48bff636 	bltu	r9,r2,8005478 <__alt_data_end+0xfc005478>
 80054a0:	003fdb06 	br	8005410 <__alt_data_end+0xfc005410>
 80054a4:	3005883a 	mov	r2,r6
 80054a8:	003fd706 	br	8005408 <__alt_data_end+0xfc005408>

080054ac <memcpy>:
 80054ac:	deffff04 	addi	sp,sp,-4
 80054b0:	dc000015 	stw	r16,0(sp)
 80054b4:	00c003c4 	movi	r3,15
 80054b8:	2005883a 	mov	r2,r4
 80054bc:	1980432e 	bgeu	r3,r6,80055cc <memcpy+0x120>
 80054c0:	2146b03a 	or	r3,r4,r5
 80054c4:	18c000cc 	andi	r3,r3,3
 80054c8:	1800421e 	bne	r3,zero,80055d4 <memcpy+0x128>
 80054cc:	343ffc04 	addi	r16,r6,-16
 80054d0:	8020d13a 	srli	r16,r16,4
 80054d4:	28c00104 	addi	r3,r5,4
 80054d8:	23400104 	addi	r13,r4,4
 80054dc:	801e913a 	slli	r15,r16,4
 80054e0:	2b000204 	addi	r12,r5,8
 80054e4:	22c00204 	addi	r11,r4,8
 80054e8:	7bc00504 	addi	r15,r15,20
 80054ec:	2a800304 	addi	r10,r5,12
 80054f0:	22400304 	addi	r9,r4,12
 80054f4:	2bdf883a 	add	r15,r5,r15
 80054f8:	2811883a 	mov	r8,r5
 80054fc:	200f883a 	mov	r7,r4
 8005500:	41000017 	ldw	r4,0(r8)
 8005504:	39c00404 	addi	r7,r7,16
 8005508:	18c00404 	addi	r3,r3,16
 800550c:	393ffc15 	stw	r4,-16(r7)
 8005510:	1bbffc17 	ldw	r14,-16(r3)
 8005514:	6b400404 	addi	r13,r13,16
 8005518:	5ac00404 	addi	r11,r11,16
 800551c:	6bbffc15 	stw	r14,-16(r13)
 8005520:	63800017 	ldw	r14,0(r12)
 8005524:	4a400404 	addi	r9,r9,16
 8005528:	42000404 	addi	r8,r8,16
 800552c:	5bbffc15 	stw	r14,-16(r11)
 8005530:	53800017 	ldw	r14,0(r10)
 8005534:	63000404 	addi	r12,r12,16
 8005538:	52800404 	addi	r10,r10,16
 800553c:	4bbffc15 	stw	r14,-16(r9)
 8005540:	1bffef1e 	bne	r3,r15,8005500 <__alt_data_end+0xfc005500>
 8005544:	81c00044 	addi	r7,r16,1
 8005548:	380e913a 	slli	r7,r7,4
 800554c:	310003cc 	andi	r4,r6,15
 8005550:	02c000c4 	movi	r11,3
 8005554:	11c7883a 	add	r3,r2,r7
 8005558:	29cb883a 	add	r5,r5,r7
 800555c:	59001f2e 	bgeu	r11,r4,80055dc <memcpy+0x130>
 8005560:	1813883a 	mov	r9,r3
 8005564:	2811883a 	mov	r8,r5
 8005568:	200f883a 	mov	r7,r4
 800556c:	42800017 	ldw	r10,0(r8)
 8005570:	4a400104 	addi	r9,r9,4
 8005574:	39ffff04 	addi	r7,r7,-4
 8005578:	4abfff15 	stw	r10,-4(r9)
 800557c:	42000104 	addi	r8,r8,4
 8005580:	59fffa36 	bltu	r11,r7,800556c <__alt_data_end+0xfc00556c>
 8005584:	213fff04 	addi	r4,r4,-4
 8005588:	2008d0ba 	srli	r4,r4,2
 800558c:	318000cc 	andi	r6,r6,3
 8005590:	21000044 	addi	r4,r4,1
 8005594:	2109883a 	add	r4,r4,r4
 8005598:	2109883a 	add	r4,r4,r4
 800559c:	1907883a 	add	r3,r3,r4
 80055a0:	290b883a 	add	r5,r5,r4
 80055a4:	30000626 	beq	r6,zero,80055c0 <memcpy+0x114>
 80055a8:	198d883a 	add	r6,r3,r6
 80055ac:	29c00003 	ldbu	r7,0(r5)
 80055b0:	18c00044 	addi	r3,r3,1
 80055b4:	29400044 	addi	r5,r5,1
 80055b8:	19ffffc5 	stb	r7,-1(r3)
 80055bc:	19bffb1e 	bne	r3,r6,80055ac <__alt_data_end+0xfc0055ac>
 80055c0:	dc000017 	ldw	r16,0(sp)
 80055c4:	dec00104 	addi	sp,sp,4
 80055c8:	f800283a 	ret
 80055cc:	2007883a 	mov	r3,r4
 80055d0:	003ff406 	br	80055a4 <__alt_data_end+0xfc0055a4>
 80055d4:	2007883a 	mov	r3,r4
 80055d8:	003ff306 	br	80055a8 <__alt_data_end+0xfc0055a8>
 80055dc:	200d883a 	mov	r6,r4
 80055e0:	003ff006 	br	80055a4 <__alt_data_end+0xfc0055a4>

080055e4 <memset>:
 80055e4:	20c000cc 	andi	r3,r4,3
 80055e8:	2005883a 	mov	r2,r4
 80055ec:	18004326 	beq	r3,zero,80056fc <memset+0x118>
 80055f0:	31ffffc4 	addi	r7,r6,-1
 80055f4:	30004026 	beq	r6,zero,80056f8 <memset+0x114>
 80055f8:	2813883a 	mov	r9,r5
 80055fc:	200d883a 	mov	r6,r4
 8005600:	2007883a 	mov	r3,r4
 8005604:	00000406 	br	8005618 <memset+0x34>
 8005608:	3a3fffc4 	addi	r8,r7,-1
 800560c:	31800044 	addi	r6,r6,1
 8005610:	38003926 	beq	r7,zero,80056f8 <memset+0x114>
 8005614:	400f883a 	mov	r7,r8
 8005618:	18c00044 	addi	r3,r3,1
 800561c:	32400005 	stb	r9,0(r6)
 8005620:	1a0000cc 	andi	r8,r3,3
 8005624:	403ff81e 	bne	r8,zero,8005608 <__alt_data_end+0xfc005608>
 8005628:	010000c4 	movi	r4,3
 800562c:	21c02d2e 	bgeu	r4,r7,80056e4 <memset+0x100>
 8005630:	29803fcc 	andi	r6,r5,255
 8005634:	3008923a 	slli	r4,r6,8
 8005638:	218cb03a 	or	r6,r4,r6
 800563c:	3008943a 	slli	r4,r6,16
 8005640:	218cb03a 	or	r6,r4,r6
 8005644:	010003c4 	movi	r4,15
 8005648:	21c0182e 	bgeu	r4,r7,80056ac <memset+0xc8>
 800564c:	3b3ffc04 	addi	r12,r7,-16
 8005650:	6018d13a 	srli	r12,r12,4
 8005654:	1a000104 	addi	r8,r3,4
 8005658:	1ac00204 	addi	r11,r3,8
 800565c:	6008913a 	slli	r4,r12,4
 8005660:	1a800304 	addi	r10,r3,12
 8005664:	1813883a 	mov	r9,r3
 8005668:	21000504 	addi	r4,r4,20
 800566c:	1909883a 	add	r4,r3,r4
 8005670:	49800015 	stw	r6,0(r9)
 8005674:	41800015 	stw	r6,0(r8)
 8005678:	59800015 	stw	r6,0(r11)
 800567c:	51800015 	stw	r6,0(r10)
 8005680:	42000404 	addi	r8,r8,16
 8005684:	4a400404 	addi	r9,r9,16
 8005688:	5ac00404 	addi	r11,r11,16
 800568c:	52800404 	addi	r10,r10,16
 8005690:	413ff71e 	bne	r8,r4,8005670 <__alt_data_end+0xfc005670>
 8005694:	63000044 	addi	r12,r12,1
 8005698:	6018913a 	slli	r12,r12,4
 800569c:	39c003cc 	andi	r7,r7,15
 80056a0:	010000c4 	movi	r4,3
 80056a4:	1b07883a 	add	r3,r3,r12
 80056a8:	21c00e2e 	bgeu	r4,r7,80056e4 <memset+0x100>
 80056ac:	1813883a 	mov	r9,r3
 80056b0:	3811883a 	mov	r8,r7
 80056b4:	010000c4 	movi	r4,3
 80056b8:	49800015 	stw	r6,0(r9)
 80056bc:	423fff04 	addi	r8,r8,-4
 80056c0:	4a400104 	addi	r9,r9,4
 80056c4:	223ffc36 	bltu	r4,r8,80056b8 <__alt_data_end+0xfc0056b8>
 80056c8:	393fff04 	addi	r4,r7,-4
 80056cc:	2008d0ba 	srli	r4,r4,2
 80056d0:	39c000cc 	andi	r7,r7,3
 80056d4:	21000044 	addi	r4,r4,1
 80056d8:	2109883a 	add	r4,r4,r4
 80056dc:	2109883a 	add	r4,r4,r4
 80056e0:	1907883a 	add	r3,r3,r4
 80056e4:	38000426 	beq	r7,zero,80056f8 <memset+0x114>
 80056e8:	19cf883a 	add	r7,r3,r7
 80056ec:	19400005 	stb	r5,0(r3)
 80056f0:	18c00044 	addi	r3,r3,1
 80056f4:	19fffd1e 	bne	r3,r7,80056ec <__alt_data_end+0xfc0056ec>
 80056f8:	f800283a 	ret
 80056fc:	2007883a 	mov	r3,r4
 8005700:	300f883a 	mov	r7,r6
 8005704:	003fc806 	br	8005628 <__alt_data_end+0xfc005628>

08005708 <_Balloc>:
 8005708:	20801317 	ldw	r2,76(r4)
 800570c:	defffc04 	addi	sp,sp,-16
 8005710:	dc400115 	stw	r17,4(sp)
 8005714:	dc000015 	stw	r16,0(sp)
 8005718:	dfc00315 	stw	ra,12(sp)
 800571c:	dc800215 	stw	r18,8(sp)
 8005720:	2023883a 	mov	r17,r4
 8005724:	2821883a 	mov	r16,r5
 8005728:	10000f26 	beq	r2,zero,8005768 <_Balloc+0x60>
 800572c:	8407883a 	add	r3,r16,r16
 8005730:	18c7883a 	add	r3,r3,r3
 8005734:	10c7883a 	add	r3,r2,r3
 8005738:	18800017 	ldw	r2,0(r3)
 800573c:	10001126 	beq	r2,zero,8005784 <_Balloc+0x7c>
 8005740:	11000017 	ldw	r4,0(r2)
 8005744:	19000015 	stw	r4,0(r3)
 8005748:	10000415 	stw	zero,16(r2)
 800574c:	10000315 	stw	zero,12(r2)
 8005750:	dfc00317 	ldw	ra,12(sp)
 8005754:	dc800217 	ldw	r18,8(sp)
 8005758:	dc400117 	ldw	r17,4(sp)
 800575c:	dc000017 	ldw	r16,0(sp)
 8005760:	dec00404 	addi	sp,sp,16
 8005764:	f800283a 	ret
 8005768:	01400104 	movi	r5,4
 800576c:	01800844 	movi	r6,33
 8005770:	8007f180 	call	8007f18 <_calloc_r>
 8005774:	88801315 	stw	r2,76(r17)
 8005778:	103fec1e 	bne	r2,zero,800572c <__alt_data_end+0xfc00572c>
 800577c:	0005883a 	mov	r2,zero
 8005780:	003ff306 	br	8005750 <__alt_data_end+0xfc005750>
 8005784:	01400044 	movi	r5,1
 8005788:	2c24983a 	sll	r18,r5,r16
 800578c:	8809883a 	mov	r4,r17
 8005790:	91800144 	addi	r6,r18,5
 8005794:	318d883a 	add	r6,r6,r6
 8005798:	318d883a 	add	r6,r6,r6
 800579c:	8007f180 	call	8007f18 <_calloc_r>
 80057a0:	103ff626 	beq	r2,zero,800577c <__alt_data_end+0xfc00577c>
 80057a4:	14000115 	stw	r16,4(r2)
 80057a8:	14800215 	stw	r18,8(r2)
 80057ac:	003fe606 	br	8005748 <__alt_data_end+0xfc005748>

080057b0 <_Bfree>:
 80057b0:	28000826 	beq	r5,zero,80057d4 <_Bfree+0x24>
 80057b4:	28c00117 	ldw	r3,4(r5)
 80057b8:	20801317 	ldw	r2,76(r4)
 80057bc:	18c7883a 	add	r3,r3,r3
 80057c0:	18c7883a 	add	r3,r3,r3
 80057c4:	10c5883a 	add	r2,r2,r3
 80057c8:	10c00017 	ldw	r3,0(r2)
 80057cc:	28c00015 	stw	r3,0(r5)
 80057d0:	11400015 	stw	r5,0(r2)
 80057d4:	f800283a 	ret

080057d8 <__multadd>:
 80057d8:	defffa04 	addi	sp,sp,-24
 80057dc:	dc000115 	stw	r16,4(sp)
 80057e0:	2c000417 	ldw	r16,16(r5)
 80057e4:	dc800315 	stw	r18,12(sp)
 80057e8:	dc400215 	stw	r17,8(sp)
 80057ec:	dfc00515 	stw	ra,20(sp)
 80057f0:	dcc00415 	stw	r19,16(sp)
 80057f4:	2823883a 	mov	r17,r5
 80057f8:	2025883a 	mov	r18,r4
 80057fc:	2a400504 	addi	r9,r5,20
 8005800:	0015883a 	mov	r10,zero
 8005804:	4a000017 	ldw	r8,0(r9)
 8005808:	4a400104 	addi	r9,r9,4
 800580c:	52800044 	addi	r10,r10,1
 8005810:	40ffffcc 	andi	r3,r8,65535
 8005814:	1987383a 	mul	r3,r3,r6
 8005818:	4010d43a 	srli	r8,r8,16
 800581c:	19cf883a 	add	r7,r3,r7
 8005820:	4191383a 	mul	r8,r8,r6
 8005824:	3816d43a 	srli	r11,r7,16
 8005828:	38ffffcc 	andi	r3,r7,65535
 800582c:	5a0f883a 	add	r7,r11,r8
 8005830:	3810943a 	slli	r8,r7,16
 8005834:	380ed43a 	srli	r7,r7,16
 8005838:	40c7883a 	add	r3,r8,r3
 800583c:	48ffff15 	stw	r3,-4(r9)
 8005840:	543ff016 	blt	r10,r16,8005804 <__alt_data_end+0xfc005804>
 8005844:	38000926 	beq	r7,zero,800586c <__multadd+0x94>
 8005848:	88800217 	ldw	r2,8(r17)
 800584c:	80800f0e 	bge	r16,r2,800588c <__multadd+0xb4>
 8005850:	80800144 	addi	r2,r16,5
 8005854:	1085883a 	add	r2,r2,r2
 8005858:	1085883a 	add	r2,r2,r2
 800585c:	8885883a 	add	r2,r17,r2
 8005860:	11c00015 	stw	r7,0(r2)
 8005864:	84000044 	addi	r16,r16,1
 8005868:	8c000415 	stw	r16,16(r17)
 800586c:	8805883a 	mov	r2,r17
 8005870:	dfc00517 	ldw	ra,20(sp)
 8005874:	dcc00417 	ldw	r19,16(sp)
 8005878:	dc800317 	ldw	r18,12(sp)
 800587c:	dc400217 	ldw	r17,8(sp)
 8005880:	dc000117 	ldw	r16,4(sp)
 8005884:	dec00604 	addi	sp,sp,24
 8005888:	f800283a 	ret
 800588c:	89400117 	ldw	r5,4(r17)
 8005890:	9009883a 	mov	r4,r18
 8005894:	d9c00015 	stw	r7,0(sp)
 8005898:	29400044 	addi	r5,r5,1
 800589c:	80057080 	call	8005708 <_Balloc>
 80058a0:	89800417 	ldw	r6,16(r17)
 80058a4:	89400304 	addi	r5,r17,12
 80058a8:	11000304 	addi	r4,r2,12
 80058ac:	31800084 	addi	r6,r6,2
 80058b0:	318d883a 	add	r6,r6,r6
 80058b4:	318d883a 	add	r6,r6,r6
 80058b8:	1027883a 	mov	r19,r2
 80058bc:	80054ac0 	call	80054ac <memcpy>
 80058c0:	89000117 	ldw	r4,4(r17)
 80058c4:	90c01317 	ldw	r3,76(r18)
 80058c8:	d9c00017 	ldw	r7,0(sp)
 80058cc:	2109883a 	add	r4,r4,r4
 80058d0:	2109883a 	add	r4,r4,r4
 80058d4:	1907883a 	add	r3,r3,r4
 80058d8:	18800017 	ldw	r2,0(r3)
 80058dc:	88800015 	stw	r2,0(r17)
 80058e0:	1c400015 	stw	r17,0(r3)
 80058e4:	9823883a 	mov	r17,r19
 80058e8:	003fd906 	br	8005850 <__alt_data_end+0xfc005850>

080058ec <__s2b>:
 80058ec:	defff904 	addi	sp,sp,-28
 80058f0:	dc400115 	stw	r17,4(sp)
 80058f4:	dc000015 	stw	r16,0(sp)
 80058f8:	2023883a 	mov	r17,r4
 80058fc:	2821883a 	mov	r16,r5
 8005900:	39000204 	addi	r4,r7,8
 8005904:	01400244 	movi	r5,9
 8005908:	dcc00315 	stw	r19,12(sp)
 800590c:	dc800215 	stw	r18,8(sp)
 8005910:	dfc00615 	stw	ra,24(sp)
 8005914:	dd400515 	stw	r21,20(sp)
 8005918:	dd000415 	stw	r20,16(sp)
 800591c:	3825883a 	mov	r18,r7
 8005920:	3027883a 	mov	r19,r6
 8005924:	8009efc0 	call	8009efc <__divsi3>
 8005928:	00c00044 	movi	r3,1
 800592c:	000b883a 	mov	r5,zero
 8005930:	1880030e 	bge	r3,r2,8005940 <__s2b+0x54>
 8005934:	18c7883a 	add	r3,r3,r3
 8005938:	29400044 	addi	r5,r5,1
 800593c:	18bffd16 	blt	r3,r2,8005934 <__alt_data_end+0xfc005934>
 8005940:	8809883a 	mov	r4,r17
 8005944:	80057080 	call	8005708 <_Balloc>
 8005948:	d8c00717 	ldw	r3,28(sp)
 800594c:	10c00515 	stw	r3,20(r2)
 8005950:	00c00044 	movi	r3,1
 8005954:	10c00415 	stw	r3,16(r2)
 8005958:	00c00244 	movi	r3,9
 800595c:	1cc0210e 	bge	r3,r19,80059e4 <__s2b+0xf8>
 8005960:	80eb883a 	add	r21,r16,r3
 8005964:	a829883a 	mov	r20,r21
 8005968:	84e1883a 	add	r16,r16,r19
 800596c:	a1c00007 	ldb	r7,0(r20)
 8005970:	8809883a 	mov	r4,r17
 8005974:	a5000044 	addi	r20,r20,1
 8005978:	100b883a 	mov	r5,r2
 800597c:	01800284 	movi	r6,10
 8005980:	39fff404 	addi	r7,r7,-48
 8005984:	80057d80 	call	80057d8 <__multadd>
 8005988:	a43ff81e 	bne	r20,r16,800596c <__alt_data_end+0xfc00596c>
 800598c:	ace1883a 	add	r16,r21,r19
 8005990:	843ffe04 	addi	r16,r16,-8
 8005994:	9c800a0e 	bge	r19,r18,80059c0 <__s2b+0xd4>
 8005998:	94e5c83a 	sub	r18,r18,r19
 800599c:	84a5883a 	add	r18,r16,r18
 80059a0:	81c00007 	ldb	r7,0(r16)
 80059a4:	8809883a 	mov	r4,r17
 80059a8:	84000044 	addi	r16,r16,1
 80059ac:	100b883a 	mov	r5,r2
 80059b0:	01800284 	movi	r6,10
 80059b4:	39fff404 	addi	r7,r7,-48
 80059b8:	80057d80 	call	80057d8 <__multadd>
 80059bc:	84bff81e 	bne	r16,r18,80059a0 <__alt_data_end+0xfc0059a0>
 80059c0:	dfc00617 	ldw	ra,24(sp)
 80059c4:	dd400517 	ldw	r21,20(sp)
 80059c8:	dd000417 	ldw	r20,16(sp)
 80059cc:	dcc00317 	ldw	r19,12(sp)
 80059d0:	dc800217 	ldw	r18,8(sp)
 80059d4:	dc400117 	ldw	r17,4(sp)
 80059d8:	dc000017 	ldw	r16,0(sp)
 80059dc:	dec00704 	addi	sp,sp,28
 80059e0:	f800283a 	ret
 80059e4:	84000284 	addi	r16,r16,10
 80059e8:	1827883a 	mov	r19,r3
 80059ec:	003fe906 	br	8005994 <__alt_data_end+0xfc005994>

080059f0 <__hi0bits>:
 80059f0:	20bfffec 	andhi	r2,r4,65535
 80059f4:	1000141e 	bne	r2,zero,8005a48 <__hi0bits+0x58>
 80059f8:	2008943a 	slli	r4,r4,16
 80059fc:	00800404 	movi	r2,16
 8005a00:	20ffc02c 	andhi	r3,r4,65280
 8005a04:	1800021e 	bne	r3,zero,8005a10 <__hi0bits+0x20>
 8005a08:	2008923a 	slli	r4,r4,8
 8005a0c:	10800204 	addi	r2,r2,8
 8005a10:	20fc002c 	andhi	r3,r4,61440
 8005a14:	1800021e 	bne	r3,zero,8005a20 <__hi0bits+0x30>
 8005a18:	2008913a 	slli	r4,r4,4
 8005a1c:	10800104 	addi	r2,r2,4
 8005a20:	20f0002c 	andhi	r3,r4,49152
 8005a24:	1800031e 	bne	r3,zero,8005a34 <__hi0bits+0x44>
 8005a28:	2109883a 	add	r4,r4,r4
 8005a2c:	10800084 	addi	r2,r2,2
 8005a30:	2109883a 	add	r4,r4,r4
 8005a34:	20000316 	blt	r4,zero,8005a44 <__hi0bits+0x54>
 8005a38:	2110002c 	andhi	r4,r4,16384
 8005a3c:	2000041e 	bne	r4,zero,8005a50 <__hi0bits+0x60>
 8005a40:	00800804 	movi	r2,32
 8005a44:	f800283a 	ret
 8005a48:	0005883a 	mov	r2,zero
 8005a4c:	003fec06 	br	8005a00 <__alt_data_end+0xfc005a00>
 8005a50:	10800044 	addi	r2,r2,1
 8005a54:	f800283a 	ret

08005a58 <__lo0bits>:
 8005a58:	20c00017 	ldw	r3,0(r4)
 8005a5c:	188001cc 	andi	r2,r3,7
 8005a60:	10000826 	beq	r2,zero,8005a84 <__lo0bits+0x2c>
 8005a64:	1880004c 	andi	r2,r3,1
 8005a68:	1000211e 	bne	r2,zero,8005af0 <__lo0bits+0x98>
 8005a6c:	1880008c 	andi	r2,r3,2
 8005a70:	1000211e 	bne	r2,zero,8005af8 <__lo0bits+0xa0>
 8005a74:	1806d0ba 	srli	r3,r3,2
 8005a78:	00800084 	movi	r2,2
 8005a7c:	20c00015 	stw	r3,0(r4)
 8005a80:	f800283a 	ret
 8005a84:	18bfffcc 	andi	r2,r3,65535
 8005a88:	10001326 	beq	r2,zero,8005ad8 <__lo0bits+0x80>
 8005a8c:	0005883a 	mov	r2,zero
 8005a90:	19403fcc 	andi	r5,r3,255
 8005a94:	2800021e 	bne	r5,zero,8005aa0 <__lo0bits+0x48>
 8005a98:	1806d23a 	srli	r3,r3,8
 8005a9c:	10800204 	addi	r2,r2,8
 8005aa0:	194003cc 	andi	r5,r3,15
 8005aa4:	2800021e 	bne	r5,zero,8005ab0 <__lo0bits+0x58>
 8005aa8:	1806d13a 	srli	r3,r3,4
 8005aac:	10800104 	addi	r2,r2,4
 8005ab0:	194000cc 	andi	r5,r3,3
 8005ab4:	2800021e 	bne	r5,zero,8005ac0 <__lo0bits+0x68>
 8005ab8:	1806d0ba 	srli	r3,r3,2
 8005abc:	10800084 	addi	r2,r2,2
 8005ac0:	1940004c 	andi	r5,r3,1
 8005ac4:	2800081e 	bne	r5,zero,8005ae8 <__lo0bits+0x90>
 8005ac8:	1806d07a 	srli	r3,r3,1
 8005acc:	1800051e 	bne	r3,zero,8005ae4 <__lo0bits+0x8c>
 8005ad0:	00800804 	movi	r2,32
 8005ad4:	f800283a 	ret
 8005ad8:	1806d43a 	srli	r3,r3,16
 8005adc:	00800404 	movi	r2,16
 8005ae0:	003feb06 	br	8005a90 <__alt_data_end+0xfc005a90>
 8005ae4:	10800044 	addi	r2,r2,1
 8005ae8:	20c00015 	stw	r3,0(r4)
 8005aec:	f800283a 	ret
 8005af0:	0005883a 	mov	r2,zero
 8005af4:	f800283a 	ret
 8005af8:	1806d07a 	srli	r3,r3,1
 8005afc:	00800044 	movi	r2,1
 8005b00:	20c00015 	stw	r3,0(r4)
 8005b04:	f800283a 	ret

08005b08 <__i2b>:
 8005b08:	defffd04 	addi	sp,sp,-12
 8005b0c:	dc000015 	stw	r16,0(sp)
 8005b10:	04000044 	movi	r16,1
 8005b14:	dc400115 	stw	r17,4(sp)
 8005b18:	2823883a 	mov	r17,r5
 8005b1c:	800b883a 	mov	r5,r16
 8005b20:	dfc00215 	stw	ra,8(sp)
 8005b24:	80057080 	call	8005708 <_Balloc>
 8005b28:	14400515 	stw	r17,20(r2)
 8005b2c:	14000415 	stw	r16,16(r2)
 8005b30:	dfc00217 	ldw	ra,8(sp)
 8005b34:	dc400117 	ldw	r17,4(sp)
 8005b38:	dc000017 	ldw	r16,0(sp)
 8005b3c:	dec00304 	addi	sp,sp,12
 8005b40:	f800283a 	ret

08005b44 <__multiply>:
 8005b44:	defffa04 	addi	sp,sp,-24
 8005b48:	dcc00315 	stw	r19,12(sp)
 8005b4c:	dc800215 	stw	r18,8(sp)
 8005b50:	2cc00417 	ldw	r19,16(r5)
 8005b54:	34800417 	ldw	r18,16(r6)
 8005b58:	dd000415 	stw	r20,16(sp)
 8005b5c:	dc400115 	stw	r17,4(sp)
 8005b60:	dfc00515 	stw	ra,20(sp)
 8005b64:	dc000015 	stw	r16,0(sp)
 8005b68:	2829883a 	mov	r20,r5
 8005b6c:	3023883a 	mov	r17,r6
 8005b70:	9c807016 	blt	r19,r18,8005d34 <__multiply+0x1f0>
 8005b74:	9005883a 	mov	r2,r18
 8005b78:	9825883a 	mov	r18,r19
 8005b7c:	1027883a 	mov	r19,r2
 8005b80:	a0800217 	ldw	r2,8(r20)
 8005b84:	94e1883a 	add	r16,r18,r19
 8005b88:	a1400117 	ldw	r5,4(r20)
 8005b8c:	1400010e 	bge	r2,r16,8005b94 <__multiply+0x50>
 8005b90:	29400044 	addi	r5,r5,1
 8005b94:	80057080 	call	8005708 <_Balloc>
 8005b98:	8417883a 	add	r11,r16,r16
 8005b9c:	13000504 	addi	r12,r2,20
 8005ba0:	5ad7883a 	add	r11,r11,r11
 8005ba4:	62d7883a 	add	r11,r12,r11
 8005ba8:	6007883a 	mov	r3,r12
 8005bac:	62c0032e 	bgeu	r12,r11,8005bbc <__multiply+0x78>
 8005bb0:	18000015 	stw	zero,0(r3)
 8005bb4:	18c00104 	addi	r3,r3,4
 8005bb8:	1afffd36 	bltu	r3,r11,8005bb0 <__alt_data_end+0xfc005bb0>
 8005bbc:	9ce7883a 	add	r19,r19,r19
 8005bc0:	94a5883a 	add	r18,r18,r18
 8005bc4:	89800504 	addi	r6,r17,20
 8005bc8:	9ce7883a 	add	r19,r19,r19
 8005bcc:	a3800504 	addi	r14,r20,20
 8005bd0:	94a5883a 	add	r18,r18,r18
 8005bd4:	34db883a 	add	r13,r6,r19
 8005bd8:	7495883a 	add	r10,r14,r18
 8005bdc:	3340422e 	bgeu	r6,r13,8005ce8 <__multiply+0x1a4>
 8005be0:	34400017 	ldw	r17,0(r6)
 8005be4:	8cbfffcc 	andi	r18,r17,65535
 8005be8:	90001b26 	beq	r18,zero,8005c58 <__multiply+0x114>
 8005bec:	6013883a 	mov	r9,r12
 8005bf0:	7023883a 	mov	r17,r14
 8005bf4:	0011883a 	mov	r8,zero
 8005bf8:	88c00017 	ldw	r3,0(r17)
 8005bfc:	4bc00017 	ldw	r15,0(r9)
 8005c00:	8c400104 	addi	r17,r17,4
 8005c04:	19ffffcc 	andi	r7,r3,65535
 8005c08:	3c8f383a 	mul	r7,r7,r18
 8005c0c:	1808d43a 	srli	r4,r3,16
 8005c10:	797fffcc 	andi	r5,r15,65535
 8005c14:	29cb883a 	add	r5,r5,r7
 8005c18:	2a0b883a 	add	r5,r5,r8
 8005c1c:	2489383a 	mul	r4,r4,r18
 8005c20:	7806d43a 	srli	r3,r15,16
 8005c24:	2810d43a 	srli	r8,r5,16
 8005c28:	297fffcc 	andi	r5,r5,65535
 8005c2c:	1907883a 	add	r3,r3,r4
 8005c30:	1a07883a 	add	r3,r3,r8
 8005c34:	1808943a 	slli	r4,r3,16
 8005c38:	480f883a 	mov	r7,r9
 8005c3c:	1810d43a 	srli	r8,r3,16
 8005c40:	214ab03a 	or	r5,r4,r5
 8005c44:	49400015 	stw	r5,0(r9)
 8005c48:	4a400104 	addi	r9,r9,4
 8005c4c:	8abfea36 	bltu	r17,r10,8005bf8 <__alt_data_end+0xfc005bf8>
 8005c50:	3a000115 	stw	r8,4(r7)
 8005c54:	34400017 	ldw	r17,0(r6)
 8005c58:	8822d43a 	srli	r17,r17,16
 8005c5c:	88001f26 	beq	r17,zero,8005cdc <__multiply+0x198>
 8005c60:	60c00017 	ldw	r3,0(r12)
 8005c64:	7013883a 	mov	r9,r14
 8005c68:	601f883a 	mov	r15,r12
 8005c6c:	1811883a 	mov	r8,r3
 8005c70:	6027883a 	mov	r19,r12
 8005c74:	000f883a 	mov	r7,zero
 8005c78:	00000106 	br	8005c80 <__multiply+0x13c>
 8005c7c:	9027883a 	mov	r19,r18
 8005c80:	4940000b 	ldhu	r5,0(r9)
 8005c84:	4010d43a 	srli	r8,r8,16
 8005c88:	193fffcc 	andi	r4,r3,65535
 8005c8c:	2c4b383a 	mul	r5,r5,r17
 8005c90:	7bc00104 	addi	r15,r15,4
 8005c94:	4a400104 	addi	r9,r9,4
 8005c98:	2a0b883a 	add	r5,r5,r8
 8005c9c:	29cb883a 	add	r5,r5,r7
 8005ca0:	2806943a 	slli	r3,r5,16
 8005ca4:	9c800104 	addi	r18,r19,4
 8005ca8:	280ad43a 	srli	r5,r5,16
 8005cac:	1908b03a 	or	r4,r3,r4
 8005cb0:	793fff15 	stw	r4,-4(r15)
 8005cb4:	48ffff17 	ldw	r3,-4(r9)
 8005cb8:	92000017 	ldw	r8,0(r18)
 8005cbc:	1806d43a 	srli	r3,r3,16
 8005cc0:	413fffcc 	andi	r4,r8,65535
 8005cc4:	1c47383a 	mul	r3,r3,r17
 8005cc8:	1907883a 	add	r3,r3,r4
 8005ccc:	1947883a 	add	r3,r3,r5
 8005cd0:	180ed43a 	srli	r7,r3,16
 8005cd4:	4abfe936 	bltu	r9,r10,8005c7c <__alt_data_end+0xfc005c7c>
 8005cd8:	98c00115 	stw	r3,4(r19)
 8005cdc:	31800104 	addi	r6,r6,4
 8005ce0:	63000104 	addi	r12,r12,4
 8005ce4:	337fbe36 	bltu	r6,r13,8005be0 <__alt_data_end+0xfc005be0>
 8005ce8:	0400090e 	bge	zero,r16,8005d10 <__multiply+0x1cc>
 8005cec:	58ffff17 	ldw	r3,-4(r11)
 8005cf0:	5affff04 	addi	r11,r11,-4
 8005cf4:	18000326 	beq	r3,zero,8005d04 <__multiply+0x1c0>
 8005cf8:	00000506 	br	8005d10 <__multiply+0x1cc>
 8005cfc:	58c00017 	ldw	r3,0(r11)
 8005d00:	1800031e 	bne	r3,zero,8005d10 <__multiply+0x1cc>
 8005d04:	843fffc4 	addi	r16,r16,-1
 8005d08:	5affff04 	addi	r11,r11,-4
 8005d0c:	803ffb1e 	bne	r16,zero,8005cfc <__alt_data_end+0xfc005cfc>
 8005d10:	14000415 	stw	r16,16(r2)
 8005d14:	dfc00517 	ldw	ra,20(sp)
 8005d18:	dd000417 	ldw	r20,16(sp)
 8005d1c:	dcc00317 	ldw	r19,12(sp)
 8005d20:	dc800217 	ldw	r18,8(sp)
 8005d24:	dc400117 	ldw	r17,4(sp)
 8005d28:	dc000017 	ldw	r16,0(sp)
 8005d2c:	dec00604 	addi	sp,sp,24
 8005d30:	f800283a 	ret
 8005d34:	3029883a 	mov	r20,r6
 8005d38:	2823883a 	mov	r17,r5
 8005d3c:	003f9006 	br	8005b80 <__alt_data_end+0xfc005b80>

08005d40 <__pow5mult>:
 8005d40:	defffa04 	addi	sp,sp,-24
 8005d44:	dcc00315 	stw	r19,12(sp)
 8005d48:	dc800215 	stw	r18,8(sp)
 8005d4c:	dc000015 	stw	r16,0(sp)
 8005d50:	dfc00515 	stw	ra,20(sp)
 8005d54:	dd000415 	stw	r20,16(sp)
 8005d58:	dc400115 	stw	r17,4(sp)
 8005d5c:	308000cc 	andi	r2,r6,3
 8005d60:	3021883a 	mov	r16,r6
 8005d64:	2027883a 	mov	r19,r4
 8005d68:	2825883a 	mov	r18,r5
 8005d6c:	10002e1e 	bne	r2,zero,8005e28 <__pow5mult+0xe8>
 8005d70:	8021d0ba 	srai	r16,r16,2
 8005d74:	80001a26 	beq	r16,zero,8005de0 <__pow5mult+0xa0>
 8005d78:	9c401217 	ldw	r17,72(r19)
 8005d7c:	8800061e 	bne	r17,zero,8005d98 <__pow5mult+0x58>
 8005d80:	00003406 	br	8005e54 <__pow5mult+0x114>
 8005d84:	8021d07a 	srai	r16,r16,1
 8005d88:	80001526 	beq	r16,zero,8005de0 <__pow5mult+0xa0>
 8005d8c:	88800017 	ldw	r2,0(r17)
 8005d90:	10001c26 	beq	r2,zero,8005e04 <__pow5mult+0xc4>
 8005d94:	1023883a 	mov	r17,r2
 8005d98:	80c0004c 	andi	r3,r16,1
 8005d9c:	183ff926 	beq	r3,zero,8005d84 <__alt_data_end+0xfc005d84>
 8005da0:	900b883a 	mov	r5,r18
 8005da4:	880d883a 	mov	r6,r17
 8005da8:	9809883a 	mov	r4,r19
 8005dac:	8005b440 	call	8005b44 <__multiply>
 8005db0:	90001b26 	beq	r18,zero,8005e20 <__pow5mult+0xe0>
 8005db4:	91c00117 	ldw	r7,4(r18)
 8005db8:	98c01317 	ldw	r3,76(r19)
 8005dbc:	8021d07a 	srai	r16,r16,1
 8005dc0:	39cf883a 	add	r7,r7,r7
 8005dc4:	39cf883a 	add	r7,r7,r7
 8005dc8:	19c7883a 	add	r3,r3,r7
 8005dcc:	19000017 	ldw	r4,0(r3)
 8005dd0:	91000015 	stw	r4,0(r18)
 8005dd4:	1c800015 	stw	r18,0(r3)
 8005dd8:	1025883a 	mov	r18,r2
 8005ddc:	803feb1e 	bne	r16,zero,8005d8c <__alt_data_end+0xfc005d8c>
 8005de0:	9005883a 	mov	r2,r18
 8005de4:	dfc00517 	ldw	ra,20(sp)
 8005de8:	dd000417 	ldw	r20,16(sp)
 8005dec:	dcc00317 	ldw	r19,12(sp)
 8005df0:	dc800217 	ldw	r18,8(sp)
 8005df4:	dc400117 	ldw	r17,4(sp)
 8005df8:	dc000017 	ldw	r16,0(sp)
 8005dfc:	dec00604 	addi	sp,sp,24
 8005e00:	f800283a 	ret
 8005e04:	9809883a 	mov	r4,r19
 8005e08:	880b883a 	mov	r5,r17
 8005e0c:	880d883a 	mov	r6,r17
 8005e10:	8005b440 	call	8005b44 <__multiply>
 8005e14:	88800015 	stw	r2,0(r17)
 8005e18:	10000015 	stw	zero,0(r2)
 8005e1c:	003fdd06 	br	8005d94 <__alt_data_end+0xfc005d94>
 8005e20:	1025883a 	mov	r18,r2
 8005e24:	003fd706 	br	8005d84 <__alt_data_end+0xfc005d84>
 8005e28:	10bfffc4 	addi	r2,r2,-1
 8005e2c:	1085883a 	add	r2,r2,r2
 8005e30:	00c20074 	movhi	r3,2049
 8005e34:	18fcb704 	addi	r3,r3,-3364
 8005e38:	1085883a 	add	r2,r2,r2
 8005e3c:	1885883a 	add	r2,r3,r2
 8005e40:	11800017 	ldw	r6,0(r2)
 8005e44:	000f883a 	mov	r7,zero
 8005e48:	80057d80 	call	80057d8 <__multadd>
 8005e4c:	1025883a 	mov	r18,r2
 8005e50:	003fc706 	br	8005d70 <__alt_data_end+0xfc005d70>
 8005e54:	05000044 	movi	r20,1
 8005e58:	9809883a 	mov	r4,r19
 8005e5c:	a00b883a 	mov	r5,r20
 8005e60:	80057080 	call	8005708 <_Balloc>
 8005e64:	1023883a 	mov	r17,r2
 8005e68:	00809c44 	movi	r2,625
 8005e6c:	88800515 	stw	r2,20(r17)
 8005e70:	8d000415 	stw	r20,16(r17)
 8005e74:	9c401215 	stw	r17,72(r19)
 8005e78:	88000015 	stw	zero,0(r17)
 8005e7c:	003fc606 	br	8005d98 <__alt_data_end+0xfc005d98>

08005e80 <__lshift>:
 8005e80:	defff904 	addi	sp,sp,-28
 8005e84:	dd000415 	stw	r20,16(sp)
 8005e88:	dcc00315 	stw	r19,12(sp)
 8005e8c:	3029d17a 	srai	r20,r6,5
 8005e90:	2cc00417 	ldw	r19,16(r5)
 8005e94:	28800217 	ldw	r2,8(r5)
 8005e98:	dd400515 	stw	r21,20(sp)
 8005e9c:	a4e7883a 	add	r19,r20,r19
 8005ea0:	dc800215 	stw	r18,8(sp)
 8005ea4:	dc400115 	stw	r17,4(sp)
 8005ea8:	dc000015 	stw	r16,0(sp)
 8005eac:	dfc00615 	stw	ra,24(sp)
 8005eb0:	9c000044 	addi	r16,r19,1
 8005eb4:	2823883a 	mov	r17,r5
 8005eb8:	302b883a 	mov	r21,r6
 8005ebc:	2025883a 	mov	r18,r4
 8005ec0:	29400117 	ldw	r5,4(r5)
 8005ec4:	1400030e 	bge	r2,r16,8005ed4 <__lshift+0x54>
 8005ec8:	1085883a 	add	r2,r2,r2
 8005ecc:	29400044 	addi	r5,r5,1
 8005ed0:	143ffd16 	blt	r2,r16,8005ec8 <__alt_data_end+0xfc005ec8>
 8005ed4:	9009883a 	mov	r4,r18
 8005ed8:	80057080 	call	8005708 <_Balloc>
 8005edc:	11c00504 	addi	r7,r2,20
 8005ee0:	0500090e 	bge	zero,r20,8005f08 <__lshift+0x88>
 8005ee4:	3811883a 	mov	r8,r7
 8005ee8:	0007883a 	mov	r3,zero
 8005eec:	40000015 	stw	zero,0(r8)
 8005ef0:	18c00044 	addi	r3,r3,1
 8005ef4:	42000104 	addi	r8,r8,4
 8005ef8:	1d3ffc1e 	bne	r3,r20,8005eec <__alt_data_end+0xfc005eec>
 8005efc:	18c7883a 	add	r3,r3,r3
 8005f00:	18c7883a 	add	r3,r3,r3
 8005f04:	38cf883a 	add	r7,r7,r3
 8005f08:	89000417 	ldw	r4,16(r17)
 8005f0c:	88c00504 	addi	r3,r17,20
 8005f10:	a98007cc 	andi	r6,r21,31
 8005f14:	2109883a 	add	r4,r4,r4
 8005f18:	2109883a 	add	r4,r4,r4
 8005f1c:	1909883a 	add	r4,r3,r4
 8005f20:	30002326 	beq	r6,zero,8005fb0 <__lshift+0x130>
 8005f24:	01400804 	movi	r5,32
 8005f28:	298bc83a 	sub	r5,r5,r6
 8005f2c:	0013883a 	mov	r9,zero
 8005f30:	1a000017 	ldw	r8,0(r3)
 8005f34:	3815883a 	mov	r10,r7
 8005f38:	39c00104 	addi	r7,r7,4
 8005f3c:	4190983a 	sll	r8,r8,r6
 8005f40:	18c00104 	addi	r3,r3,4
 8005f44:	4a10b03a 	or	r8,r9,r8
 8005f48:	3a3fff15 	stw	r8,-4(r7)
 8005f4c:	1a3fff17 	ldw	r8,-4(r3)
 8005f50:	4152d83a 	srl	r9,r8,r5
 8005f54:	193ff636 	bltu	r3,r4,8005f30 <__alt_data_end+0xfc005f30>
 8005f58:	52400115 	stw	r9,4(r10)
 8005f5c:	48000126 	beq	r9,zero,8005f64 <__lshift+0xe4>
 8005f60:	9c000084 	addi	r16,r19,2
 8005f64:	89000117 	ldw	r4,4(r17)
 8005f68:	90c01317 	ldw	r3,76(r18)
 8005f6c:	843fffc4 	addi	r16,r16,-1
 8005f70:	2109883a 	add	r4,r4,r4
 8005f74:	2109883a 	add	r4,r4,r4
 8005f78:	1907883a 	add	r3,r3,r4
 8005f7c:	19000017 	ldw	r4,0(r3)
 8005f80:	14000415 	stw	r16,16(r2)
 8005f84:	89000015 	stw	r4,0(r17)
 8005f88:	1c400015 	stw	r17,0(r3)
 8005f8c:	dfc00617 	ldw	ra,24(sp)
 8005f90:	dd400517 	ldw	r21,20(sp)
 8005f94:	dd000417 	ldw	r20,16(sp)
 8005f98:	dcc00317 	ldw	r19,12(sp)
 8005f9c:	dc800217 	ldw	r18,8(sp)
 8005fa0:	dc400117 	ldw	r17,4(sp)
 8005fa4:	dc000017 	ldw	r16,0(sp)
 8005fa8:	dec00704 	addi	sp,sp,28
 8005fac:	f800283a 	ret
 8005fb0:	19400017 	ldw	r5,0(r3)
 8005fb4:	39c00104 	addi	r7,r7,4
 8005fb8:	18c00104 	addi	r3,r3,4
 8005fbc:	397fff15 	stw	r5,-4(r7)
 8005fc0:	193ffb36 	bltu	r3,r4,8005fb0 <__alt_data_end+0xfc005fb0>
 8005fc4:	003fe706 	br	8005f64 <__alt_data_end+0xfc005f64>

08005fc8 <__mcmp>:
 8005fc8:	20800417 	ldw	r2,16(r4)
 8005fcc:	28c00417 	ldw	r3,16(r5)
 8005fd0:	10c5c83a 	sub	r2,r2,r3
 8005fd4:	1000111e 	bne	r2,zero,800601c <__mcmp+0x54>
 8005fd8:	18c7883a 	add	r3,r3,r3
 8005fdc:	18c7883a 	add	r3,r3,r3
 8005fe0:	21000504 	addi	r4,r4,20
 8005fe4:	29400504 	addi	r5,r5,20
 8005fe8:	20c5883a 	add	r2,r4,r3
 8005fec:	28cb883a 	add	r5,r5,r3
 8005ff0:	00000106 	br	8005ff8 <__mcmp+0x30>
 8005ff4:	20800a2e 	bgeu	r4,r2,8006020 <__mcmp+0x58>
 8005ff8:	10bfff04 	addi	r2,r2,-4
 8005ffc:	297fff04 	addi	r5,r5,-4
 8006000:	11800017 	ldw	r6,0(r2)
 8006004:	28c00017 	ldw	r3,0(r5)
 8006008:	30fffa26 	beq	r6,r3,8005ff4 <__alt_data_end+0xfc005ff4>
 800600c:	30c00236 	bltu	r6,r3,8006018 <__mcmp+0x50>
 8006010:	00800044 	movi	r2,1
 8006014:	f800283a 	ret
 8006018:	00bfffc4 	movi	r2,-1
 800601c:	f800283a 	ret
 8006020:	0005883a 	mov	r2,zero
 8006024:	f800283a 	ret

08006028 <__mdiff>:
 8006028:	defffb04 	addi	sp,sp,-20
 800602c:	dc000015 	stw	r16,0(sp)
 8006030:	2821883a 	mov	r16,r5
 8006034:	dcc00315 	stw	r19,12(sp)
 8006038:	300b883a 	mov	r5,r6
 800603c:	2027883a 	mov	r19,r4
 8006040:	8009883a 	mov	r4,r16
 8006044:	dc800215 	stw	r18,8(sp)
 8006048:	dfc00415 	stw	ra,16(sp)
 800604c:	dc400115 	stw	r17,4(sp)
 8006050:	3025883a 	mov	r18,r6
 8006054:	8005fc80 	call	8005fc8 <__mcmp>
 8006058:	10005226 	beq	r2,zero,80061a4 <__mdiff+0x17c>
 800605c:	10004c16 	blt	r2,zero,8006190 <__mdiff+0x168>
 8006060:	0023883a 	mov	r17,zero
 8006064:	81400117 	ldw	r5,4(r16)
 8006068:	9809883a 	mov	r4,r19
 800606c:	80057080 	call	8005708 <_Balloc>
 8006070:	83400417 	ldw	r13,16(r16)
 8006074:	93800417 	ldw	r14,16(r18)
 8006078:	81000504 	addi	r4,r16,20
 800607c:	6b59883a 	add	r12,r13,r13
 8006080:	739d883a 	add	r14,r14,r14
 8006084:	6319883a 	add	r12,r12,r12
 8006088:	91800504 	addi	r6,r18,20
 800608c:	739d883a 	add	r14,r14,r14
 8006090:	14400315 	stw	r17,12(r2)
 8006094:	2319883a 	add	r12,r4,r12
 8006098:	339d883a 	add	r14,r6,r14
 800609c:	12400504 	addi	r9,r2,20
 80060a0:	0007883a 	mov	r3,zero
 80060a4:	22000017 	ldw	r8,0(r4)
 80060a8:	32800017 	ldw	r10,0(r6)
 80060ac:	4ac00104 	addi	r11,r9,4
 80060b0:	41ffffcc 	andi	r7,r8,65535
 80060b4:	38c7883a 	add	r3,r7,r3
 80060b8:	51ffffcc 	andi	r7,r10,65535
 80060bc:	19cfc83a 	sub	r7,r3,r7
 80060c0:	4010d43a 	srli	r8,r8,16
 80060c4:	5014d43a 	srli	r10,r10,16
 80060c8:	3807d43a 	srai	r3,r7,16
 80060cc:	39ffffcc 	andi	r7,r7,65535
 80060d0:	4291c83a 	sub	r8,r8,r10
 80060d4:	40c7883a 	add	r3,r8,r3
 80060d8:	1810943a 	slli	r8,r3,16
 80060dc:	31800104 	addi	r6,r6,4
 80060e0:	21000104 	addi	r4,r4,4
 80060e4:	41ceb03a 	or	r7,r8,r7
 80060e8:	49c00015 	stw	r7,0(r9)
 80060ec:	1807d43a 	srai	r3,r3,16
 80060f0:	580b883a 	mov	r5,r11
 80060f4:	5813883a 	mov	r9,r11
 80060f8:	33bfea36 	bltu	r6,r14,80060a4 <__alt_data_end+0xfc0060a4>
 80060fc:	2011883a 	mov	r8,r4
 8006100:	2300152e 	bgeu	r4,r12,8006158 <__mdiff+0x130>
 8006104:	21400017 	ldw	r5,0(r4)
 8006108:	4a400104 	addi	r9,r9,4
 800610c:	21000104 	addi	r4,r4,4
 8006110:	29ffffcc 	andi	r7,r5,65535
 8006114:	38c7883a 	add	r3,r7,r3
 8006118:	280ad43a 	srli	r5,r5,16
 800611c:	180dd43a 	srai	r6,r3,16
 8006120:	19ffffcc 	andi	r7,r3,65535
 8006124:	3147883a 	add	r3,r6,r5
 8006128:	180a943a 	slli	r5,r3,16
 800612c:	1807d43a 	srai	r3,r3,16
 8006130:	29ceb03a 	or	r7,r5,r7
 8006134:	49ffff15 	stw	r7,-4(r9)
 8006138:	233ff236 	bltu	r4,r12,8006104 <__alt_data_end+0xfc006104>
 800613c:	0206303a 	nor	r3,zero,r8
 8006140:	1b07883a 	add	r3,r3,r12
 8006144:	1806d0ba 	srli	r3,r3,2
 8006148:	18c00044 	addi	r3,r3,1
 800614c:	18c7883a 	add	r3,r3,r3
 8006150:	18c7883a 	add	r3,r3,r3
 8006154:	58cb883a 	add	r5,r11,r3
 8006158:	28ffff04 	addi	r3,r5,-4
 800615c:	3800041e 	bne	r7,zero,8006170 <__mdiff+0x148>
 8006160:	18ffff04 	addi	r3,r3,-4
 8006164:	19000017 	ldw	r4,0(r3)
 8006168:	6b7fffc4 	addi	r13,r13,-1
 800616c:	203ffc26 	beq	r4,zero,8006160 <__alt_data_end+0xfc006160>
 8006170:	13400415 	stw	r13,16(r2)
 8006174:	dfc00417 	ldw	ra,16(sp)
 8006178:	dcc00317 	ldw	r19,12(sp)
 800617c:	dc800217 	ldw	r18,8(sp)
 8006180:	dc400117 	ldw	r17,4(sp)
 8006184:	dc000017 	ldw	r16,0(sp)
 8006188:	dec00504 	addi	sp,sp,20
 800618c:	f800283a 	ret
 8006190:	8005883a 	mov	r2,r16
 8006194:	04400044 	movi	r17,1
 8006198:	9021883a 	mov	r16,r18
 800619c:	1025883a 	mov	r18,r2
 80061a0:	003fb006 	br	8006064 <__alt_data_end+0xfc006064>
 80061a4:	9809883a 	mov	r4,r19
 80061a8:	000b883a 	mov	r5,zero
 80061ac:	80057080 	call	8005708 <_Balloc>
 80061b0:	00c00044 	movi	r3,1
 80061b4:	10c00415 	stw	r3,16(r2)
 80061b8:	10000515 	stw	zero,20(r2)
 80061bc:	003fed06 	br	8006174 <__alt_data_end+0xfc006174>

080061c0 <__ulp>:
 80061c0:	295ffc2c 	andhi	r5,r5,32752
 80061c4:	00bf3034 	movhi	r2,64704
 80061c8:	2887883a 	add	r3,r5,r2
 80061cc:	00c0020e 	bge	zero,r3,80061d8 <__ulp+0x18>
 80061d0:	0005883a 	mov	r2,zero
 80061d4:	f800283a 	ret
 80061d8:	00c7c83a 	sub	r3,zero,r3
 80061dc:	180bd53a 	srai	r5,r3,20
 80061e0:	008004c4 	movi	r2,19
 80061e4:	11400a0e 	bge	r2,r5,8006210 <__ulp+0x50>
 80061e8:	00800c84 	movi	r2,50
 80061ec:	0007883a 	mov	r3,zero
 80061f0:	11400516 	blt	r2,r5,8006208 <__ulp+0x48>
 80061f4:	00800cc4 	movi	r2,51
 80061f8:	114bc83a 	sub	r5,r2,r5
 80061fc:	00800044 	movi	r2,1
 8006200:	1144983a 	sll	r2,r2,r5
 8006204:	f800283a 	ret
 8006208:	00800044 	movi	r2,1
 800620c:	f800283a 	ret
 8006210:	00800234 	movhi	r2,8
 8006214:	1147d83a 	sra	r3,r2,r5
 8006218:	0005883a 	mov	r2,zero
 800621c:	f800283a 	ret

08006220 <__b2d>:
 8006220:	defffa04 	addi	sp,sp,-24
 8006224:	dc000015 	stw	r16,0(sp)
 8006228:	24000417 	ldw	r16,16(r4)
 800622c:	dc400115 	stw	r17,4(sp)
 8006230:	24400504 	addi	r17,r4,20
 8006234:	8421883a 	add	r16,r16,r16
 8006238:	8421883a 	add	r16,r16,r16
 800623c:	8c21883a 	add	r16,r17,r16
 8006240:	dc800215 	stw	r18,8(sp)
 8006244:	84bfff17 	ldw	r18,-4(r16)
 8006248:	dd000415 	stw	r20,16(sp)
 800624c:	dcc00315 	stw	r19,12(sp)
 8006250:	9009883a 	mov	r4,r18
 8006254:	2829883a 	mov	r20,r5
 8006258:	dfc00515 	stw	ra,20(sp)
 800625c:	80059f00 	call	80059f0 <__hi0bits>
 8006260:	00c00804 	movi	r3,32
 8006264:	1887c83a 	sub	r3,r3,r2
 8006268:	a0c00015 	stw	r3,0(r20)
 800626c:	00c00284 	movi	r3,10
 8006270:	84ffff04 	addi	r19,r16,-4
 8006274:	18801216 	blt	r3,r2,80062c0 <__b2d+0xa0>
 8006278:	014002c4 	movi	r5,11
 800627c:	2889c83a 	sub	r4,r5,r2
 8006280:	9106d83a 	srl	r3,r18,r4
 8006284:	18cffc34 	orhi	r3,r3,16368
 8006288:	8cc0282e 	bgeu	r17,r19,800632c <__b2d+0x10c>
 800628c:	817ffe17 	ldw	r5,-8(r16)
 8006290:	290ad83a 	srl	r5,r5,r4
 8006294:	10800544 	addi	r2,r2,21
 8006298:	9084983a 	sll	r2,r18,r2
 800629c:	2884b03a 	or	r2,r5,r2
 80062a0:	dfc00517 	ldw	ra,20(sp)
 80062a4:	dd000417 	ldw	r20,16(sp)
 80062a8:	dcc00317 	ldw	r19,12(sp)
 80062ac:	dc800217 	ldw	r18,8(sp)
 80062b0:	dc400117 	ldw	r17,4(sp)
 80062b4:	dc000017 	ldw	r16,0(sp)
 80062b8:	dec00604 	addi	sp,sp,24
 80062bc:	f800283a 	ret
 80062c0:	113ffd44 	addi	r4,r2,-11
 80062c4:	8cc00f2e 	bgeu	r17,r19,8006304 <__b2d+0xe4>
 80062c8:	81bffe04 	addi	r6,r16,-8
 80062cc:	817ffe17 	ldw	r5,-8(r16)
 80062d0:	20001326 	beq	r4,zero,8006320 <__b2d+0x100>
 80062d4:	00c00ac4 	movi	r3,43
 80062d8:	1885c83a 	sub	r2,r3,r2
 80062dc:	2886d83a 	srl	r3,r5,r2
 80062e0:	9124983a 	sll	r18,r18,r4
 80062e4:	90e4b03a 	or	r18,r18,r3
 80062e8:	90cffc34 	orhi	r3,r18,16368
 80062ec:	8980112e 	bgeu	r17,r6,8006334 <__b2d+0x114>
 80062f0:	81bffd17 	ldw	r6,-12(r16)
 80062f4:	308cd83a 	srl	r6,r6,r2
 80062f8:	2904983a 	sll	r2,r5,r4
 80062fc:	1184b03a 	or	r2,r2,r6
 8006300:	003fe706 	br	80062a0 <__alt_data_end+0xfc0062a0>
 8006304:	20000526 	beq	r4,zero,800631c <__b2d+0xfc>
 8006308:	9124983a 	sll	r18,r18,r4
 800630c:	000d883a 	mov	r6,zero
 8006310:	000b883a 	mov	r5,zero
 8006314:	90cffc34 	orhi	r3,r18,16368
 8006318:	003ff706 	br	80062f8 <__alt_data_end+0xfc0062f8>
 800631c:	000b883a 	mov	r5,zero
 8006320:	90cffc34 	orhi	r3,r18,16368
 8006324:	2805883a 	mov	r2,r5
 8006328:	003fdd06 	br	80062a0 <__alt_data_end+0xfc0062a0>
 800632c:	000b883a 	mov	r5,zero
 8006330:	003fd806 	br	8006294 <__alt_data_end+0xfc006294>
 8006334:	000d883a 	mov	r6,zero
 8006338:	003fef06 	br	80062f8 <__alt_data_end+0xfc0062f8>

0800633c <__d2b>:
 800633c:	defff704 	addi	sp,sp,-36
 8006340:	dc000215 	stw	r16,8(sp)
 8006344:	3021883a 	mov	r16,r6
 8006348:	dc400315 	stw	r17,12(sp)
 800634c:	8022907a 	slli	r17,r16,1
 8006350:	dd400715 	stw	r21,28(sp)
 8006354:	282b883a 	mov	r21,r5
 8006358:	01400044 	movi	r5,1
 800635c:	dd000615 	stw	r20,24(sp)
 8006360:	dcc00515 	stw	r19,20(sp)
 8006364:	dc800415 	stw	r18,16(sp)
 8006368:	dfc00815 	stw	ra,32(sp)
 800636c:	3829883a 	mov	r20,r7
 8006370:	dc800917 	ldw	r18,36(sp)
 8006374:	8822d57a 	srli	r17,r17,21
 8006378:	80057080 	call	8005708 <_Balloc>
 800637c:	1027883a 	mov	r19,r2
 8006380:	00800434 	movhi	r2,16
 8006384:	10bfffc4 	addi	r2,r2,-1
 8006388:	808c703a 	and	r6,r16,r2
 800638c:	88000126 	beq	r17,zero,8006394 <__d2b+0x58>
 8006390:	31800434 	orhi	r6,r6,16
 8006394:	d9800015 	stw	r6,0(sp)
 8006398:	a8001f26 	beq	r21,zero,8006418 <__d2b+0xdc>
 800639c:	d9000104 	addi	r4,sp,4
 80063a0:	dd400115 	stw	r21,4(sp)
 80063a4:	8005a580 	call	8005a58 <__lo0bits>
 80063a8:	d8c00017 	ldw	r3,0(sp)
 80063ac:	1000291e 	bne	r2,zero,8006454 <__d2b+0x118>
 80063b0:	d9000117 	ldw	r4,4(sp)
 80063b4:	99000515 	stw	r4,20(r19)
 80063b8:	1820c03a 	cmpne	r16,r3,zero
 80063bc:	84000044 	addi	r16,r16,1
 80063c0:	98c00615 	stw	r3,24(r19)
 80063c4:	9c000415 	stw	r16,16(r19)
 80063c8:	88001b1e 	bne	r17,zero,8006438 <__d2b+0xfc>
 80063cc:	800690ba 	slli	r3,r16,2
 80063d0:	10bef384 	addi	r2,r2,-1074
 80063d4:	a0800015 	stw	r2,0(r20)
 80063d8:	98c5883a 	add	r2,r19,r3
 80063dc:	11000417 	ldw	r4,16(r2)
 80063e0:	8020917a 	slli	r16,r16,5
 80063e4:	80059f00 	call	80059f0 <__hi0bits>
 80063e8:	8085c83a 	sub	r2,r16,r2
 80063ec:	90800015 	stw	r2,0(r18)
 80063f0:	9805883a 	mov	r2,r19
 80063f4:	dfc00817 	ldw	ra,32(sp)
 80063f8:	dd400717 	ldw	r21,28(sp)
 80063fc:	dd000617 	ldw	r20,24(sp)
 8006400:	dcc00517 	ldw	r19,20(sp)
 8006404:	dc800417 	ldw	r18,16(sp)
 8006408:	dc400317 	ldw	r17,12(sp)
 800640c:	dc000217 	ldw	r16,8(sp)
 8006410:	dec00904 	addi	sp,sp,36
 8006414:	f800283a 	ret
 8006418:	d809883a 	mov	r4,sp
 800641c:	8005a580 	call	8005a58 <__lo0bits>
 8006420:	d8c00017 	ldw	r3,0(sp)
 8006424:	04000044 	movi	r16,1
 8006428:	9c000415 	stw	r16,16(r19)
 800642c:	98c00515 	stw	r3,20(r19)
 8006430:	10800804 	addi	r2,r2,32
 8006434:	883fe526 	beq	r17,zero,80063cc <__alt_data_end+0xfc0063cc>
 8006438:	8c7ef344 	addi	r17,r17,-1075
 800643c:	88a3883a 	add	r17,r17,r2
 8006440:	00c00d44 	movi	r3,53
 8006444:	a4400015 	stw	r17,0(r20)
 8006448:	1885c83a 	sub	r2,r3,r2
 800644c:	90800015 	stw	r2,0(r18)
 8006450:	003fe706 	br	80063f0 <__alt_data_end+0xfc0063f0>
 8006454:	01000804 	movi	r4,32
 8006458:	2089c83a 	sub	r4,r4,r2
 800645c:	1908983a 	sll	r4,r3,r4
 8006460:	d9400117 	ldw	r5,4(sp)
 8006464:	1886d83a 	srl	r3,r3,r2
 8006468:	2148b03a 	or	r4,r4,r5
 800646c:	99000515 	stw	r4,20(r19)
 8006470:	d8c00015 	stw	r3,0(sp)
 8006474:	003fd006 	br	80063b8 <__alt_data_end+0xfc0063b8>

08006478 <__ratio>:
 8006478:	defff904 	addi	sp,sp,-28
 800647c:	dc400315 	stw	r17,12(sp)
 8006480:	2823883a 	mov	r17,r5
 8006484:	d9400104 	addi	r5,sp,4
 8006488:	dfc00615 	stw	ra,24(sp)
 800648c:	dcc00515 	stw	r19,20(sp)
 8006490:	dc800415 	stw	r18,16(sp)
 8006494:	2027883a 	mov	r19,r4
 8006498:	dc000215 	stw	r16,8(sp)
 800649c:	80062200 	call	8006220 <__b2d>
 80064a0:	8809883a 	mov	r4,r17
 80064a4:	d80b883a 	mov	r5,sp
 80064a8:	1025883a 	mov	r18,r2
 80064ac:	1821883a 	mov	r16,r3
 80064b0:	80062200 	call	8006220 <__b2d>
 80064b4:	8a400417 	ldw	r9,16(r17)
 80064b8:	9a000417 	ldw	r8,16(r19)
 80064bc:	100d883a 	mov	r6,r2
 80064c0:	d8800017 	ldw	r2,0(sp)
 80064c4:	4251c83a 	sub	r8,r8,r9
 80064c8:	4012917a 	slli	r9,r8,5
 80064cc:	da000117 	ldw	r8,4(sp)
 80064d0:	4091c83a 	sub	r8,r8,r2
 80064d4:	4251883a 	add	r8,r8,r9
 80064d8:	02000d0e 	bge	zero,r8,8006510 <__ratio+0x98>
 80064dc:	4010953a 	slli	r8,r8,20
 80064e0:	4421883a 	add	r16,r8,r16
 80064e4:	9009883a 	mov	r4,r18
 80064e8:	800b883a 	mov	r5,r16
 80064ec:	180f883a 	mov	r7,r3
 80064f0:	800a8580 	call	800a858 <__divdf3>
 80064f4:	dfc00617 	ldw	ra,24(sp)
 80064f8:	dcc00517 	ldw	r19,20(sp)
 80064fc:	dc800417 	ldw	r18,16(sp)
 8006500:	dc400317 	ldw	r17,12(sp)
 8006504:	dc000217 	ldw	r16,8(sp)
 8006508:	dec00704 	addi	sp,sp,28
 800650c:	f800283a 	ret
 8006510:	4010953a 	slli	r8,r8,20
 8006514:	1a07c83a 	sub	r3,r3,r8
 8006518:	003ff206 	br	80064e4 <__alt_data_end+0xfc0064e4>

0800651c <_mprec_log10>:
 800651c:	defffe04 	addi	sp,sp,-8
 8006520:	dc000015 	stw	r16,0(sp)
 8006524:	dfc00115 	stw	ra,4(sp)
 8006528:	008005c4 	movi	r2,23
 800652c:	2021883a 	mov	r16,r4
 8006530:	11000d0e 	bge	r2,r4,8006568 <_mprec_log10+0x4c>
 8006534:	0005883a 	mov	r2,zero
 8006538:	00cffc34 	movhi	r3,16368
 800653c:	843fffc4 	addi	r16,r16,-1
 8006540:	1009883a 	mov	r4,r2
 8006544:	180b883a 	mov	r5,r3
 8006548:	000d883a 	mov	r6,zero
 800654c:	01d00934 	movhi	r7,16420
 8006550:	800b3680 	call	800b368 <__muldf3>
 8006554:	803ff91e 	bne	r16,zero,800653c <__alt_data_end+0xfc00653c>
 8006558:	dfc00117 	ldw	ra,4(sp)
 800655c:	dc000017 	ldw	r16,0(sp)
 8006560:	dec00204 	addi	sp,sp,8
 8006564:	f800283a 	ret
 8006568:	202090fa 	slli	r16,r4,3
 800656c:	00820074 	movhi	r2,2049
 8006570:	10bcce04 	addi	r2,r2,-3272
 8006574:	1421883a 	add	r16,r2,r16
 8006578:	80800017 	ldw	r2,0(r16)
 800657c:	80c00117 	ldw	r3,4(r16)
 8006580:	dfc00117 	ldw	ra,4(sp)
 8006584:	dc000017 	ldw	r16,0(sp)
 8006588:	dec00204 	addi	sp,sp,8
 800658c:	f800283a 	ret

08006590 <__copybits>:
 8006590:	297fffc4 	addi	r5,r5,-1
 8006594:	280fd17a 	srai	r7,r5,5
 8006598:	30c00417 	ldw	r3,16(r6)
 800659c:	30800504 	addi	r2,r6,20
 80065a0:	39c00044 	addi	r7,r7,1
 80065a4:	18c7883a 	add	r3,r3,r3
 80065a8:	39cf883a 	add	r7,r7,r7
 80065ac:	18c7883a 	add	r3,r3,r3
 80065b0:	39cf883a 	add	r7,r7,r7
 80065b4:	10c7883a 	add	r3,r2,r3
 80065b8:	21cf883a 	add	r7,r4,r7
 80065bc:	10c00d2e 	bgeu	r2,r3,80065f4 <__copybits+0x64>
 80065c0:	200b883a 	mov	r5,r4
 80065c4:	12000017 	ldw	r8,0(r2)
 80065c8:	29400104 	addi	r5,r5,4
 80065cc:	10800104 	addi	r2,r2,4
 80065d0:	2a3fff15 	stw	r8,-4(r5)
 80065d4:	10fffb36 	bltu	r2,r3,80065c4 <__alt_data_end+0xfc0065c4>
 80065d8:	1985c83a 	sub	r2,r3,r6
 80065dc:	10bffac4 	addi	r2,r2,-21
 80065e0:	1004d0ba 	srli	r2,r2,2
 80065e4:	10800044 	addi	r2,r2,1
 80065e8:	1085883a 	add	r2,r2,r2
 80065ec:	1085883a 	add	r2,r2,r2
 80065f0:	2089883a 	add	r4,r4,r2
 80065f4:	21c0032e 	bgeu	r4,r7,8006604 <__copybits+0x74>
 80065f8:	20000015 	stw	zero,0(r4)
 80065fc:	21000104 	addi	r4,r4,4
 8006600:	21fffd36 	bltu	r4,r7,80065f8 <__alt_data_end+0xfc0065f8>
 8006604:	f800283a 	ret

08006608 <__any_on>:
 8006608:	20c00417 	ldw	r3,16(r4)
 800660c:	2805d17a 	srai	r2,r5,5
 8006610:	21000504 	addi	r4,r4,20
 8006614:	18800d0e 	bge	r3,r2,800664c <__any_on+0x44>
 8006618:	18c7883a 	add	r3,r3,r3
 800661c:	18c7883a 	add	r3,r3,r3
 8006620:	20c7883a 	add	r3,r4,r3
 8006624:	20c0192e 	bgeu	r4,r3,800668c <__any_on+0x84>
 8006628:	18bfff17 	ldw	r2,-4(r3)
 800662c:	18ffff04 	addi	r3,r3,-4
 8006630:	1000041e 	bne	r2,zero,8006644 <__any_on+0x3c>
 8006634:	20c0142e 	bgeu	r4,r3,8006688 <__any_on+0x80>
 8006638:	18ffff04 	addi	r3,r3,-4
 800663c:	19400017 	ldw	r5,0(r3)
 8006640:	283ffc26 	beq	r5,zero,8006634 <__alt_data_end+0xfc006634>
 8006644:	00800044 	movi	r2,1
 8006648:	f800283a 	ret
 800664c:	10c00a0e 	bge	r2,r3,8006678 <__any_on+0x70>
 8006650:	1085883a 	add	r2,r2,r2
 8006654:	1085883a 	add	r2,r2,r2
 8006658:	294007cc 	andi	r5,r5,31
 800665c:	2087883a 	add	r3,r4,r2
 8006660:	283ff026 	beq	r5,zero,8006624 <__alt_data_end+0xfc006624>
 8006664:	19800017 	ldw	r6,0(r3)
 8006668:	3144d83a 	srl	r2,r6,r5
 800666c:	114a983a 	sll	r5,r2,r5
 8006670:	29bff41e 	bne	r5,r6,8006644 <__alt_data_end+0xfc006644>
 8006674:	003feb06 	br	8006624 <__alt_data_end+0xfc006624>
 8006678:	1085883a 	add	r2,r2,r2
 800667c:	1085883a 	add	r2,r2,r2
 8006680:	2087883a 	add	r3,r4,r2
 8006684:	003fe706 	br	8006624 <__alt_data_end+0xfc006624>
 8006688:	f800283a 	ret
 800668c:	0005883a 	mov	r2,zero
 8006690:	f800283a 	ret

08006694 <__fpclassifyd>:
 8006694:	00a00034 	movhi	r2,32768
 8006698:	10bfffc4 	addi	r2,r2,-1
 800669c:	2884703a 	and	r2,r5,r2
 80066a0:	10000726 	beq	r2,zero,80066c0 <__fpclassifyd+0x2c>
 80066a4:	00fffc34 	movhi	r3,65520
 80066a8:	019ff834 	movhi	r6,32736
 80066ac:	28c7883a 	add	r3,r5,r3
 80066b0:	31bfffc4 	addi	r6,r6,-1
 80066b4:	30c00536 	bltu	r6,r3,80066cc <__fpclassifyd+0x38>
 80066b8:	00800104 	movi	r2,4
 80066bc:	f800283a 	ret
 80066c0:	2000021e 	bne	r4,zero,80066cc <__fpclassifyd+0x38>
 80066c4:	00800084 	movi	r2,2
 80066c8:	f800283a 	ret
 80066cc:	00dffc34 	movhi	r3,32752
 80066d0:	019ff834 	movhi	r6,32736
 80066d4:	28cb883a 	add	r5,r5,r3
 80066d8:	31bfffc4 	addi	r6,r6,-1
 80066dc:	317ff62e 	bgeu	r6,r5,80066b8 <__alt_data_end+0xfc0066b8>
 80066e0:	01400434 	movhi	r5,16
 80066e4:	297fffc4 	addi	r5,r5,-1
 80066e8:	28800236 	bltu	r5,r2,80066f4 <__fpclassifyd+0x60>
 80066ec:	008000c4 	movi	r2,3
 80066f0:	f800283a 	ret
 80066f4:	10c00226 	beq	r2,r3,8006700 <__fpclassifyd+0x6c>
 80066f8:	0005883a 	mov	r2,zero
 80066fc:	f800283a 	ret
 8006700:	2005003a 	cmpeq	r2,r4,zero
 8006704:	f800283a 	ret

08006708 <_sbrk_r>:
 8006708:	defffd04 	addi	sp,sp,-12
 800670c:	dc000015 	stw	r16,0(sp)
 8006710:	04020074 	movhi	r16,2049
 8006714:	dc400115 	stw	r17,4(sp)
 8006718:	840aed04 	addi	r16,r16,11188
 800671c:	2023883a 	mov	r17,r4
 8006720:	2809883a 	mov	r4,r5
 8006724:	dfc00215 	stw	ra,8(sp)
 8006728:	80000015 	stw	zero,0(r16)
 800672c:	800cd680 	call	800cd68 <sbrk>
 8006730:	00ffffc4 	movi	r3,-1
 8006734:	10c00526 	beq	r2,r3,800674c <_sbrk_r+0x44>
 8006738:	dfc00217 	ldw	ra,8(sp)
 800673c:	dc400117 	ldw	r17,4(sp)
 8006740:	dc000017 	ldw	r16,0(sp)
 8006744:	dec00304 	addi	sp,sp,12
 8006748:	f800283a 	ret
 800674c:	80c00017 	ldw	r3,0(r16)
 8006750:	183ff926 	beq	r3,zero,8006738 <__alt_data_end+0xfc006738>
 8006754:	88c00015 	stw	r3,0(r17)
 8006758:	003ff706 	br	8006738 <__alt_data_end+0xfc006738>

0800675c <__sread>:
 800675c:	defffe04 	addi	sp,sp,-8
 8006760:	dc000015 	stw	r16,0(sp)
 8006764:	2821883a 	mov	r16,r5
 8006768:	2940038f 	ldh	r5,14(r5)
 800676c:	dfc00115 	stw	ra,4(sp)
 8006770:	80089d40 	call	80089d4 <_read_r>
 8006774:	10000716 	blt	r2,zero,8006794 <__sread+0x38>
 8006778:	80c01417 	ldw	r3,80(r16)
 800677c:	1887883a 	add	r3,r3,r2
 8006780:	80c01415 	stw	r3,80(r16)
 8006784:	dfc00117 	ldw	ra,4(sp)
 8006788:	dc000017 	ldw	r16,0(sp)
 800678c:	dec00204 	addi	sp,sp,8
 8006790:	f800283a 	ret
 8006794:	80c0030b 	ldhu	r3,12(r16)
 8006798:	18fbffcc 	andi	r3,r3,61439
 800679c:	80c0030d 	sth	r3,12(r16)
 80067a0:	dfc00117 	ldw	ra,4(sp)
 80067a4:	dc000017 	ldw	r16,0(sp)
 80067a8:	dec00204 	addi	sp,sp,8
 80067ac:	f800283a 	ret

080067b0 <__seofread>:
 80067b0:	0005883a 	mov	r2,zero
 80067b4:	f800283a 	ret

080067b8 <__swrite>:
 80067b8:	2880030b 	ldhu	r2,12(r5)
 80067bc:	defffb04 	addi	sp,sp,-20
 80067c0:	dcc00315 	stw	r19,12(sp)
 80067c4:	dc800215 	stw	r18,8(sp)
 80067c8:	dc400115 	stw	r17,4(sp)
 80067cc:	dc000015 	stw	r16,0(sp)
 80067d0:	dfc00415 	stw	ra,16(sp)
 80067d4:	10c0400c 	andi	r3,r2,256
 80067d8:	2821883a 	mov	r16,r5
 80067dc:	2027883a 	mov	r19,r4
 80067e0:	3025883a 	mov	r18,r6
 80067e4:	3823883a 	mov	r17,r7
 80067e8:	18000526 	beq	r3,zero,8006800 <__swrite+0x48>
 80067ec:	2940038f 	ldh	r5,14(r5)
 80067f0:	000d883a 	mov	r6,zero
 80067f4:	01c00084 	movi	r7,2
 80067f8:	800881c0 	call	800881c <_lseek_r>
 80067fc:	8080030b 	ldhu	r2,12(r16)
 8006800:	8140038f 	ldh	r5,14(r16)
 8006804:	10bbffcc 	andi	r2,r2,61439
 8006808:	9809883a 	mov	r4,r19
 800680c:	900d883a 	mov	r6,r18
 8006810:	880f883a 	mov	r7,r17
 8006814:	8080030d 	sth	r2,12(r16)
 8006818:	dfc00417 	ldw	ra,16(sp)
 800681c:	dcc00317 	ldw	r19,12(sp)
 8006820:	dc800217 	ldw	r18,8(sp)
 8006824:	dc400117 	ldw	r17,4(sp)
 8006828:	dc000017 	ldw	r16,0(sp)
 800682c:	dec00504 	addi	sp,sp,20
 8006830:	8007e681 	jmpi	8007e68 <_write_r>

08006834 <__sseek>:
 8006834:	defffe04 	addi	sp,sp,-8
 8006838:	dc000015 	stw	r16,0(sp)
 800683c:	2821883a 	mov	r16,r5
 8006840:	2940038f 	ldh	r5,14(r5)
 8006844:	dfc00115 	stw	ra,4(sp)
 8006848:	800881c0 	call	800881c <_lseek_r>
 800684c:	00ffffc4 	movi	r3,-1
 8006850:	10c00826 	beq	r2,r3,8006874 <__sseek+0x40>
 8006854:	80c0030b 	ldhu	r3,12(r16)
 8006858:	80801415 	stw	r2,80(r16)
 800685c:	18c40014 	ori	r3,r3,4096
 8006860:	80c0030d 	sth	r3,12(r16)
 8006864:	dfc00117 	ldw	ra,4(sp)
 8006868:	dc000017 	ldw	r16,0(sp)
 800686c:	dec00204 	addi	sp,sp,8
 8006870:	f800283a 	ret
 8006874:	80c0030b 	ldhu	r3,12(r16)
 8006878:	18fbffcc 	andi	r3,r3,61439
 800687c:	80c0030d 	sth	r3,12(r16)
 8006880:	dfc00117 	ldw	ra,4(sp)
 8006884:	dc000017 	ldw	r16,0(sp)
 8006888:	dec00204 	addi	sp,sp,8
 800688c:	f800283a 	ret

08006890 <__sclose>:
 8006890:	2940038f 	ldh	r5,14(r5)
 8006894:	8007ec41 	jmpi	8007ec4 <_close_r>

08006898 <strcmp>:
 8006898:	2144b03a 	or	r2,r4,r5
 800689c:	108000cc 	andi	r2,r2,3
 80068a0:	1000171e 	bne	r2,zero,8006900 <strcmp+0x68>
 80068a4:	20800017 	ldw	r2,0(r4)
 80068a8:	28c00017 	ldw	r3,0(r5)
 80068ac:	10c0141e 	bne	r2,r3,8006900 <strcmp+0x68>
 80068b0:	027fbff4 	movhi	r9,65279
 80068b4:	4a7fbfc4 	addi	r9,r9,-257
 80068b8:	0086303a 	nor	r3,zero,r2
 80068bc:	02202074 	movhi	r8,32897
 80068c0:	1245883a 	add	r2,r2,r9
 80068c4:	42202004 	addi	r8,r8,-32640
 80068c8:	10c4703a 	and	r2,r2,r3
 80068cc:	1204703a 	and	r2,r2,r8
 80068d0:	10000226 	beq	r2,zero,80068dc <strcmp+0x44>
 80068d4:	00001706 	br	8006934 <strcmp+0x9c>
 80068d8:	1000161e 	bne	r2,zero,8006934 <strcmp+0x9c>
 80068dc:	21000104 	addi	r4,r4,4
 80068e0:	20c00017 	ldw	r3,0(r4)
 80068e4:	29400104 	addi	r5,r5,4
 80068e8:	29800017 	ldw	r6,0(r5)
 80068ec:	1a4f883a 	add	r7,r3,r9
 80068f0:	00c4303a 	nor	r2,zero,r3
 80068f4:	3884703a 	and	r2,r7,r2
 80068f8:	1204703a 	and	r2,r2,r8
 80068fc:	19bff626 	beq	r3,r6,80068d8 <__alt_data_end+0xfc0068d8>
 8006900:	20800007 	ldb	r2,0(r4)
 8006904:	1000051e 	bne	r2,zero,800691c <strcmp+0x84>
 8006908:	00000606 	br	8006924 <strcmp+0x8c>
 800690c:	21000044 	addi	r4,r4,1
 8006910:	20800007 	ldb	r2,0(r4)
 8006914:	29400044 	addi	r5,r5,1
 8006918:	10000226 	beq	r2,zero,8006924 <strcmp+0x8c>
 800691c:	28c00007 	ldb	r3,0(r5)
 8006920:	10fffa26 	beq	r2,r3,800690c <__alt_data_end+0xfc00690c>
 8006924:	20800003 	ldbu	r2,0(r4)
 8006928:	28c00003 	ldbu	r3,0(r5)
 800692c:	10c5c83a 	sub	r2,r2,r3
 8006930:	f800283a 	ret
 8006934:	0005883a 	mov	r2,zero
 8006938:	f800283a 	ret

0800693c <strlen>:
 800693c:	208000cc 	andi	r2,r4,3
 8006940:	10002026 	beq	r2,zero,80069c4 <strlen+0x88>
 8006944:	20800007 	ldb	r2,0(r4)
 8006948:	10002026 	beq	r2,zero,80069cc <strlen+0x90>
 800694c:	2005883a 	mov	r2,r4
 8006950:	00000206 	br	800695c <strlen+0x20>
 8006954:	10c00007 	ldb	r3,0(r2)
 8006958:	18001826 	beq	r3,zero,80069bc <strlen+0x80>
 800695c:	10800044 	addi	r2,r2,1
 8006960:	10c000cc 	andi	r3,r2,3
 8006964:	183ffb1e 	bne	r3,zero,8006954 <__alt_data_end+0xfc006954>
 8006968:	10c00017 	ldw	r3,0(r2)
 800696c:	01ffbff4 	movhi	r7,65279
 8006970:	39ffbfc4 	addi	r7,r7,-257
 8006974:	00ca303a 	nor	r5,zero,r3
 8006978:	01a02074 	movhi	r6,32897
 800697c:	19c7883a 	add	r3,r3,r7
 8006980:	31a02004 	addi	r6,r6,-32640
 8006984:	1946703a 	and	r3,r3,r5
 8006988:	1986703a 	and	r3,r3,r6
 800698c:	1800091e 	bne	r3,zero,80069b4 <strlen+0x78>
 8006990:	10800104 	addi	r2,r2,4
 8006994:	10c00017 	ldw	r3,0(r2)
 8006998:	19cb883a 	add	r5,r3,r7
 800699c:	00c6303a 	nor	r3,zero,r3
 80069a0:	28c6703a 	and	r3,r5,r3
 80069a4:	1986703a 	and	r3,r3,r6
 80069a8:	183ff926 	beq	r3,zero,8006990 <__alt_data_end+0xfc006990>
 80069ac:	00000106 	br	80069b4 <strlen+0x78>
 80069b0:	10800044 	addi	r2,r2,1
 80069b4:	10c00007 	ldb	r3,0(r2)
 80069b8:	183ffd1e 	bne	r3,zero,80069b0 <__alt_data_end+0xfc0069b0>
 80069bc:	1105c83a 	sub	r2,r2,r4
 80069c0:	f800283a 	ret
 80069c4:	2005883a 	mov	r2,r4
 80069c8:	003fe706 	br	8006968 <__alt_data_end+0xfc006968>
 80069cc:	0005883a 	mov	r2,zero
 80069d0:	f800283a 	ret

080069d4 <__sprint_r.part.0>:
 80069d4:	28801917 	ldw	r2,100(r5)
 80069d8:	defff604 	addi	sp,sp,-40
 80069dc:	dd400515 	stw	r21,20(sp)
 80069e0:	dcc00315 	stw	r19,12(sp)
 80069e4:	dfc00915 	stw	ra,36(sp)
 80069e8:	df000815 	stw	fp,32(sp)
 80069ec:	ddc00715 	stw	r23,28(sp)
 80069f0:	dd800615 	stw	r22,24(sp)
 80069f4:	dd000415 	stw	r20,16(sp)
 80069f8:	dc800215 	stw	r18,8(sp)
 80069fc:	dc400115 	stw	r17,4(sp)
 8006a00:	dc000015 	stw	r16,0(sp)
 8006a04:	1088000c 	andi	r2,r2,8192
 8006a08:	2827883a 	mov	r19,r5
 8006a0c:	302b883a 	mov	r21,r6
 8006a10:	10002d26 	beq	r2,zero,8006ac8 <__sprint_r.part.0+0xf4>
 8006a14:	30800217 	ldw	r2,8(r6)
 8006a18:	35800017 	ldw	r22,0(r6)
 8006a1c:	10002826 	beq	r2,zero,8006ac0 <__sprint_r.part.0+0xec>
 8006a20:	2029883a 	mov	r20,r4
 8006a24:	b5c00104 	addi	r23,r22,4
 8006a28:	04bfffc4 	movi	r18,-1
 8006a2c:	bc400017 	ldw	r17,0(r23)
 8006a30:	b4000017 	ldw	r16,0(r22)
 8006a34:	0039883a 	mov	fp,zero
 8006a38:	8822d0ba 	srli	r17,r17,2
 8006a3c:	04400316 	blt	zero,r17,8006a4c <__sprint_r.part.0+0x78>
 8006a40:	00001706 	br	8006aa0 <__sprint_r.part.0+0xcc>
 8006a44:	84000104 	addi	r16,r16,4
 8006a48:	8f001526 	beq	r17,fp,8006aa0 <__sprint_r.part.0+0xcc>
 8006a4c:	81400017 	ldw	r5,0(r16)
 8006a50:	a009883a 	mov	r4,r20
 8006a54:	980d883a 	mov	r6,r19
 8006a58:	80080f00 	call	80080f0 <_fputwc_r>
 8006a5c:	e7000044 	addi	fp,fp,1
 8006a60:	14bff81e 	bne	r2,r18,8006a44 <__alt_data_end+0xfc006a44>
 8006a64:	9005883a 	mov	r2,r18
 8006a68:	a8000215 	stw	zero,8(r21)
 8006a6c:	a8000115 	stw	zero,4(r21)
 8006a70:	dfc00917 	ldw	ra,36(sp)
 8006a74:	df000817 	ldw	fp,32(sp)
 8006a78:	ddc00717 	ldw	r23,28(sp)
 8006a7c:	dd800617 	ldw	r22,24(sp)
 8006a80:	dd400517 	ldw	r21,20(sp)
 8006a84:	dd000417 	ldw	r20,16(sp)
 8006a88:	dcc00317 	ldw	r19,12(sp)
 8006a8c:	dc800217 	ldw	r18,8(sp)
 8006a90:	dc400117 	ldw	r17,4(sp)
 8006a94:	dc000017 	ldw	r16,0(sp)
 8006a98:	dec00a04 	addi	sp,sp,40
 8006a9c:	f800283a 	ret
 8006aa0:	a8c00217 	ldw	r3,8(r21)
 8006aa4:	8c63883a 	add	r17,r17,r17
 8006aa8:	8c63883a 	add	r17,r17,r17
 8006aac:	1c45c83a 	sub	r2,r3,r17
 8006ab0:	a8800215 	stw	r2,8(r21)
 8006ab4:	b5800204 	addi	r22,r22,8
 8006ab8:	bdc00204 	addi	r23,r23,8
 8006abc:	103fdb1e 	bne	r2,zero,8006a2c <__alt_data_end+0xfc006a2c>
 8006ac0:	0005883a 	mov	r2,zero
 8006ac4:	003fe806 	br	8006a68 <__alt_data_end+0xfc006a68>
 8006ac8:	80083240 	call	8008324 <__sfvwrite_r>
 8006acc:	003fe606 	br	8006a68 <__alt_data_end+0xfc006a68>

08006ad0 <__sprint_r>:
 8006ad0:	30c00217 	ldw	r3,8(r6)
 8006ad4:	18000126 	beq	r3,zero,8006adc <__sprint_r+0xc>
 8006ad8:	80069d41 	jmpi	80069d4 <__sprint_r.part.0>
 8006adc:	30000115 	stw	zero,4(r6)
 8006ae0:	0005883a 	mov	r2,zero
 8006ae4:	f800283a 	ret

08006ae8 <___vfiprintf_internal_r>:
 8006ae8:	defeca04 	addi	sp,sp,-1240
 8006aec:	dd813215 	stw	r22,1224(sp)
 8006af0:	dd013015 	stw	r20,1216(sp)
 8006af4:	dfc13515 	stw	ra,1236(sp)
 8006af8:	df013415 	stw	fp,1232(sp)
 8006afc:	ddc13315 	stw	r23,1228(sp)
 8006b00:	dd413115 	stw	r21,1220(sp)
 8006b04:	dcc12f15 	stw	r19,1212(sp)
 8006b08:	dc812e15 	stw	r18,1208(sp)
 8006b0c:	dc412d15 	stw	r17,1204(sp)
 8006b10:	dc012c15 	stw	r16,1200(sp)
 8006b14:	d9012015 	stw	r4,1152(sp)
 8006b18:	d9c12115 	stw	r7,1156(sp)
 8006b1c:	2829883a 	mov	r20,r5
 8006b20:	302d883a 	mov	r22,r6
 8006b24:	20000226 	beq	r4,zero,8006b30 <___vfiprintf_internal_r+0x48>
 8006b28:	20800e17 	ldw	r2,56(r4)
 8006b2c:	1001d326 	beq	r2,zero,800727c <___vfiprintf_internal_r+0x794>
 8006b30:	a0c0030b 	ldhu	r3,12(r20)
 8006b34:	1908000c 	andi	r4,r3,8192
 8006b38:	1805883a 	mov	r2,r3
 8006b3c:	2000071e 	bne	r4,zero,8006b5c <___vfiprintf_internal_r+0x74>
 8006b40:	a1001917 	ldw	r4,100(r20)
 8006b44:	18880014 	ori	r2,r3,8192
 8006b48:	00f7ffc4 	movi	r3,-8193
 8006b4c:	20c8703a 	and	r4,r4,r3
 8006b50:	a080030d 	sth	r2,12(r20)
 8006b54:	1007883a 	mov	r3,r2
 8006b58:	a1001915 	stw	r4,100(r20)
 8006b5c:	1100020c 	andi	r4,r2,8
 8006b60:	20018926 	beq	r4,zero,8007188 <___vfiprintf_internal_r+0x6a0>
 8006b64:	a1000417 	ldw	r4,16(r20)
 8006b68:	20018726 	beq	r4,zero,8007188 <___vfiprintf_internal_r+0x6a0>
 8006b6c:	1080068c 	andi	r2,r2,26
 8006b70:	01000284 	movi	r4,10
 8006b74:	11018d26 	beq	r2,r4,80071ac <___vfiprintf_internal_r+0x6c4>
 8006b78:	da810a04 	addi	r10,sp,1064
 8006b7c:	dac109c4 	addi	r11,sp,1063
 8006b80:	07020074 	movhi	fp,2049
 8006b84:	05c20074 	movhi	r23,2049
 8006b88:	da811e15 	stw	r10,1144(sp)
 8006b8c:	52d5c83a 	sub	r10,r10,r11
 8006b90:	e73d0404 	addi	fp,fp,-3056
 8006b94:	bdfd0004 	addi	r23,r23,-3072
 8006b98:	dac11f15 	stw	r11,1148(sp)
 8006b9c:	dec11a15 	stw	sp,1128(sp)
 8006ba0:	d8011c15 	stw	zero,1136(sp)
 8006ba4:	d8011b15 	stw	zero,1132(sp)
 8006ba8:	d8012615 	stw	zero,1176(sp)
 8006bac:	d8012215 	stw	zero,1160(sp)
 8006bb0:	da812715 	stw	r10,1180(sp)
 8006bb4:	d811883a 	mov	r8,sp
 8006bb8:	b021883a 	mov	r16,r22
 8006bbc:	80800007 	ldb	r2,0(r16)
 8006bc0:	10039c26 	beq	r2,zero,8007a34 <___vfiprintf_internal_r+0xf4c>
 8006bc4:	01000944 	movi	r4,37
 8006bc8:	11039a26 	beq	r2,r4,8007a34 <___vfiprintf_internal_r+0xf4c>
 8006bcc:	8005883a 	mov	r2,r16
 8006bd0:	00000106 	br	8006bd8 <___vfiprintf_internal_r+0xf0>
 8006bd4:	19000326 	beq	r3,r4,8006be4 <___vfiprintf_internal_r+0xfc>
 8006bd8:	10800044 	addi	r2,r2,1
 8006bdc:	10c00007 	ldb	r3,0(r2)
 8006be0:	183ffc1e 	bne	r3,zero,8006bd4 <__alt_data_end+0xfc006bd4>
 8006be4:	1425c83a 	sub	r18,r2,r16
 8006be8:	1023883a 	mov	r17,r2
 8006bec:	90001026 	beq	r18,zero,8006c30 <___vfiprintf_internal_r+0x148>
 8006bf0:	d8c11c17 	ldw	r3,1136(sp)
 8006bf4:	d8811b17 	ldw	r2,1132(sp)
 8006bf8:	44000015 	stw	r16,0(r8)
 8006bfc:	90c7883a 	add	r3,r18,r3
 8006c00:	10800044 	addi	r2,r2,1
 8006c04:	44800115 	stw	r18,4(r8)
 8006c08:	d8c11c15 	stw	r3,1136(sp)
 8006c0c:	d8811b15 	stw	r2,1132(sp)
 8006c10:	010001c4 	movi	r4,7
 8006c14:	2080750e 	bge	r4,r2,8006dec <___vfiprintf_internal_r+0x304>
 8006c18:	18039d1e 	bne	r3,zero,8007a90 <___vfiprintf_internal_r+0xfa8>
 8006c1c:	dac12217 	ldw	r11,1160(sp)
 8006c20:	d8011b15 	stw	zero,1132(sp)
 8006c24:	d811883a 	mov	r8,sp
 8006c28:	5c97883a 	add	r11,r11,r18
 8006c2c:	dac12215 	stw	r11,1160(sp)
 8006c30:	88800007 	ldb	r2,0(r17)
 8006c34:	1002e026 	beq	r2,zero,80077b8 <___vfiprintf_internal_r+0xcd0>
 8006c38:	88c00047 	ldb	r3,1(r17)
 8006c3c:	8c000044 	addi	r16,r17,1
 8006c40:	d8011d85 	stb	zero,1142(sp)
 8006c44:	000d883a 	mov	r6,zero
 8006c48:	027fffc4 	movi	r9,-1
 8006c4c:	0027883a 	mov	r19,zero
 8006c50:	002b883a 	mov	r21,zero
 8006c54:	01001604 	movi	r4,88
 8006c58:	01400244 	movi	r5,9
 8006c5c:	03000a84 	movi	r12,42
 8006c60:	01c01b04 	movi	r7,108
 8006c64:	84000044 	addi	r16,r16,1
 8006c68:	18bff804 	addi	r2,r3,-32
 8006c6c:	20825f36 	bltu	r4,r2,80075ec <___vfiprintf_internal_r+0xb04>
 8006c70:	100490ba 	slli	r2,r2,2
 8006c74:	02820034 	movhi	r10,2048
 8006c78:	529b2204 	addi	r10,r10,27784
 8006c7c:	1285883a 	add	r2,r2,r10
 8006c80:	10800017 	ldw	r2,0(r2)
 8006c84:	1000683a 	jmp	r2
 8006c88:	0800745c 	xori	zero,at,465
 8006c8c:	080075ec 	andhi	zero,at,471
 8006c90:	080075ec 	andhi	zero,at,471
 8006c94:	080075e0 	cmpeqi	zero,at,471
 8006c98:	080075ec 	andhi	zero,at,471
 8006c9c:	080075ec 	andhi	zero,at,471
 8006ca0:	080075ec 	andhi	zero,at,471
 8006ca4:	080075ec 	andhi	zero,at,471
 8006ca8:	080075ec 	andhi	zero,at,471
 8006cac:	080075ec 	andhi	zero,at,471
 8006cb0:	080075b8 	rdprs	zero,at,470
 8006cb4:	080075d4 	ori	zero,at,471
 8006cb8:	080075ec 	andhi	zero,at,471
 8006cbc:	0800728c 	andi	zero,at,458
 8006cc0:	080073ec 	andhi	zero,at,463
 8006cc4:	080075ec 	andhi	zero,at,471
 8006cc8:	08007370 	cmpltui	zero,at,461
 8006ccc:	0800737c 	xorhi	zero,at,461
 8006cd0:	0800737c 	xorhi	zero,at,461
 8006cd4:	0800737c 	xorhi	zero,at,461
 8006cd8:	0800737c 	xorhi	zero,at,461
 8006cdc:	0800737c 	xorhi	zero,at,461
 8006ce0:	0800737c 	xorhi	zero,at,461
 8006ce4:	0800737c 	xorhi	zero,at,461
 8006ce8:	0800737c 	xorhi	zero,at,461
 8006cec:	0800737c 	xorhi	zero,at,461
 8006cf0:	080075ec 	andhi	zero,at,471
 8006cf4:	080075ec 	andhi	zero,at,471
 8006cf8:	080075ec 	andhi	zero,at,471
 8006cfc:	080075ec 	andhi	zero,at,471
 8006d00:	080075ec 	andhi	zero,at,471
 8006d04:	080075ec 	andhi	zero,at,471
 8006d08:	080075ec 	andhi	zero,at,471
 8006d0c:	080075ec 	andhi	zero,at,471
 8006d10:	080075ec 	andhi	zero,at,471
 8006d14:	080075ec 	andhi	zero,at,471
 8006d18:	080073a8 	cmpgeui	zero,at,462
 8006d1c:	080075ec 	andhi	zero,at,471
 8006d20:	080075ec 	andhi	zero,at,471
 8006d24:	080075ec 	andhi	zero,at,471
 8006d28:	080075ec 	andhi	zero,at,471
 8006d2c:	080075ec 	andhi	zero,at,471
 8006d30:	080075ec 	andhi	zero,at,471
 8006d34:	080075ec 	andhi	zero,at,471
 8006d38:	080075ec 	andhi	zero,at,471
 8006d3c:	080075ec 	andhi	zero,at,471
 8006d40:	080075ec 	andhi	zero,at,471
 8006d44:	08006e3c 	xorhi	zero,at,440
 8006d48:	080075ec 	andhi	zero,at,471
 8006d4c:	080075ec 	andhi	zero,at,471
 8006d50:	080075ec 	andhi	zero,at,471
 8006d54:	080075ec 	andhi	zero,at,471
 8006d58:	080075ec 	andhi	zero,at,471
 8006d5c:	08006e00 	call	8006e0 <__reset-0x77ff920>
 8006d60:	080075ec 	andhi	zero,at,471
 8006d64:	080075ec 	andhi	zero,at,471
 8006d68:	080072e8 	cmpgeui	zero,at,459
 8006d6c:	080075ec 	andhi	zero,at,471
 8006d70:	080075ec 	andhi	zero,at,471
 8006d74:	080075ec 	andhi	zero,at,471
 8006d78:	080075ec 	andhi	zero,at,471
 8006d7c:	080075ec 	andhi	zero,at,471
 8006d80:	080075ec 	andhi	zero,at,471
 8006d84:	080075ec 	andhi	zero,at,471
 8006d88:	080075ec 	andhi	zero,at,471
 8006d8c:	080075ec 	andhi	zero,at,471
 8006d90:	080075ec 	andhi	zero,at,471
 8006d94:	08007340 	call	800734 <__reset-0x77ff8cc>
 8006d98:	080074d8 	cmpnei	zero,at,467
 8006d9c:	080075ec 	andhi	zero,at,471
 8006da0:	080075ec 	andhi	zero,at,471
 8006da4:	080075ec 	andhi	zero,at,471
 8006da8:	08007560 	cmpeqi	zero,at,469
 8006dac:	080074d8 	cmpnei	zero,at,467
 8006db0:	080075ec 	andhi	zero,at,471
 8006db4:	080075ec 	andhi	zero,at,471
 8006db8:	0800756c 	andhi	zero,at,469
 8006dbc:	080075ec 	andhi	zero,at,471
 8006dc0:	0800742c 	andhi	zero,at,464
 8006dc4:	08006e40 	call	8006e4 <__reset-0x77ff91c>
 8006dc8:	08007514 	ori	zero,at,468
 8006dcc:	08007554 	ori	zero,at,469
 8006dd0:	080075ec 	andhi	zero,at,471
 8006dd4:	08007478 	rdprs	zero,at,465
 8006dd8:	080075ec 	andhi	zero,at,471
 8006ddc:	08006e04 	addi	zero,at,440
 8006de0:	080075ec 	andhi	zero,at,471
 8006de4:	080075ec 	andhi	zero,at,471
 8006de8:	0800757c 	xorhi	zero,at,469
 8006dec:	42000204 	addi	r8,r8,8
 8006df0:	dac12217 	ldw	r11,1160(sp)
 8006df4:	5c97883a 	add	r11,r11,r18
 8006df8:	dac12215 	stw	r11,1160(sp)
 8006dfc:	003f8c06 	br	8006c30 <__alt_data_end+0xfc006c30>
 8006e00:	ad400414 	ori	r21,r21,16
 8006e04:	a880080c 	andi	r2,r21,32
 8006e08:	10012f1e 	bne	r2,zero,80072c8 <___vfiprintf_internal_r+0x7e0>
 8006e0c:	a880040c 	andi	r2,r21,16
 8006e10:	1001ff1e 	bne	r2,zero,8007610 <___vfiprintf_internal_r+0xb28>
 8006e14:	a880100c 	andi	r2,r21,64
 8006e18:	1001fd26 	beq	r2,zero,8007610 <___vfiprintf_internal_r+0xb28>
 8006e1c:	da812117 	ldw	r10,1156(sp)
 8006e20:	002d883a 	mov	r22,zero
 8006e24:	00800044 	movi	r2,1
 8006e28:	5480000b 	ldhu	r18,0(r10)
 8006e2c:	52800104 	addi	r10,r10,4
 8006e30:	da812115 	stw	r10,1156(sp)
 8006e34:	9009883a 	mov	r4,r18
 8006e38:	00000a06 	br	8006e64 <___vfiprintf_internal_r+0x37c>
 8006e3c:	ad400414 	ori	r21,r21,16
 8006e40:	a880080c 	andi	r2,r21,32
 8006e44:	10011426 	beq	r2,zero,8007298 <___vfiprintf_internal_r+0x7b0>
 8006e48:	da812117 	ldw	r10,1156(sp)
 8006e4c:	0005883a 	mov	r2,zero
 8006e50:	54800017 	ldw	r18,0(r10)
 8006e54:	55800117 	ldw	r22,4(r10)
 8006e58:	52800204 	addi	r10,r10,8
 8006e5c:	da812115 	stw	r10,1156(sp)
 8006e60:	9588b03a 	or	r4,r18,r22
 8006e64:	d8011d85 	stb	zero,1142(sp)
 8006e68:	4823883a 	mov	r17,r9
 8006e6c:	0019883a 	mov	r12,zero
 8006e70:	48000216 	blt	r9,zero,8006e7c <___vfiprintf_internal_r+0x394>
 8006e74:	00ffdfc4 	movi	r3,-129
 8006e78:	a8ea703a 	and	r21,r21,r3
 8006e7c:	2002221e 	bne	r4,zero,8007708 <___vfiprintf_internal_r+0xc20>
 8006e80:	4802c726 	beq	r9,zero,80079a0 <___vfiprintf_internal_r+0xeb8>
 8006e84:	10803fcc 	andi	r2,r2,255
 8006e88:	00c00044 	movi	r3,1
 8006e8c:	10c24426 	beq	r2,r3,80077a0 <___vfiprintf_internal_r+0xcb8>
 8006e90:	00c00084 	movi	r3,2
 8006e94:	10c2cc26 	beq	r2,r3,80079c8 <___vfiprintf_internal_r+0xee0>
 8006e98:	d8c10a04 	addi	r3,sp,1064
 8006e9c:	9008d0fa 	srli	r4,r18,3
 8006ea0:	b00a977a 	slli	r5,r22,29
 8006ea4:	b02cd0fa 	srli	r22,r22,3
 8006ea8:	948001cc 	andi	r18,r18,7
 8006eac:	90800c04 	addi	r2,r18,48
 8006eb0:	18ffffc4 	addi	r3,r3,-1
 8006eb4:	2924b03a 	or	r18,r5,r4
 8006eb8:	18800005 	stb	r2,0(r3)
 8006ebc:	9588b03a 	or	r4,r18,r22
 8006ec0:	203ff61e 	bne	r4,zero,8006e9c <__alt_data_end+0xfc006e9c>
 8006ec4:	a900004c 	andi	r4,r21,1
 8006ec8:	d8c12415 	stw	r3,1168(sp)
 8006ecc:	2002fb1e 	bne	r4,zero,8007abc <___vfiprintf_internal_r+0xfd4>
 8006ed0:	da811e17 	ldw	r10,1144(sp)
 8006ed4:	50e3c83a 	sub	r17,r10,r3
 8006ed8:	8825883a 	mov	r18,r17
 8006edc:	8a40010e 	bge	r17,r9,8006ee4 <___vfiprintf_internal_r+0x3fc>
 8006ee0:	4825883a 	mov	r18,r9
 8006ee4:	63003fcc 	andi	r12,r12,255
 8006ee8:	6300201c 	xori	r12,r12,128
 8006eec:	633fe004 	addi	r12,r12,-128
 8006ef0:	60000126 	beq	r12,zero,8006ef8 <___vfiprintf_internal_r+0x410>
 8006ef4:	94800044 	addi	r18,r18,1
 8006ef8:	ab80008c 	andi	r14,r21,2
 8006efc:	70000126 	beq	r14,zero,8006f04 <___vfiprintf_internal_r+0x41c>
 8006f00:	94800084 	addi	r18,r18,2
 8006f04:	ad80210c 	andi	r22,r21,132
 8006f08:	b001df1e 	bne	r22,zero,8007688 <___vfiprintf_internal_r+0xba0>
 8006f0c:	9c8fc83a 	sub	r7,r19,r18
 8006f10:	01c1dd0e 	bge	zero,r7,8007688 <___vfiprintf_internal_r+0xba0>
 8006f14:	03000404 	movi	r12,16
 8006f18:	d8811c17 	ldw	r2,1136(sp)
 8006f1c:	61c3920e 	bge	r12,r7,8007d68 <___vfiprintf_internal_r+0x1280>
 8006f20:	02820074 	movhi	r10,2049
 8006f24:	52bd0404 	addi	r10,r10,-3056
 8006f28:	dc012915 	stw	r16,1188(sp)
 8006f2c:	d9811b17 	ldw	r6,1132(sp)
 8006f30:	da812315 	stw	r10,1164(sp)
 8006f34:	00c001c4 	movi	r3,7
 8006f38:	da412515 	stw	r9,1172(sp)
 8006f3c:	db812815 	stw	r14,1184(sp)
 8006f40:	3821883a 	mov	r16,r7
 8006f44:	00000506 	br	8006f5c <___vfiprintf_internal_r+0x474>
 8006f48:	31400084 	addi	r5,r6,2
 8006f4c:	42000204 	addi	r8,r8,8
 8006f50:	200d883a 	mov	r6,r4
 8006f54:	843ffc04 	addi	r16,r16,-16
 8006f58:	64000d0e 	bge	r12,r16,8006f90 <___vfiprintf_internal_r+0x4a8>
 8006f5c:	10800404 	addi	r2,r2,16
 8006f60:	31000044 	addi	r4,r6,1
 8006f64:	47000015 	stw	fp,0(r8)
 8006f68:	43000115 	stw	r12,4(r8)
 8006f6c:	d8811c15 	stw	r2,1136(sp)
 8006f70:	d9011b15 	stw	r4,1132(sp)
 8006f74:	193ff40e 	bge	r3,r4,8006f48 <__alt_data_end+0xfc006f48>
 8006f78:	1001b51e 	bne	r2,zero,8007650 <___vfiprintf_internal_r+0xb68>
 8006f7c:	843ffc04 	addi	r16,r16,-16
 8006f80:	000d883a 	mov	r6,zero
 8006f84:	01400044 	movi	r5,1
 8006f88:	d811883a 	mov	r8,sp
 8006f8c:	643ff316 	blt	r12,r16,8006f5c <__alt_data_end+0xfc006f5c>
 8006f90:	800f883a 	mov	r7,r16
 8006f94:	da412517 	ldw	r9,1172(sp)
 8006f98:	db812817 	ldw	r14,1184(sp)
 8006f9c:	dc012917 	ldw	r16,1188(sp)
 8006fa0:	dac12317 	ldw	r11,1164(sp)
 8006fa4:	3887883a 	add	r3,r7,r2
 8006fa8:	41c00115 	stw	r7,4(r8)
 8006fac:	42c00015 	stw	r11,0(r8)
 8006fb0:	d8c11c15 	stw	r3,1136(sp)
 8006fb4:	d9411b15 	stw	r5,1132(sp)
 8006fb8:	008001c4 	movi	r2,7
 8006fbc:	11429316 	blt	r2,r5,8007a0c <___vfiprintf_internal_r+0xf24>
 8006fc0:	d9011d87 	ldb	r4,1142(sp)
 8006fc4:	42000204 	addi	r8,r8,8
 8006fc8:	28800044 	addi	r2,r5,1
 8006fcc:	2001b31e 	bne	r4,zero,800769c <___vfiprintf_internal_r+0xbb4>
 8006fd0:	70000c26 	beq	r14,zero,8007004 <___vfiprintf_internal_r+0x51c>
 8006fd4:	d9011d04 	addi	r4,sp,1140
 8006fd8:	18c00084 	addi	r3,r3,2
 8006fdc:	41000015 	stw	r4,0(r8)
 8006fe0:	01000084 	movi	r4,2
 8006fe4:	41000115 	stw	r4,4(r8)
 8006fe8:	d8c11c15 	stw	r3,1136(sp)
 8006fec:	d8811b15 	stw	r2,1132(sp)
 8006ff0:	010001c4 	movi	r4,7
 8006ff4:	20826516 	blt	r4,r2,800798c <___vfiprintf_internal_r+0xea4>
 8006ff8:	100b883a 	mov	r5,r2
 8006ffc:	42000204 	addi	r8,r8,8
 8007000:	10800044 	addi	r2,r2,1
 8007004:	01002004 	movi	r4,128
 8007008:	b1021a26 	beq	r22,r4,8007874 <___vfiprintf_internal_r+0xd8c>
 800700c:	4c6dc83a 	sub	r22,r9,r17
 8007010:	0580230e 	bge	zero,r22,80070a0 <___vfiprintf_internal_r+0x5b8>
 8007014:	01c00404 	movi	r7,16
 8007018:	3d83300e 	bge	r7,r22,8007cdc <___vfiprintf_internal_r+0x11f4>
 800701c:	00820074 	movhi	r2,2049
 8007020:	10bd0004 	addi	r2,r2,-3072
 8007024:	d8812315 	stw	r2,1164(sp)
 8007028:	030001c4 	movi	r12,7
 800702c:	00000506 	br	8007044 <___vfiprintf_internal_r+0x55c>
 8007030:	28800084 	addi	r2,r5,2
 8007034:	42000204 	addi	r8,r8,8
 8007038:	200b883a 	mov	r5,r4
 800703c:	b5bffc04 	addi	r22,r22,-16
 8007040:	3d800d0e 	bge	r7,r22,8007078 <___vfiprintf_internal_r+0x590>
 8007044:	18c00404 	addi	r3,r3,16
 8007048:	29000044 	addi	r4,r5,1
 800704c:	45c00015 	stw	r23,0(r8)
 8007050:	41c00115 	stw	r7,4(r8)
 8007054:	d8c11c15 	stw	r3,1136(sp)
 8007058:	d9011b15 	stw	r4,1132(sp)
 800705c:	613ff40e 	bge	r12,r4,8007030 <__alt_data_end+0xfc007030>
 8007060:	18019b1e 	bne	r3,zero,80076d0 <___vfiprintf_internal_r+0xbe8>
 8007064:	b5bffc04 	addi	r22,r22,-16
 8007068:	000b883a 	mov	r5,zero
 800706c:	00800044 	movi	r2,1
 8007070:	d811883a 	mov	r8,sp
 8007074:	3dbff316 	blt	r7,r22,8007044 <__alt_data_end+0xfc007044>
 8007078:	da812317 	ldw	r10,1164(sp)
 800707c:	1d87883a 	add	r3,r3,r22
 8007080:	45800115 	stw	r22,4(r8)
 8007084:	42800015 	stw	r10,0(r8)
 8007088:	d8c11c15 	stw	r3,1136(sp)
 800708c:	d8811b15 	stw	r2,1132(sp)
 8007090:	010001c4 	movi	r4,7
 8007094:	2081dd16 	blt	r4,r2,800780c <___vfiprintf_internal_r+0xd24>
 8007098:	42000204 	addi	r8,r8,8
 800709c:	10800044 	addi	r2,r2,1
 80070a0:	da812417 	ldw	r10,1168(sp)
 80070a4:	1c47883a 	add	r3,r3,r17
 80070a8:	44400115 	stw	r17,4(r8)
 80070ac:	42800015 	stw	r10,0(r8)
 80070b0:	d8c11c15 	stw	r3,1136(sp)
 80070b4:	d8811b15 	stw	r2,1132(sp)
 80070b8:	010001c4 	movi	r4,7
 80070bc:	2081dc0e 	bge	r4,r2,8007830 <___vfiprintf_internal_r+0xd48>
 80070c0:	1802611e 	bne	r3,zero,8007a48 <___vfiprintf_internal_r+0xf60>
 80070c4:	d8011b15 	stw	zero,1132(sp)
 80070c8:	aac0010c 	andi	r11,r21,4
 80070cc:	58002726 	beq	r11,zero,800716c <___vfiprintf_internal_r+0x684>
 80070d0:	9ca3c83a 	sub	r17,r19,r18
 80070d4:	d811883a 	mov	r8,sp
 80070d8:	0443510e 	bge	zero,r17,8007e20 <___vfiprintf_internal_r+0x1338>
 80070dc:	01c00404 	movi	r7,16
 80070e0:	3c43320e 	bge	r7,r17,8007dac <___vfiprintf_internal_r+0x12c4>
 80070e4:	00820074 	movhi	r2,2049
 80070e8:	10bd0404 	addi	r2,r2,-3056
 80070ec:	d9011b17 	ldw	r4,1132(sp)
 80070f0:	d8812315 	stw	r2,1164(sp)
 80070f4:	382d883a 	mov	r22,r7
 80070f8:	054001c4 	movi	r21,7
 80070fc:	00000506 	br	8007114 <___vfiprintf_internal_r+0x62c>
 8007100:	21400084 	addi	r5,r4,2
 8007104:	42000204 	addi	r8,r8,8
 8007108:	1009883a 	mov	r4,r2
 800710c:	8c7ffc04 	addi	r17,r17,-16
 8007110:	b4400d0e 	bge	r22,r17,8007148 <___vfiprintf_internal_r+0x660>
 8007114:	18c00404 	addi	r3,r3,16
 8007118:	20800044 	addi	r2,r4,1
 800711c:	47000015 	stw	fp,0(r8)
 8007120:	45800115 	stw	r22,4(r8)
 8007124:	d8c11c15 	stw	r3,1136(sp)
 8007128:	d8811b15 	stw	r2,1132(sp)
 800712c:	a8bff40e 	bge	r21,r2,8007100 <__alt_data_end+0xfc007100>
 8007130:	1801ac1e 	bne	r3,zero,80077e4 <___vfiprintf_internal_r+0xcfc>
 8007134:	8c7ffc04 	addi	r17,r17,-16
 8007138:	0009883a 	mov	r4,zero
 800713c:	01400044 	movi	r5,1
 8007140:	d811883a 	mov	r8,sp
 8007144:	b47ff316 	blt	r22,r17,8007114 <__alt_data_end+0xfc007114>
 8007148:	da812317 	ldw	r10,1164(sp)
 800714c:	1c47883a 	add	r3,r3,r17
 8007150:	44400115 	stw	r17,4(r8)
 8007154:	42800015 	stw	r10,0(r8)
 8007158:	d8c11c15 	stw	r3,1136(sp)
 800715c:	d9411b15 	stw	r5,1132(sp)
 8007160:	008001c4 	movi	r2,7
 8007164:	1141b70e 	bge	r2,r5,8007844 <___vfiprintf_internal_r+0xd5c>
 8007168:	1802cf1e 	bne	r3,zero,8007ca8 <___vfiprintf_internal_r+0x11c0>
 800716c:	94c2ca16 	blt	r18,r19,8007c98 <___vfiprintf_internal_r+0x11b0>
 8007170:	dac12217 	ldw	r11,1160(sp)
 8007174:	5c97883a 	add	r11,r11,r18
 8007178:	dac12215 	stw	r11,1160(sp)
 800717c:	d8011b15 	stw	zero,1132(sp)
 8007180:	d811883a 	mov	r8,sp
 8007184:	003e8d06 	br	8006bbc <__alt_data_end+0xfc006bbc>
 8007188:	d9012017 	ldw	r4,1152(sp)
 800718c:	a00b883a 	mov	r5,r20
 8007190:	80023b00 	call	80023b0 <__swsetup_r>
 8007194:	10002c1e 	bne	r2,zero,8007248 <___vfiprintf_internal_r+0x760>
 8007198:	a0c0030b 	ldhu	r3,12(r20)
 800719c:	01000284 	movi	r4,10
 80071a0:	1805883a 	mov	r2,r3
 80071a4:	1080068c 	andi	r2,r2,26
 80071a8:	113e731e 	bne	r2,r4,8006b78 <__alt_data_end+0xfc006b78>
 80071ac:	a080038b 	ldhu	r2,14(r20)
 80071b0:	113fffcc 	andi	r4,r2,65535
 80071b4:	2120001c 	xori	r4,r4,32768
 80071b8:	21200004 	addi	r4,r4,-32768
 80071bc:	203e6e16 	blt	r4,zero,8006b78 <__alt_data_end+0xfc006b78>
 80071c0:	a3001917 	ldw	r12,100(r20)
 80071c4:	a2c00717 	ldw	r11,28(r20)
 80071c8:	a2800917 	ldw	r10,36(r20)
 80071cc:	d9012017 	ldw	r4,1152(sp)
 80071d0:	d9c12117 	ldw	r7,1156(sp)
 80071d4:	02410004 	movi	r9,1024
 80071d8:	18ffff4c 	andi	r3,r3,65533
 80071dc:	da4b883a 	add	r5,sp,r9
 80071e0:	b00d883a 	mov	r6,r22
 80071e4:	d8c1030d 	sth	r3,1036(sp)
 80071e8:	db011915 	stw	r12,1124(sp)
 80071ec:	d881038d 	sth	r2,1038(sp)
 80071f0:	dac10715 	stw	r11,1052(sp)
 80071f4:	da810915 	stw	r10,1060(sp)
 80071f8:	dec10015 	stw	sp,1024(sp)
 80071fc:	dec10415 	stw	sp,1040(sp)
 8007200:	da410215 	stw	r9,1032(sp)
 8007204:	da410515 	stw	r9,1044(sp)
 8007208:	d8010615 	stw	zero,1048(sp)
 800720c:	8006ae80 	call	8006ae8 <___vfiprintf_internal_r>
 8007210:	1021883a 	mov	r16,r2
 8007214:	10000416 	blt	r2,zero,8007228 <___vfiprintf_internal_r+0x740>
 8007218:	d9012017 	ldw	r4,1152(sp)
 800721c:	d9410004 	addi	r5,sp,1024
 8007220:	8003e080 	call	8003e08 <_fflush_r>
 8007224:	1002fc1e 	bne	r2,zero,8007e18 <___vfiprintf_internal_r+0x1330>
 8007228:	d881030b 	ldhu	r2,1036(sp)
 800722c:	1080100c 	andi	r2,r2,64
 8007230:	10000326 	beq	r2,zero,8007240 <___vfiprintf_internal_r+0x758>
 8007234:	a080030b 	ldhu	r2,12(r20)
 8007238:	10801014 	ori	r2,r2,64
 800723c:	a080030d 	sth	r2,12(r20)
 8007240:	8005883a 	mov	r2,r16
 8007244:	00000106 	br	800724c <___vfiprintf_internal_r+0x764>
 8007248:	00bfffc4 	movi	r2,-1
 800724c:	dfc13517 	ldw	ra,1236(sp)
 8007250:	df013417 	ldw	fp,1232(sp)
 8007254:	ddc13317 	ldw	r23,1228(sp)
 8007258:	dd813217 	ldw	r22,1224(sp)
 800725c:	dd413117 	ldw	r21,1220(sp)
 8007260:	dd013017 	ldw	r20,1216(sp)
 8007264:	dcc12f17 	ldw	r19,1212(sp)
 8007268:	dc812e17 	ldw	r18,1208(sp)
 800726c:	dc412d17 	ldw	r17,1204(sp)
 8007270:	dc012c17 	ldw	r16,1200(sp)
 8007274:	dec13604 	addi	sp,sp,1240
 8007278:	f800283a 	ret
 800727c:	80043b00 	call	80043b0 <__sinit>
 8007280:	003e2b06 	br	8006b30 <__alt_data_end+0xfc006b30>
 8007284:	04e7c83a 	sub	r19,zero,r19
 8007288:	d8812115 	stw	r2,1156(sp)
 800728c:	ad400114 	ori	r21,r21,4
 8007290:	80c00007 	ldb	r3,0(r16)
 8007294:	003e7306 	br	8006c64 <__alt_data_end+0xfc006c64>
 8007298:	a880040c 	andi	r2,r21,16
 800729c:	1000e41e 	bne	r2,zero,8007630 <___vfiprintf_internal_r+0xb48>
 80072a0:	a880100c 	andi	r2,r21,64
 80072a4:	1000e226 	beq	r2,zero,8007630 <___vfiprintf_internal_r+0xb48>
 80072a8:	da812117 	ldw	r10,1156(sp)
 80072ac:	002d883a 	mov	r22,zero
 80072b0:	0005883a 	mov	r2,zero
 80072b4:	5480000b 	ldhu	r18,0(r10)
 80072b8:	52800104 	addi	r10,r10,4
 80072bc:	da812115 	stw	r10,1156(sp)
 80072c0:	9009883a 	mov	r4,r18
 80072c4:	003ee706 	br	8006e64 <__alt_data_end+0xfc006e64>
 80072c8:	da812117 	ldw	r10,1156(sp)
 80072cc:	00800044 	movi	r2,1
 80072d0:	54800017 	ldw	r18,0(r10)
 80072d4:	55800117 	ldw	r22,4(r10)
 80072d8:	52800204 	addi	r10,r10,8
 80072dc:	da812115 	stw	r10,1156(sp)
 80072e0:	9588b03a 	or	r4,r18,r22
 80072e4:	003edf06 	br	8006e64 <__alt_data_end+0xfc006e64>
 80072e8:	02c20074 	movhi	r11,2049
 80072ec:	5afc9a04 	addi	r11,r11,-3480
 80072f0:	d9811d85 	stb	r6,1142(sp)
 80072f4:	dac12615 	stw	r11,1176(sp)
 80072f8:	a900080c 	andi	r4,r21,32
 80072fc:	d8812117 	ldw	r2,1156(sp)
 8007300:	2000a526 	beq	r4,zero,8007598 <___vfiprintf_internal_r+0xab0>
 8007304:	da812117 	ldw	r10,1156(sp)
 8007308:	14800017 	ldw	r18,0(r2)
 800730c:	15800117 	ldw	r22,4(r2)
 8007310:	52800204 	addi	r10,r10,8
 8007314:	da812115 	stw	r10,1156(sp)
 8007318:	a880004c 	andi	r2,r21,1
 800731c:	1001d926 	beq	r2,zero,8007a84 <___vfiprintf_internal_r+0xf9c>
 8007320:	9588b03a 	or	r4,r18,r22
 8007324:	20024426 	beq	r4,zero,8007c38 <___vfiprintf_internal_r+0x1150>
 8007328:	00800c04 	movi	r2,48
 800732c:	d8811d05 	stb	r2,1140(sp)
 8007330:	d8c11d45 	stb	r3,1141(sp)
 8007334:	ad400094 	ori	r21,r21,2
 8007338:	00800084 	movi	r2,2
 800733c:	003ec906 	br	8006e64 <__alt_data_end+0xfc006e64>
 8007340:	da812117 	ldw	r10,1156(sp)
 8007344:	04800044 	movi	r18,1
 8007348:	dac10004 	addi	r11,sp,1024
 800734c:	50800017 	ldw	r2,0(r10)
 8007350:	52800104 	addi	r10,r10,4
 8007354:	d8011d85 	stb	zero,1142(sp)
 8007358:	d8810005 	stb	r2,1024(sp)
 800735c:	da812115 	stw	r10,1156(sp)
 8007360:	9023883a 	mov	r17,r18
 8007364:	dac12415 	stw	r11,1168(sp)
 8007368:	0013883a 	mov	r9,zero
 800736c:	003ee206 	br	8006ef8 <__alt_data_end+0xfc006ef8>
 8007370:	ad402014 	ori	r21,r21,128
 8007374:	80c00007 	ldb	r3,0(r16)
 8007378:	003e3a06 	br	8006c64 <__alt_data_end+0xfc006c64>
 800737c:	8015883a 	mov	r10,r16
 8007380:	0027883a 	mov	r19,zero
 8007384:	18bff404 	addi	r2,r3,-48
 8007388:	50c00007 	ldb	r3,0(r10)
 800738c:	9cc002a4 	muli	r19,r19,10
 8007390:	84000044 	addi	r16,r16,1
 8007394:	8015883a 	mov	r10,r16
 8007398:	98a7883a 	add	r19,r19,r2
 800739c:	18bff404 	addi	r2,r3,-48
 80073a0:	28bff92e 	bgeu	r5,r2,8007388 <__alt_data_end+0xfc007388>
 80073a4:	003e3006 	br	8006c68 <__alt_data_end+0xfc006c68>
 80073a8:	ad400414 	ori	r21,r21,16
 80073ac:	d9811d85 	stb	r6,1142(sp)
 80073b0:	a880080c 	andi	r2,r21,32
 80073b4:	d8c12117 	ldw	r3,1156(sp)
 80073b8:	10004b26 	beq	r2,zero,80074e8 <___vfiprintf_internal_r+0xa00>
 80073bc:	da812117 	ldw	r10,1156(sp)
 80073c0:	18800117 	ldw	r2,4(r3)
 80073c4:	1c800017 	ldw	r18,0(r3)
 80073c8:	52800204 	addi	r10,r10,8
 80073cc:	da812115 	stw	r10,1156(sp)
 80073d0:	102d883a 	mov	r22,r2
 80073d4:	1001f116 	blt	r2,zero,8007b9c <___vfiprintf_internal_r+0x10b4>
 80073d8:	db011d83 	ldbu	r12,1142(sp)
 80073dc:	4823883a 	mov	r17,r9
 80073e0:	00800044 	movi	r2,1
 80073e4:	9588b03a 	or	r4,r18,r22
 80073e8:	003ea106 	br	8006e70 <__alt_data_end+0xfc006e70>
 80073ec:	80c00007 	ldb	r3,0(r16)
 80073f0:	82800044 	addi	r10,r16,1
 80073f4:	1b027f26 	beq	r3,r12,8007df4 <___vfiprintf_internal_r+0x130c>
 80073f8:	18bff404 	addi	r2,r3,-48
 80073fc:	5021883a 	mov	r16,r10
 8007400:	0013883a 	mov	r9,zero
 8007404:	28be1836 	bltu	r5,r2,8006c68 <__alt_data_end+0xfc006c68>
 8007408:	80c00007 	ldb	r3,0(r16)
 800740c:	4a4002a4 	muli	r9,r9,10
 8007410:	84000044 	addi	r16,r16,1
 8007414:	1253883a 	add	r9,r2,r9
 8007418:	18bff404 	addi	r2,r3,-48
 800741c:	28bffa2e 	bgeu	r5,r2,8007408 <__alt_data_end+0xfc007408>
 8007420:	483e110e 	bge	r9,zero,8006c68 <__alt_data_end+0xfc006c68>
 8007424:	027fffc4 	movi	r9,-1
 8007428:	003e0f06 	br	8006c68 <__alt_data_end+0xfc006c68>
 800742c:	d9811d85 	stb	r6,1142(sp)
 8007430:	a880080c 	andi	r2,r21,32
 8007434:	1001ee26 	beq	r2,zero,8007bf0 <___vfiprintf_internal_r+0x1108>
 8007438:	da812117 	ldw	r10,1156(sp)
 800743c:	dac12217 	ldw	r11,1160(sp)
 8007440:	50800017 	ldw	r2,0(r10)
 8007444:	5807d7fa 	srai	r3,r11,31
 8007448:	52800104 	addi	r10,r10,4
 800744c:	da812115 	stw	r10,1156(sp)
 8007450:	12c00015 	stw	r11,0(r2)
 8007454:	10c00115 	stw	r3,4(r2)
 8007458:	003dd806 	br	8006bbc <__alt_data_end+0xfc006bbc>
 800745c:	30803fcc 	andi	r2,r6,255
 8007460:	1080201c 	xori	r2,r2,128
 8007464:	10bfe004 	addi	r2,r2,-128
 8007468:	1001df1e 	bne	r2,zero,8007be8 <___vfiprintf_internal_r+0x1100>
 800746c:	01800804 	movi	r6,32
 8007470:	80c00007 	ldb	r3,0(r16)
 8007474:	003dfb06 	br	8006c64 <__alt_data_end+0xfc006c64>
 8007478:	da812117 	ldw	r10,1156(sp)
 800747c:	dac12117 	ldw	r11,1156(sp)
 8007480:	d8011d85 	stb	zero,1142(sp)
 8007484:	52800017 	ldw	r10,0(r10)
 8007488:	5d800104 	addi	r22,r11,4
 800748c:	da812415 	stw	r10,1168(sp)
 8007490:	50023b26 	beq	r10,zero,8007d80 <___vfiprintf_internal_r+0x1298>
 8007494:	d9012417 	ldw	r4,1168(sp)
 8007498:	48021f16 	blt	r9,zero,8007d18 <___vfiprintf_internal_r+0x1230>
 800749c:	480d883a 	mov	r6,r9
 80074a0:	000b883a 	mov	r5,zero
 80074a4:	da012a15 	stw	r8,1192(sp)
 80074a8:	da412b15 	stw	r9,1196(sp)
 80074ac:	80053c40 	call	80053c4 <memchr>
 80074b0:	da012a17 	ldw	r8,1192(sp)
 80074b4:	da412b17 	ldw	r9,1196(sp)
 80074b8:	10024726 	beq	r2,zero,8007dd8 <___vfiprintf_internal_r+0x12f0>
 80074bc:	d8c12417 	ldw	r3,1168(sp)
 80074c0:	10e3c83a 	sub	r17,r2,r3
 80074c4:	4c41f616 	blt	r9,r17,8007ca0 <___vfiprintf_internal_r+0x11b8>
 80074c8:	db011d83 	ldbu	r12,1142(sp)
 80074cc:	dd812115 	stw	r22,1156(sp)
 80074d0:	0013883a 	mov	r9,zero
 80074d4:	003e8006 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 80074d8:	d9811d85 	stb	r6,1142(sp)
 80074dc:	a880080c 	andi	r2,r21,32
 80074e0:	d8c12117 	ldw	r3,1156(sp)
 80074e4:	103fb51e 	bne	r2,zero,80073bc <__alt_data_end+0xfc0073bc>
 80074e8:	a880040c 	andi	r2,r21,16
 80074ec:	10015e1e 	bne	r2,zero,8007a68 <___vfiprintf_internal_r+0xf80>
 80074f0:	a880100c 	andi	r2,r21,64
 80074f4:	10015c26 	beq	r2,zero,8007a68 <___vfiprintf_internal_r+0xf80>
 80074f8:	1c80000f 	ldh	r18,0(r3)
 80074fc:	da812117 	ldw	r10,1156(sp)
 8007500:	902dd7fa 	srai	r22,r18,31
 8007504:	52800104 	addi	r10,r10,4
 8007508:	da812115 	stw	r10,1156(sp)
 800750c:	b005883a 	mov	r2,r22
 8007510:	003fb006 	br	80073d4 <__alt_data_end+0xfc0073d4>
 8007514:	da812117 	ldw	r10,1156(sp)
 8007518:	00800c04 	movi	r2,48
 800751c:	02c20074 	movhi	r11,2049
 8007520:	54800017 	ldw	r18,0(r10)
 8007524:	d8811d05 	stb	r2,1140(sp)
 8007528:	52800104 	addi	r10,r10,4
 800752c:	00801e04 	movi	r2,120
 8007530:	5afc9f04 	addi	r11,r11,-3460
 8007534:	d8811d45 	stb	r2,1141(sp)
 8007538:	002d883a 	mov	r22,zero
 800753c:	ad400094 	ori	r21,r21,2
 8007540:	da812115 	stw	r10,1156(sp)
 8007544:	dac12615 	stw	r11,1176(sp)
 8007548:	00800084 	movi	r2,2
 800754c:	9009883a 	mov	r4,r18
 8007550:	003e4406 	br	8006e64 <__alt_data_end+0xfc006e64>
 8007554:	ad400814 	ori	r21,r21,32
 8007558:	80c00007 	ldb	r3,0(r16)
 800755c:	003dc106 	br	8006c64 <__alt_data_end+0xfc006c64>
 8007560:	ad401014 	ori	r21,r21,64
 8007564:	80c00007 	ldb	r3,0(r16)
 8007568:	003dbe06 	br	8006c64 <__alt_data_end+0xfc006c64>
 800756c:	80c00007 	ldb	r3,0(r16)
 8007570:	19c1de26 	beq	r3,r7,8007cec <___vfiprintf_internal_r+0x1204>
 8007574:	ad400414 	ori	r21,r21,16
 8007578:	003dba06 	br	8006c64 <__alt_data_end+0xfc006c64>
 800757c:	00820074 	movhi	r2,2049
 8007580:	10bc9f04 	addi	r2,r2,-3460
 8007584:	d8812615 	stw	r2,1176(sp)
 8007588:	d9811d85 	stb	r6,1142(sp)
 800758c:	a900080c 	andi	r4,r21,32
 8007590:	d8812117 	ldw	r2,1156(sp)
 8007594:	203f5b1e 	bne	r4,zero,8007304 <__alt_data_end+0xfc007304>
 8007598:	a900040c 	andi	r4,r21,16
 800759c:	2001a826 	beq	r4,zero,8007c40 <___vfiprintf_internal_r+0x1158>
 80075a0:	dac12117 	ldw	r11,1156(sp)
 80075a4:	14800017 	ldw	r18,0(r2)
 80075a8:	002d883a 	mov	r22,zero
 80075ac:	5ac00104 	addi	r11,r11,4
 80075b0:	dac12115 	stw	r11,1156(sp)
 80075b4:	003f5806 	br	8007318 <__alt_data_end+0xfc007318>
 80075b8:	da812117 	ldw	r10,1156(sp)
 80075bc:	54c00017 	ldw	r19,0(r10)
 80075c0:	50800104 	addi	r2,r10,4
 80075c4:	983f2f16 	blt	r19,zero,8007284 <__alt_data_end+0xfc007284>
 80075c8:	d8812115 	stw	r2,1156(sp)
 80075cc:	80c00007 	ldb	r3,0(r16)
 80075d0:	003da406 	br	8006c64 <__alt_data_end+0xfc006c64>
 80075d4:	01800ac4 	movi	r6,43
 80075d8:	80c00007 	ldb	r3,0(r16)
 80075dc:	003da106 	br	8006c64 <__alt_data_end+0xfc006c64>
 80075e0:	ad400054 	ori	r21,r21,1
 80075e4:	80c00007 	ldb	r3,0(r16)
 80075e8:	003d9e06 	br	8006c64 <__alt_data_end+0xfc006c64>
 80075ec:	d9811d85 	stb	r6,1142(sp)
 80075f0:	18007126 	beq	r3,zero,80077b8 <___vfiprintf_internal_r+0xcd0>
 80075f4:	04800044 	movi	r18,1
 80075f8:	d8c10005 	stb	r3,1024(sp)
 80075fc:	d8c10004 	addi	r3,sp,1024
 8007600:	d8011d85 	stb	zero,1142(sp)
 8007604:	9023883a 	mov	r17,r18
 8007608:	d8c12415 	stw	r3,1168(sp)
 800760c:	003f5606 	br	8007368 <__alt_data_end+0xfc007368>
 8007610:	dac12117 	ldw	r11,1156(sp)
 8007614:	002d883a 	mov	r22,zero
 8007618:	00800044 	movi	r2,1
 800761c:	5c800017 	ldw	r18,0(r11)
 8007620:	5ac00104 	addi	r11,r11,4
 8007624:	dac12115 	stw	r11,1156(sp)
 8007628:	9009883a 	mov	r4,r18
 800762c:	003e0d06 	br	8006e64 <__alt_data_end+0xfc006e64>
 8007630:	dac12117 	ldw	r11,1156(sp)
 8007634:	002d883a 	mov	r22,zero
 8007638:	0005883a 	mov	r2,zero
 800763c:	5c800017 	ldw	r18,0(r11)
 8007640:	5ac00104 	addi	r11,r11,4
 8007644:	dac12115 	stw	r11,1156(sp)
 8007648:	9009883a 	mov	r4,r18
 800764c:	003e0506 	br	8006e64 <__alt_data_end+0xfc006e64>
 8007650:	d9012017 	ldw	r4,1152(sp)
 8007654:	a00b883a 	mov	r5,r20
 8007658:	d9811a04 	addi	r6,sp,1128
 800765c:	d8c12a15 	stw	r3,1192(sp)
 8007660:	db012b15 	stw	r12,1196(sp)
 8007664:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007668:	d8c12a17 	ldw	r3,1192(sp)
 800766c:	db012b17 	ldw	r12,1196(sp)
 8007670:	1000571e 	bne	r2,zero,80077d0 <___vfiprintf_internal_r+0xce8>
 8007674:	d9811b17 	ldw	r6,1132(sp)
 8007678:	d8811c17 	ldw	r2,1136(sp)
 800767c:	d811883a 	mov	r8,sp
 8007680:	31400044 	addi	r5,r6,1
 8007684:	003e3306 	br	8006f54 <__alt_data_end+0xfc006f54>
 8007688:	d9411b17 	ldw	r5,1132(sp)
 800768c:	d8c11c17 	ldw	r3,1136(sp)
 8007690:	28800044 	addi	r2,r5,1
 8007694:	d9011d87 	ldb	r4,1142(sp)
 8007698:	203e4d26 	beq	r4,zero,8006fd0 <__alt_data_end+0xfc006fd0>
 800769c:	01000044 	movi	r4,1
 80076a0:	d9411d84 	addi	r5,sp,1142
 80076a4:	1907883a 	add	r3,r3,r4
 80076a8:	41400015 	stw	r5,0(r8)
 80076ac:	41000115 	stw	r4,4(r8)
 80076b0:	d8c11c15 	stw	r3,1136(sp)
 80076b4:	d8811b15 	stw	r2,1132(sp)
 80076b8:	014001c4 	movi	r5,7
 80076bc:	2880aa16 	blt	r5,r2,8007968 <___vfiprintf_internal_r+0xe80>
 80076c0:	100b883a 	mov	r5,r2
 80076c4:	42000204 	addi	r8,r8,8
 80076c8:	10800044 	addi	r2,r2,1
 80076cc:	003e4006 	br	8006fd0 <__alt_data_end+0xfc006fd0>
 80076d0:	d9012017 	ldw	r4,1152(sp)
 80076d4:	a00b883a 	mov	r5,r20
 80076d8:	d9811a04 	addi	r6,sp,1128
 80076dc:	d9c12a15 	stw	r7,1192(sp)
 80076e0:	db012b15 	stw	r12,1196(sp)
 80076e4:	80069d40 	call	80069d4 <__sprint_r.part.0>
 80076e8:	d9c12a17 	ldw	r7,1192(sp)
 80076ec:	db012b17 	ldw	r12,1196(sp)
 80076f0:	1000371e 	bne	r2,zero,80077d0 <___vfiprintf_internal_r+0xce8>
 80076f4:	d9411b17 	ldw	r5,1132(sp)
 80076f8:	d8c11c17 	ldw	r3,1136(sp)
 80076fc:	d811883a 	mov	r8,sp
 8007700:	28800044 	addi	r2,r5,1
 8007704:	003e4d06 	br	800703c <__alt_data_end+0xfc00703c>
 8007708:	10803fcc 	andi	r2,r2,255
 800770c:	00c00044 	movi	r3,1
 8007710:	10fddf1e 	bne	r2,r3,8006e90 <__alt_data_end+0xfc006e90>
 8007714:	b000021e 	bne	r22,zero,8007720 <___vfiprintf_internal_r+0xc38>
 8007718:	00800244 	movi	r2,9
 800771c:	1480202e 	bgeu	r2,r18,80077a0 <___vfiprintf_internal_r+0xcb8>
 8007720:	dc012515 	stw	r16,1172(sp)
 8007724:	dc410a04 	addi	r17,sp,1064
 8007728:	9021883a 	mov	r16,r18
 800772c:	da012415 	stw	r8,1168(sp)
 8007730:	b025883a 	mov	r18,r22
 8007734:	da412315 	stw	r9,1164(sp)
 8007738:	602d883a 	mov	r22,r12
 800773c:	8009883a 	mov	r4,r16
 8007740:	900b883a 	mov	r5,r18
 8007744:	01800284 	movi	r6,10
 8007748:	000f883a 	mov	r7,zero
 800774c:	80099000 	call	8009900 <__umoddi3>
 8007750:	10800c04 	addi	r2,r2,48
 8007754:	8c7fffc4 	addi	r17,r17,-1
 8007758:	8009883a 	mov	r4,r16
 800775c:	900b883a 	mov	r5,r18
 8007760:	01800284 	movi	r6,10
 8007764:	000f883a 	mov	r7,zero
 8007768:	88800005 	stb	r2,0(r17)
 800776c:	80093400 	call	8009340 <__udivdi3>
 8007770:	1021883a 	mov	r16,r2
 8007774:	10c4b03a 	or	r2,r2,r3
 8007778:	1825883a 	mov	r18,r3
 800777c:	103fef1e 	bne	r2,zero,800773c <__alt_data_end+0xfc00773c>
 8007780:	da811e17 	ldw	r10,1144(sp)
 8007784:	da012417 	ldw	r8,1168(sp)
 8007788:	da412317 	ldw	r9,1164(sp)
 800778c:	dc412415 	stw	r17,1168(sp)
 8007790:	b019883a 	mov	r12,r22
 8007794:	dc012517 	ldw	r16,1172(sp)
 8007798:	5463c83a 	sub	r17,r10,r17
 800779c:	003dce06 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 80077a0:	94800c04 	addi	r18,r18,48
 80077a4:	d8c109c4 	addi	r3,sp,1063
 80077a8:	dc8109c5 	stb	r18,1063(sp)
 80077ac:	dc412717 	ldw	r17,1180(sp)
 80077b0:	d8c12415 	stw	r3,1168(sp)
 80077b4:	003dc806 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 80077b8:	d8811c17 	ldw	r2,1136(sp)
 80077bc:	10000426 	beq	r2,zero,80077d0 <___vfiprintf_internal_r+0xce8>
 80077c0:	d9012017 	ldw	r4,1152(sp)
 80077c4:	a00b883a 	mov	r5,r20
 80077c8:	d9811a04 	addi	r6,sp,1128
 80077cc:	80069d40 	call	80069d4 <__sprint_r.part.0>
 80077d0:	a080030b 	ldhu	r2,12(r20)
 80077d4:	1080100c 	andi	r2,r2,64
 80077d8:	103e9b1e 	bne	r2,zero,8007248 <__alt_data_end+0xfc007248>
 80077dc:	d8812217 	ldw	r2,1160(sp)
 80077e0:	003e9a06 	br	800724c <__alt_data_end+0xfc00724c>
 80077e4:	d9012017 	ldw	r4,1152(sp)
 80077e8:	a00b883a 	mov	r5,r20
 80077ec:	d9811a04 	addi	r6,sp,1128
 80077f0:	80069d40 	call	80069d4 <__sprint_r.part.0>
 80077f4:	103ff61e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 80077f8:	d9011b17 	ldw	r4,1132(sp)
 80077fc:	d8c11c17 	ldw	r3,1136(sp)
 8007800:	d811883a 	mov	r8,sp
 8007804:	21400044 	addi	r5,r4,1
 8007808:	003e4006 	br	800710c <__alt_data_end+0xfc00710c>
 800780c:	1800d61e 	bne	r3,zero,8007b68 <___vfiprintf_internal_r+0x1080>
 8007810:	dac12417 	ldw	r11,1168(sp)
 8007814:	00800044 	movi	r2,1
 8007818:	dc400115 	stw	r17,4(sp)
 800781c:	dac00015 	stw	r11,0(sp)
 8007820:	dc411c15 	stw	r17,1136(sp)
 8007824:	d8811b15 	stw	r2,1132(sp)
 8007828:	8807883a 	mov	r3,r17
 800782c:	d811883a 	mov	r8,sp
 8007830:	42000204 	addi	r8,r8,8
 8007834:	aac0010c 	andi	r11,r21,4
 8007838:	58000226 	beq	r11,zero,8007844 <___vfiprintf_internal_r+0xd5c>
 800783c:	9ca3c83a 	sub	r17,r19,r18
 8007840:	047e2616 	blt	zero,r17,80070dc <__alt_data_end+0xfc0070dc>
 8007844:	94c0010e 	bge	r18,r19,800784c <___vfiprintf_internal_r+0xd64>
 8007848:	9825883a 	mov	r18,r19
 800784c:	da812217 	ldw	r10,1160(sp)
 8007850:	5495883a 	add	r10,r10,r18
 8007854:	da812215 	stw	r10,1160(sp)
 8007858:	183e4826 	beq	r3,zero,800717c <__alt_data_end+0xfc00717c>
 800785c:	d9012017 	ldw	r4,1152(sp)
 8007860:	a00b883a 	mov	r5,r20
 8007864:	d9811a04 	addi	r6,sp,1128
 8007868:	80069d40 	call	80069d4 <__sprint_r.part.0>
 800786c:	103e4326 	beq	r2,zero,800717c <__alt_data_end+0xfc00717c>
 8007870:	003fd706 	br	80077d0 <__alt_data_end+0xfc0077d0>
 8007874:	9cadc83a 	sub	r22,r19,r18
 8007878:	05bde40e 	bge	zero,r22,800700c <__alt_data_end+0xfc00700c>
 800787c:	03000404 	movi	r12,16
 8007880:	6581500e 	bge	r12,r22,8007dc4 <___vfiprintf_internal_r+0x12dc>
 8007884:	00820074 	movhi	r2,2049
 8007888:	10bd0004 	addi	r2,r2,-3072
 800788c:	d8812315 	stw	r2,1164(sp)
 8007890:	8005883a 	mov	r2,r16
 8007894:	038001c4 	movi	r14,7
 8007898:	b021883a 	mov	r16,r22
 800789c:	da412515 	stw	r9,1172(sp)
 80078a0:	102d883a 	mov	r22,r2
 80078a4:	00000506 	br	80078bc <___vfiprintf_internal_r+0xdd4>
 80078a8:	29000084 	addi	r4,r5,2
 80078ac:	42000204 	addi	r8,r8,8
 80078b0:	100b883a 	mov	r5,r2
 80078b4:	843ffc04 	addi	r16,r16,-16
 80078b8:	64000d0e 	bge	r12,r16,80078f0 <___vfiprintf_internal_r+0xe08>
 80078bc:	18c00404 	addi	r3,r3,16
 80078c0:	28800044 	addi	r2,r5,1
 80078c4:	45c00015 	stw	r23,0(r8)
 80078c8:	43000115 	stw	r12,4(r8)
 80078cc:	d8c11c15 	stw	r3,1136(sp)
 80078d0:	d8811b15 	stw	r2,1132(sp)
 80078d4:	70bff40e 	bge	r14,r2,80078a8 <__alt_data_end+0xfc0078a8>
 80078d8:	1800151e 	bne	r3,zero,8007930 <___vfiprintf_internal_r+0xe48>
 80078dc:	843ffc04 	addi	r16,r16,-16
 80078e0:	000b883a 	mov	r5,zero
 80078e4:	01000044 	movi	r4,1
 80078e8:	d811883a 	mov	r8,sp
 80078ec:	643ff316 	blt	r12,r16,80078bc <__alt_data_end+0xfc0078bc>
 80078f0:	da412517 	ldw	r9,1172(sp)
 80078f4:	b005883a 	mov	r2,r22
 80078f8:	802d883a 	mov	r22,r16
 80078fc:	1021883a 	mov	r16,r2
 8007900:	da812317 	ldw	r10,1164(sp)
 8007904:	1d87883a 	add	r3,r3,r22
 8007908:	45800115 	stw	r22,4(r8)
 800790c:	42800015 	stw	r10,0(r8)
 8007910:	d8c11c15 	stw	r3,1136(sp)
 8007914:	d9011b15 	stw	r4,1132(sp)
 8007918:	008001c4 	movi	r2,7
 800791c:	11008d16 	blt	r2,r4,8007b54 <___vfiprintf_internal_r+0x106c>
 8007920:	42000204 	addi	r8,r8,8
 8007924:	20800044 	addi	r2,r4,1
 8007928:	200b883a 	mov	r5,r4
 800792c:	003db706 	br	800700c <__alt_data_end+0xfc00700c>
 8007930:	d9012017 	ldw	r4,1152(sp)
 8007934:	a00b883a 	mov	r5,r20
 8007938:	d9811a04 	addi	r6,sp,1128
 800793c:	db012b15 	stw	r12,1196(sp)
 8007940:	db812a15 	stw	r14,1192(sp)
 8007944:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007948:	db012b17 	ldw	r12,1196(sp)
 800794c:	db812a17 	ldw	r14,1192(sp)
 8007950:	103f9f1e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007954:	d9411b17 	ldw	r5,1132(sp)
 8007958:	d8c11c17 	ldw	r3,1136(sp)
 800795c:	d811883a 	mov	r8,sp
 8007960:	29000044 	addi	r4,r5,1
 8007964:	003fd306 	br	80078b4 <__alt_data_end+0xfc0078b4>
 8007968:	18006c1e 	bne	r3,zero,8007b1c <___vfiprintf_internal_r+0x1034>
 800796c:	70004f26 	beq	r14,zero,8007aac <___vfiprintf_internal_r+0xfc4>
 8007970:	d8811d04 	addi	r2,sp,1140
 8007974:	00c00084 	movi	r3,2
 8007978:	d8800015 	stw	r2,0(sp)
 800797c:	d8c00115 	stw	r3,4(sp)
 8007980:	2005883a 	mov	r2,r4
 8007984:	d811883a 	mov	r8,sp
 8007988:	003d9b06 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 800798c:	1800571e 	bne	r3,zero,8007aec <___vfiprintf_internal_r+0x1004>
 8007990:	000b883a 	mov	r5,zero
 8007994:	00800044 	movi	r2,1
 8007998:	d811883a 	mov	r8,sp
 800799c:	003d9906 	br	8007004 <__alt_data_end+0xfc007004>
 80079a0:	10803fcc 	andi	r2,r2,255
 80079a4:	1000251e 	bne	r2,zero,8007a3c <___vfiprintf_internal_r+0xf54>
 80079a8:	a880004c 	andi	r2,r21,1
 80079ac:	10007826 	beq	r2,zero,8007b90 <___vfiprintf_internal_r+0x10a8>
 80079b0:	00800c04 	movi	r2,48
 80079b4:	d8c109c4 	addi	r3,sp,1063
 80079b8:	d88109c5 	stb	r2,1063(sp)
 80079bc:	dc412717 	ldw	r17,1180(sp)
 80079c0:	d8c12415 	stw	r3,1168(sp)
 80079c4:	003d4406 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 80079c8:	d9012617 	ldw	r4,1176(sp)
 80079cc:	dc410a04 	addi	r17,sp,1064
 80079d0:	908003cc 	andi	r2,r18,15
 80079d4:	b006973a 	slli	r3,r22,28
 80079d8:	2085883a 	add	r2,r4,r2
 80079dc:	9024d13a 	srli	r18,r18,4
 80079e0:	10800003 	ldbu	r2,0(r2)
 80079e4:	b02cd13a 	srli	r22,r22,4
 80079e8:	8c7fffc4 	addi	r17,r17,-1
 80079ec:	1ca4b03a 	or	r18,r3,r18
 80079f0:	88800005 	stb	r2,0(r17)
 80079f4:	9584b03a 	or	r2,r18,r22
 80079f8:	103ff51e 	bne	r2,zero,80079d0 <__alt_data_end+0xfc0079d0>
 80079fc:	dac11e17 	ldw	r11,1144(sp)
 8007a00:	dc412415 	stw	r17,1168(sp)
 8007a04:	5c63c83a 	sub	r17,r11,r17
 8007a08:	003d3306 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007a0c:	1800941e 	bne	r3,zero,8007c60 <___vfiprintf_internal_r+0x1178>
 8007a10:	d8811d87 	ldb	r2,1142(sp)
 8007a14:	10006b26 	beq	r2,zero,8007bc4 <___vfiprintf_internal_r+0x10dc>
 8007a18:	00c00044 	movi	r3,1
 8007a1c:	d9011d84 	addi	r4,sp,1142
 8007a20:	1805883a 	mov	r2,r3
 8007a24:	d9000015 	stw	r4,0(sp)
 8007a28:	d8c00115 	stw	r3,4(sp)
 8007a2c:	d811883a 	mov	r8,sp
 8007a30:	003f2306 	br	80076c0 <__alt_data_end+0xfc0076c0>
 8007a34:	8023883a 	mov	r17,r16
 8007a38:	003c7d06 	br	8006c30 <__alt_data_end+0xfc006c30>
 8007a3c:	da810a04 	addi	r10,sp,1064
 8007a40:	da812415 	stw	r10,1168(sp)
 8007a44:	003d2406 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007a48:	d9012017 	ldw	r4,1152(sp)
 8007a4c:	a00b883a 	mov	r5,r20
 8007a50:	d9811a04 	addi	r6,sp,1128
 8007a54:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007a58:	103f5d1e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007a5c:	d8c11c17 	ldw	r3,1136(sp)
 8007a60:	d811883a 	mov	r8,sp
 8007a64:	003f7306 	br	8007834 <__alt_data_end+0xfc007834>
 8007a68:	1c800017 	ldw	r18,0(r3)
 8007a6c:	dac12117 	ldw	r11,1156(sp)
 8007a70:	902dd7fa 	srai	r22,r18,31
 8007a74:	5ac00104 	addi	r11,r11,4
 8007a78:	dac12115 	stw	r11,1156(sp)
 8007a7c:	b005883a 	mov	r2,r22
 8007a80:	003e5406 	br	80073d4 <__alt_data_end+0xfc0073d4>
 8007a84:	00800084 	movi	r2,2
 8007a88:	9588b03a 	or	r4,r18,r22
 8007a8c:	003cf506 	br	8006e64 <__alt_data_end+0xfc006e64>
 8007a90:	d9012017 	ldw	r4,1152(sp)
 8007a94:	a00b883a 	mov	r5,r20
 8007a98:	d9811a04 	addi	r6,sp,1128
 8007a9c:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007aa0:	103f4b1e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007aa4:	d811883a 	mov	r8,sp
 8007aa8:	003cd106 	br	8006df0 <__alt_data_end+0xfc006df0>
 8007aac:	000b883a 	mov	r5,zero
 8007ab0:	2005883a 	mov	r2,r4
 8007ab4:	d811883a 	mov	r8,sp
 8007ab8:	003d5206 	br	8007004 <__alt_data_end+0xfc007004>
 8007abc:	10803fcc 	andi	r2,r2,255
 8007ac0:	1080201c 	xori	r2,r2,128
 8007ac4:	10bfe004 	addi	r2,r2,-128
 8007ac8:	01000c04 	movi	r4,48
 8007acc:	11008e26 	beq	r2,r4,8007d08 <___vfiprintf_internal_r+0x1220>
 8007ad0:	da812417 	ldw	r10,1168(sp)
 8007ad4:	dac11e17 	ldw	r11,1144(sp)
 8007ad8:	193fffc5 	stb	r4,-1(r3)
 8007adc:	52bfffc4 	addi	r10,r10,-1
 8007ae0:	da812415 	stw	r10,1168(sp)
 8007ae4:	5aa3c83a 	sub	r17,r11,r10
 8007ae8:	003cfb06 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007aec:	d9012017 	ldw	r4,1152(sp)
 8007af0:	a00b883a 	mov	r5,r20
 8007af4:	d9811a04 	addi	r6,sp,1128
 8007af8:	da412b15 	stw	r9,1196(sp)
 8007afc:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007b00:	da412b17 	ldw	r9,1196(sp)
 8007b04:	103f321e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007b08:	d9411b17 	ldw	r5,1132(sp)
 8007b0c:	d8c11c17 	ldw	r3,1136(sp)
 8007b10:	d811883a 	mov	r8,sp
 8007b14:	28800044 	addi	r2,r5,1
 8007b18:	003d3a06 	br	8007004 <__alt_data_end+0xfc007004>
 8007b1c:	d9012017 	ldw	r4,1152(sp)
 8007b20:	a00b883a 	mov	r5,r20
 8007b24:	d9811a04 	addi	r6,sp,1128
 8007b28:	da412b15 	stw	r9,1196(sp)
 8007b2c:	db812a15 	stw	r14,1192(sp)
 8007b30:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007b34:	da412b17 	ldw	r9,1196(sp)
 8007b38:	db812a17 	ldw	r14,1192(sp)
 8007b3c:	103f241e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007b40:	d9411b17 	ldw	r5,1132(sp)
 8007b44:	d8c11c17 	ldw	r3,1136(sp)
 8007b48:	d811883a 	mov	r8,sp
 8007b4c:	28800044 	addi	r2,r5,1
 8007b50:	003d1f06 	br	8006fd0 <__alt_data_end+0xfc006fd0>
 8007b54:	1800781e 	bne	r3,zero,8007d38 <___vfiprintf_internal_r+0x1250>
 8007b58:	000b883a 	mov	r5,zero
 8007b5c:	00800044 	movi	r2,1
 8007b60:	d811883a 	mov	r8,sp
 8007b64:	003d2906 	br	800700c <__alt_data_end+0xfc00700c>
 8007b68:	d9012017 	ldw	r4,1152(sp)
 8007b6c:	a00b883a 	mov	r5,r20
 8007b70:	d9811a04 	addi	r6,sp,1128
 8007b74:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007b78:	103f151e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007b7c:	d8811b17 	ldw	r2,1132(sp)
 8007b80:	d8c11c17 	ldw	r3,1136(sp)
 8007b84:	d811883a 	mov	r8,sp
 8007b88:	10800044 	addi	r2,r2,1
 8007b8c:	003d4406 	br	80070a0 <__alt_data_end+0xfc0070a0>
 8007b90:	dac10a04 	addi	r11,sp,1064
 8007b94:	dac12415 	stw	r11,1168(sp)
 8007b98:	003ccf06 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007b9c:	04a5c83a 	sub	r18,zero,r18
 8007ba0:	9004c03a 	cmpne	r2,r18,zero
 8007ba4:	05adc83a 	sub	r22,zero,r22
 8007ba8:	b0adc83a 	sub	r22,r22,r2
 8007bac:	03000b44 	movi	r12,45
 8007bb0:	db011d85 	stb	r12,1142(sp)
 8007bb4:	4823883a 	mov	r17,r9
 8007bb8:	00800044 	movi	r2,1
 8007bbc:	9588b03a 	or	r4,r18,r22
 8007bc0:	003cab06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007bc4:	000b883a 	mov	r5,zero
 8007bc8:	00800044 	movi	r2,1
 8007bcc:	d811883a 	mov	r8,sp
 8007bd0:	703d0c26 	beq	r14,zero,8007004 <__alt_data_end+0xfc007004>
 8007bd4:	00c00084 	movi	r3,2
 8007bd8:	d9011d04 	addi	r4,sp,1140
 8007bdc:	d9000015 	stw	r4,0(sp)
 8007be0:	d8c00115 	stw	r3,4(sp)
 8007be4:	003d0406 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007be8:	80c00007 	ldb	r3,0(r16)
 8007bec:	003c1d06 	br	8006c64 <__alt_data_end+0xfc006c64>
 8007bf0:	a880040c 	andi	r2,r21,16
 8007bf4:	1000091e 	bne	r2,zero,8007c1c <___vfiprintf_internal_r+0x1134>
 8007bf8:	aac0100c 	andi	r11,r21,64
 8007bfc:	58000726 	beq	r11,zero,8007c1c <___vfiprintf_internal_r+0x1134>
 8007c00:	da812117 	ldw	r10,1156(sp)
 8007c04:	dac12217 	ldw	r11,1160(sp)
 8007c08:	50800017 	ldw	r2,0(r10)
 8007c0c:	52800104 	addi	r10,r10,4
 8007c10:	da812115 	stw	r10,1156(sp)
 8007c14:	12c0000d 	sth	r11,0(r2)
 8007c18:	003be806 	br	8006bbc <__alt_data_end+0xfc006bbc>
 8007c1c:	da812117 	ldw	r10,1156(sp)
 8007c20:	dac12217 	ldw	r11,1160(sp)
 8007c24:	50800017 	ldw	r2,0(r10)
 8007c28:	52800104 	addi	r10,r10,4
 8007c2c:	da812115 	stw	r10,1156(sp)
 8007c30:	12c00015 	stw	r11,0(r2)
 8007c34:	003be106 	br	8006bbc <__alt_data_end+0xfc006bbc>
 8007c38:	00800084 	movi	r2,2
 8007c3c:	003c8906 	br	8006e64 <__alt_data_end+0xfc006e64>
 8007c40:	a900100c 	andi	r4,r21,64
 8007c44:	20001f26 	beq	r4,zero,8007cc4 <___vfiprintf_internal_r+0x11dc>
 8007c48:	da812117 	ldw	r10,1156(sp)
 8007c4c:	1480000b 	ldhu	r18,0(r2)
 8007c50:	002d883a 	mov	r22,zero
 8007c54:	52800104 	addi	r10,r10,4
 8007c58:	da812115 	stw	r10,1156(sp)
 8007c5c:	003dae06 	br	8007318 <__alt_data_end+0xfc007318>
 8007c60:	d9012017 	ldw	r4,1152(sp)
 8007c64:	a00b883a 	mov	r5,r20
 8007c68:	d9811a04 	addi	r6,sp,1128
 8007c6c:	da412b15 	stw	r9,1196(sp)
 8007c70:	db812a15 	stw	r14,1192(sp)
 8007c74:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007c78:	da412b17 	ldw	r9,1196(sp)
 8007c7c:	db812a17 	ldw	r14,1192(sp)
 8007c80:	103ed31e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007c84:	d9411b17 	ldw	r5,1132(sp)
 8007c88:	d8c11c17 	ldw	r3,1136(sp)
 8007c8c:	d811883a 	mov	r8,sp
 8007c90:	28800044 	addi	r2,r5,1
 8007c94:	003e7f06 	br	8007694 <__alt_data_end+0xfc007694>
 8007c98:	9825883a 	mov	r18,r19
 8007c9c:	003d3406 	br	8007170 <__alt_data_end+0xfc007170>
 8007ca0:	4823883a 	mov	r17,r9
 8007ca4:	003e0806 	br	80074c8 <__alt_data_end+0xfc0074c8>
 8007ca8:	d9012017 	ldw	r4,1152(sp)
 8007cac:	a00b883a 	mov	r5,r20
 8007cb0:	d9811a04 	addi	r6,sp,1128
 8007cb4:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007cb8:	103ec51e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007cbc:	d8c11c17 	ldw	r3,1136(sp)
 8007cc0:	003ee006 	br	8007844 <__alt_data_end+0xfc007844>
 8007cc4:	dac12117 	ldw	r11,1156(sp)
 8007cc8:	14800017 	ldw	r18,0(r2)
 8007ccc:	002d883a 	mov	r22,zero
 8007cd0:	5ac00104 	addi	r11,r11,4
 8007cd4:	dac12115 	stw	r11,1156(sp)
 8007cd8:	003d8f06 	br	8007318 <__alt_data_end+0xfc007318>
 8007cdc:	02c20074 	movhi	r11,2049
 8007ce0:	5afd0004 	addi	r11,r11,-3072
 8007ce4:	dac12315 	stw	r11,1164(sp)
 8007ce8:	003ce306 	br	8007078 <__alt_data_end+0xfc007078>
 8007cec:	80c00043 	ldbu	r3,1(r16)
 8007cf0:	ad400814 	ori	r21,r21,32
 8007cf4:	84000044 	addi	r16,r16,1
 8007cf8:	18c03fcc 	andi	r3,r3,255
 8007cfc:	18c0201c 	xori	r3,r3,128
 8007d00:	18ffe004 	addi	r3,r3,-128
 8007d04:	003bd706 	br	8006c64 <__alt_data_end+0xfc006c64>
 8007d08:	dac11e17 	ldw	r11,1144(sp)
 8007d0c:	d8c12417 	ldw	r3,1168(sp)
 8007d10:	58e3c83a 	sub	r17,r11,r3
 8007d14:	003c7006 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007d18:	da012a15 	stw	r8,1192(sp)
 8007d1c:	800693c0 	call	800693c <strlen>
 8007d20:	1023883a 	mov	r17,r2
 8007d24:	db011d83 	ldbu	r12,1142(sp)
 8007d28:	dd812115 	stw	r22,1156(sp)
 8007d2c:	0013883a 	mov	r9,zero
 8007d30:	da012a17 	ldw	r8,1192(sp)
 8007d34:	003c6806 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007d38:	d9012017 	ldw	r4,1152(sp)
 8007d3c:	a00b883a 	mov	r5,r20
 8007d40:	d9811a04 	addi	r6,sp,1128
 8007d44:	da412b15 	stw	r9,1196(sp)
 8007d48:	80069d40 	call	80069d4 <__sprint_r.part.0>
 8007d4c:	da412b17 	ldw	r9,1196(sp)
 8007d50:	103e9f1e 	bne	r2,zero,80077d0 <__alt_data_end+0xfc0077d0>
 8007d54:	d9411b17 	ldw	r5,1132(sp)
 8007d58:	d8c11c17 	ldw	r3,1136(sp)
 8007d5c:	d811883a 	mov	r8,sp
 8007d60:	28800044 	addi	r2,r5,1
 8007d64:	003ca906 	br	800700c <__alt_data_end+0xfc00700c>
 8007d68:	d9411b17 	ldw	r5,1132(sp)
 8007d6c:	01020074 	movhi	r4,2049
 8007d70:	213d0404 	addi	r4,r4,-3056
 8007d74:	d9012315 	stw	r4,1164(sp)
 8007d78:	29400044 	addi	r5,r5,1
 8007d7c:	003c8806 	br	8006fa0 <__alt_data_end+0xfc006fa0>
 8007d80:	00800184 	movi	r2,6
 8007d84:	1240012e 	bgeu	r2,r9,8007d8c <___vfiprintf_internal_r+0x12a4>
 8007d88:	1013883a 	mov	r9,r2
 8007d8c:	4823883a 	mov	r17,r9
 8007d90:	4825883a 	mov	r18,r9
 8007d94:	48001516 	blt	r9,zero,8007dec <___vfiprintf_internal_r+0x1304>
 8007d98:	00820074 	movhi	r2,2049
 8007d9c:	10bca404 	addi	r2,r2,-3440
 8007da0:	dd812115 	stw	r22,1156(sp)
 8007da4:	d8812415 	stw	r2,1168(sp)
 8007da8:	003d6f06 	br	8007368 <__alt_data_end+0xfc007368>
 8007dac:	d9411b17 	ldw	r5,1132(sp)
 8007db0:	02c20074 	movhi	r11,2049
 8007db4:	5afd0404 	addi	r11,r11,-3056
 8007db8:	dac12315 	stw	r11,1164(sp)
 8007dbc:	29400044 	addi	r5,r5,1
 8007dc0:	003ce106 	br	8007148 <__alt_data_end+0xfc007148>
 8007dc4:	01020074 	movhi	r4,2049
 8007dc8:	213d0004 	addi	r4,r4,-3072
 8007dcc:	d9012315 	stw	r4,1164(sp)
 8007dd0:	1009883a 	mov	r4,r2
 8007dd4:	003eca06 	br	8007900 <__alt_data_end+0xfc007900>
 8007dd8:	4823883a 	mov	r17,r9
 8007ddc:	db011d83 	ldbu	r12,1142(sp)
 8007de0:	dd812115 	stw	r22,1156(sp)
 8007de4:	0013883a 	mov	r9,zero
 8007de8:	003c3b06 	br	8006ed8 <__alt_data_end+0xfc006ed8>
 8007dec:	0025883a 	mov	r18,zero
 8007df0:	003fe906 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007df4:	dac12117 	ldw	r11,1156(sp)
 8007df8:	8005883a 	mov	r2,r16
 8007dfc:	5021883a 	mov	r16,r10
 8007e00:	5a400017 	ldw	r9,0(r11)
 8007e04:	58c00104 	addi	r3,r11,4
 8007e08:	d8c12115 	stw	r3,1156(sp)
 8007e0c:	48000a16 	blt	r9,zero,8007e38 <___vfiprintf_internal_r+0x1350>
 8007e10:	10c00047 	ldb	r3,1(r2)
 8007e14:	003b9306 	br	8006c64 <__alt_data_end+0xfc006c64>
 8007e18:	043fffc4 	movi	r16,-1
 8007e1c:	003d0206 	br	8007228 <__alt_data_end+0xfc007228>
 8007e20:	94c0010e 	bge	r18,r19,8007e28 <___vfiprintf_internal_r+0x1340>
 8007e24:	9825883a 	mov	r18,r19
 8007e28:	da812217 	ldw	r10,1160(sp)
 8007e2c:	5495883a 	add	r10,r10,r18
 8007e30:	da812215 	stw	r10,1160(sp)
 8007e34:	003cd106 	br	800717c <__alt_data_end+0xfc00717c>
 8007e38:	027fffc4 	movi	r9,-1
 8007e3c:	10c00047 	ldb	r3,1(r2)
 8007e40:	003b8806 	br	8006c64 <__alt_data_end+0xfc006c64>

08007e44 <__vfiprintf_internal>:
 8007e44:	2007883a 	mov	r3,r4
 8007e48:	01020074 	movhi	r4,2049
 8007e4c:	21041204 	addi	r4,r4,4168
 8007e50:	21000017 	ldw	r4,0(r4)
 8007e54:	2805883a 	mov	r2,r5
 8007e58:	300f883a 	mov	r7,r6
 8007e5c:	180b883a 	mov	r5,r3
 8007e60:	100d883a 	mov	r6,r2
 8007e64:	8006ae81 	jmpi	8006ae8 <___vfiprintf_internal_r>

08007e68 <_write_r>:
 8007e68:	defffd04 	addi	sp,sp,-12
 8007e6c:	dc000015 	stw	r16,0(sp)
 8007e70:	04020074 	movhi	r16,2049
 8007e74:	dc400115 	stw	r17,4(sp)
 8007e78:	840aed04 	addi	r16,r16,11188
 8007e7c:	2023883a 	mov	r17,r4
 8007e80:	2809883a 	mov	r4,r5
 8007e84:	300b883a 	mov	r5,r6
 8007e88:	380d883a 	mov	r6,r7
 8007e8c:	dfc00215 	stw	ra,8(sp)
 8007e90:	80000015 	stw	zero,0(r16)
 8007e94:	800ce680 	call	800ce68 <write>
 8007e98:	00ffffc4 	movi	r3,-1
 8007e9c:	10c00526 	beq	r2,r3,8007eb4 <_write_r+0x4c>
 8007ea0:	dfc00217 	ldw	ra,8(sp)
 8007ea4:	dc400117 	ldw	r17,4(sp)
 8007ea8:	dc000017 	ldw	r16,0(sp)
 8007eac:	dec00304 	addi	sp,sp,12
 8007eb0:	f800283a 	ret
 8007eb4:	80c00017 	ldw	r3,0(r16)
 8007eb8:	183ff926 	beq	r3,zero,8007ea0 <__alt_data_end+0xfc007ea0>
 8007ebc:	88c00015 	stw	r3,0(r17)
 8007ec0:	003ff706 	br	8007ea0 <__alt_data_end+0xfc007ea0>

08007ec4 <_close_r>:
 8007ec4:	defffd04 	addi	sp,sp,-12
 8007ec8:	dc000015 	stw	r16,0(sp)
 8007ecc:	04020074 	movhi	r16,2049
 8007ed0:	dc400115 	stw	r17,4(sp)
 8007ed4:	840aed04 	addi	r16,r16,11188
 8007ed8:	2023883a 	mov	r17,r4
 8007edc:	2809883a 	mov	r4,r5
 8007ee0:	dfc00215 	stw	ra,8(sp)
 8007ee4:	80000015 	stw	zero,0(r16)
 8007ee8:	800c60c0 	call	800c60c <close>
 8007eec:	00ffffc4 	movi	r3,-1
 8007ef0:	10c00526 	beq	r2,r3,8007f08 <_close_r+0x44>
 8007ef4:	dfc00217 	ldw	ra,8(sp)
 8007ef8:	dc400117 	ldw	r17,4(sp)
 8007efc:	dc000017 	ldw	r16,0(sp)
 8007f00:	dec00304 	addi	sp,sp,12
 8007f04:	f800283a 	ret
 8007f08:	80c00017 	ldw	r3,0(r16)
 8007f0c:	183ff926 	beq	r3,zero,8007ef4 <__alt_data_end+0xfc007ef4>
 8007f10:	88c00015 	stw	r3,0(r17)
 8007f14:	003ff706 	br	8007ef4 <__alt_data_end+0xfc007ef4>

08007f18 <_calloc_r>:
 8007f18:	298b383a 	mul	r5,r5,r6
 8007f1c:	defffe04 	addi	sp,sp,-8
 8007f20:	dc000015 	stw	r16,0(sp)
 8007f24:	dfc00115 	stw	ra,4(sp)
 8007f28:	8004c1c0 	call	8004c1c <_malloc_r>
 8007f2c:	1021883a 	mov	r16,r2
 8007f30:	10002826 	beq	r2,zero,8007fd4 <_calloc_r+0xbc>
 8007f34:	11bfff17 	ldw	r6,-4(r2)
 8007f38:	00bfff04 	movi	r2,-4
 8007f3c:	00c00904 	movi	r3,36
 8007f40:	308c703a 	and	r6,r6,r2
 8007f44:	308d883a 	add	r6,r6,r2
 8007f48:	19801436 	bltu	r3,r6,8007f9c <_calloc_r+0x84>
 8007f4c:	008004c4 	movi	r2,19
 8007f50:	11800936 	bltu	r2,r6,8007f78 <_calloc_r+0x60>
 8007f54:	8005883a 	mov	r2,r16
 8007f58:	10000015 	stw	zero,0(r2)
 8007f5c:	10000115 	stw	zero,4(r2)
 8007f60:	10000215 	stw	zero,8(r2)
 8007f64:	8005883a 	mov	r2,r16
 8007f68:	dfc00117 	ldw	ra,4(sp)
 8007f6c:	dc000017 	ldw	r16,0(sp)
 8007f70:	dec00204 	addi	sp,sp,8
 8007f74:	f800283a 	ret
 8007f78:	80000015 	stw	zero,0(r16)
 8007f7c:	80000115 	stw	zero,4(r16)
 8007f80:	008006c4 	movi	r2,27
 8007f84:	11800d2e 	bgeu	r2,r6,8007fbc <_calloc_r+0xa4>
 8007f88:	80000215 	stw	zero,8(r16)
 8007f8c:	80000315 	stw	zero,12(r16)
 8007f90:	30c00c26 	beq	r6,r3,8007fc4 <_calloc_r+0xac>
 8007f94:	80800404 	addi	r2,r16,16
 8007f98:	003fef06 	br	8007f58 <__alt_data_end+0xfc007f58>
 8007f9c:	8009883a 	mov	r4,r16
 8007fa0:	000b883a 	mov	r5,zero
 8007fa4:	80055e40 	call	80055e4 <memset>
 8007fa8:	8005883a 	mov	r2,r16
 8007fac:	dfc00117 	ldw	ra,4(sp)
 8007fb0:	dc000017 	ldw	r16,0(sp)
 8007fb4:	dec00204 	addi	sp,sp,8
 8007fb8:	f800283a 	ret
 8007fbc:	80800204 	addi	r2,r16,8
 8007fc0:	003fe506 	br	8007f58 <__alt_data_end+0xfc007f58>
 8007fc4:	80000415 	stw	zero,16(r16)
 8007fc8:	80800604 	addi	r2,r16,24
 8007fcc:	80000515 	stw	zero,20(r16)
 8007fd0:	003fe106 	br	8007f58 <__alt_data_end+0xfc007f58>
 8007fd4:	0005883a 	mov	r2,zero
 8007fd8:	003fe306 	br	8007f68 <__alt_data_end+0xfc007f68>

08007fdc <_fclose_r>:
 8007fdc:	28003226 	beq	r5,zero,80080a8 <_fclose_r+0xcc>
 8007fe0:	defffc04 	addi	sp,sp,-16
 8007fe4:	dc400115 	stw	r17,4(sp)
 8007fe8:	2023883a 	mov	r17,r4
 8007fec:	dc000015 	stw	r16,0(sp)
 8007ff0:	dfc00315 	stw	ra,12(sp)
 8007ff4:	dc800215 	stw	r18,8(sp)
 8007ff8:	2821883a 	mov	r16,r5
 8007ffc:	80043c00 	call	80043c0 <__sfp_lock_acquire>
 8008000:	88000226 	beq	r17,zero,800800c <_fclose_r+0x30>
 8008004:	88800e17 	ldw	r2,56(r17)
 8008008:	10002926 	beq	r2,zero,80080b0 <_fclose_r+0xd4>
 800800c:	8080030f 	ldh	r2,12(r16)
 8008010:	10002226 	beq	r2,zero,800809c <_fclose_r+0xc0>
 8008014:	8809883a 	mov	r4,r17
 8008018:	800b883a 	mov	r5,r16
 800801c:	8003e080 	call	8003e08 <_fflush_r>
 8008020:	1025883a 	mov	r18,r2
 8008024:	80800b17 	ldw	r2,44(r16)
 8008028:	10000426 	beq	r2,zero,800803c <_fclose_r+0x60>
 800802c:	81400717 	ldw	r5,28(r16)
 8008030:	8809883a 	mov	r4,r17
 8008034:	103ee83a 	callr	r2
 8008038:	10002616 	blt	r2,zero,80080d4 <_fclose_r+0xf8>
 800803c:	8080030b 	ldhu	r2,12(r16)
 8008040:	1080200c 	andi	r2,r2,128
 8008044:	10001f1e 	bne	r2,zero,80080c4 <_fclose_r+0xe8>
 8008048:	81400c17 	ldw	r5,48(r16)
 800804c:	28000526 	beq	r5,zero,8008064 <_fclose_r+0x88>
 8008050:	80801004 	addi	r2,r16,64
 8008054:	28800226 	beq	r5,r2,8008060 <_fclose_r+0x84>
 8008058:	8809883a 	mov	r4,r17
 800805c:	80045240 	call	8004524 <_free_r>
 8008060:	80000c15 	stw	zero,48(r16)
 8008064:	81401117 	ldw	r5,68(r16)
 8008068:	28000326 	beq	r5,zero,8008078 <_fclose_r+0x9c>
 800806c:	8809883a 	mov	r4,r17
 8008070:	80045240 	call	8004524 <_free_r>
 8008074:	80001115 	stw	zero,68(r16)
 8008078:	8000030d 	sth	zero,12(r16)
 800807c:	80043c40 	call	80043c4 <__sfp_lock_release>
 8008080:	9005883a 	mov	r2,r18
 8008084:	dfc00317 	ldw	ra,12(sp)
 8008088:	dc800217 	ldw	r18,8(sp)
 800808c:	dc400117 	ldw	r17,4(sp)
 8008090:	dc000017 	ldw	r16,0(sp)
 8008094:	dec00404 	addi	sp,sp,16
 8008098:	f800283a 	ret
 800809c:	80043c40 	call	80043c4 <__sfp_lock_release>
 80080a0:	0005883a 	mov	r2,zero
 80080a4:	003ff706 	br	8008084 <__alt_data_end+0xfc008084>
 80080a8:	0005883a 	mov	r2,zero
 80080ac:	f800283a 	ret
 80080b0:	8809883a 	mov	r4,r17
 80080b4:	80043b00 	call	80043b0 <__sinit>
 80080b8:	8080030f 	ldh	r2,12(r16)
 80080bc:	103fd51e 	bne	r2,zero,8008014 <__alt_data_end+0xfc008014>
 80080c0:	003ff606 	br	800809c <__alt_data_end+0xfc00809c>
 80080c4:	81400417 	ldw	r5,16(r16)
 80080c8:	8809883a 	mov	r4,r17
 80080cc:	80045240 	call	8004524 <_free_r>
 80080d0:	003fdd06 	br	8008048 <__alt_data_end+0xfc008048>
 80080d4:	04bfffc4 	movi	r18,-1
 80080d8:	003fd806 	br	800803c <__alt_data_end+0xfc00803c>

080080dc <fclose>:
 80080dc:	00820074 	movhi	r2,2049
 80080e0:	10841204 	addi	r2,r2,4168
 80080e4:	200b883a 	mov	r5,r4
 80080e8:	11000017 	ldw	r4,0(r2)
 80080ec:	8007fdc1 	jmpi	8007fdc <_fclose_r>

080080f0 <_fputwc_r>:
 80080f0:	3080030b 	ldhu	r2,12(r6)
 80080f4:	defff804 	addi	sp,sp,-32
 80080f8:	dcc00415 	stw	r19,16(sp)
 80080fc:	dc800315 	stw	r18,12(sp)
 8008100:	dc000115 	stw	r16,4(sp)
 8008104:	dfc00715 	stw	ra,28(sp)
 8008108:	dd400615 	stw	r21,24(sp)
 800810c:	dd000515 	stw	r20,20(sp)
 8008110:	dc400215 	stw	r17,8(sp)
 8008114:	10c8000c 	andi	r3,r2,8192
 8008118:	3021883a 	mov	r16,r6
 800811c:	2027883a 	mov	r19,r4
 8008120:	2825883a 	mov	r18,r5
 8008124:	1800051e 	bne	r3,zero,800813c <_fputwc_r+0x4c>
 8008128:	30c01917 	ldw	r3,100(r6)
 800812c:	10880014 	ori	r2,r2,8192
 8008130:	3080030d 	sth	r2,12(r6)
 8008134:	18880014 	ori	r2,r3,8192
 8008138:	30801915 	stw	r2,100(r6)
 800813c:	8004a0c0 	call	8004a0c <__locale_mb_cur_max>
 8008140:	00c00044 	movi	r3,1
 8008144:	10c03e26 	beq	r2,r3,8008240 <_fputwc_r+0x150>
 8008148:	9809883a 	mov	r4,r19
 800814c:	d80b883a 	mov	r5,sp
 8008150:	900d883a 	mov	r6,r18
 8008154:	81c01704 	addi	r7,r16,92
 8008158:	80091400 	call	8009140 <_wcrtomb_r>
 800815c:	1029883a 	mov	r20,r2
 8008160:	00bfffc4 	movi	r2,-1
 8008164:	a0802026 	beq	r20,r2,80081e8 <_fputwc_r+0xf8>
 8008168:	d9400003 	ldbu	r5,0(sp)
 800816c:	a0001c26 	beq	r20,zero,80081e0 <_fputwc_r+0xf0>
 8008170:	0023883a 	mov	r17,zero
 8008174:	05400284 	movi	r21,10
 8008178:	00000906 	br	80081a0 <_fputwc_r+0xb0>
 800817c:	80800017 	ldw	r2,0(r16)
 8008180:	11400005 	stb	r5,0(r2)
 8008184:	80c00017 	ldw	r3,0(r16)
 8008188:	18c00044 	addi	r3,r3,1
 800818c:	80c00015 	stw	r3,0(r16)
 8008190:	8c400044 	addi	r17,r17,1
 8008194:	dc45883a 	add	r2,sp,r17
 8008198:	8d00112e 	bgeu	r17,r20,80081e0 <_fputwc_r+0xf0>
 800819c:	11400003 	ldbu	r5,0(r2)
 80081a0:	80c00217 	ldw	r3,8(r16)
 80081a4:	18ffffc4 	addi	r3,r3,-1
 80081a8:	80c00215 	stw	r3,8(r16)
 80081ac:	183ff30e 	bge	r3,zero,800817c <__alt_data_end+0xfc00817c>
 80081b0:	80800617 	ldw	r2,24(r16)
 80081b4:	18801916 	blt	r3,r2,800821c <_fputwc_r+0x12c>
 80081b8:	80800017 	ldw	r2,0(r16)
 80081bc:	11400005 	stb	r5,0(r2)
 80081c0:	80800017 	ldw	r2,0(r16)
 80081c4:	10c00003 	ldbu	r3,0(r2)
 80081c8:	10800044 	addi	r2,r2,1
 80081cc:	1d402326 	beq	r3,r21,800825c <_fputwc_r+0x16c>
 80081d0:	80800015 	stw	r2,0(r16)
 80081d4:	8c400044 	addi	r17,r17,1
 80081d8:	dc45883a 	add	r2,sp,r17
 80081dc:	8d3fef36 	bltu	r17,r20,800819c <__alt_data_end+0xfc00819c>
 80081e0:	9005883a 	mov	r2,r18
 80081e4:	00000406 	br	80081f8 <_fputwc_r+0x108>
 80081e8:	80c0030b 	ldhu	r3,12(r16)
 80081ec:	a005883a 	mov	r2,r20
 80081f0:	18c01014 	ori	r3,r3,64
 80081f4:	80c0030d 	sth	r3,12(r16)
 80081f8:	dfc00717 	ldw	ra,28(sp)
 80081fc:	dd400617 	ldw	r21,24(sp)
 8008200:	dd000517 	ldw	r20,20(sp)
 8008204:	dcc00417 	ldw	r19,16(sp)
 8008208:	dc800317 	ldw	r18,12(sp)
 800820c:	dc400217 	ldw	r17,8(sp)
 8008210:	dc000117 	ldw	r16,4(sp)
 8008214:	dec00804 	addi	sp,sp,32
 8008218:	f800283a 	ret
 800821c:	9809883a 	mov	r4,r19
 8008220:	29403fcc 	andi	r5,r5,255
 8008224:	800d883a 	mov	r6,r16
 8008228:	8008fd00 	call	8008fd0 <__swbuf_r>
 800822c:	10bfffe0 	cmpeqi	r2,r2,-1
 8008230:	10803fcc 	andi	r2,r2,255
 8008234:	103fd626 	beq	r2,zero,8008190 <__alt_data_end+0xfc008190>
 8008238:	00bfffc4 	movi	r2,-1
 800823c:	003fee06 	br	80081f8 <__alt_data_end+0xfc0081f8>
 8008240:	90ffffc4 	addi	r3,r18,-1
 8008244:	01003f84 	movi	r4,254
 8008248:	20ffbf36 	bltu	r4,r3,8008148 <__alt_data_end+0xfc008148>
 800824c:	900b883a 	mov	r5,r18
 8008250:	dc800005 	stb	r18,0(sp)
 8008254:	1029883a 	mov	r20,r2
 8008258:	003fc506 	br	8008170 <__alt_data_end+0xfc008170>
 800825c:	9809883a 	mov	r4,r19
 8008260:	a80b883a 	mov	r5,r21
 8008264:	800d883a 	mov	r6,r16
 8008268:	8008fd00 	call	8008fd0 <__swbuf_r>
 800826c:	10bfffe0 	cmpeqi	r2,r2,-1
 8008270:	003fef06 	br	8008230 <__alt_data_end+0xfc008230>

08008274 <fputwc>:
 8008274:	defffc04 	addi	sp,sp,-16
 8008278:	dc000115 	stw	r16,4(sp)
 800827c:	04020074 	movhi	r16,2049
 8008280:	84041204 	addi	r16,r16,4168
 8008284:	dc400215 	stw	r17,8(sp)
 8008288:	2023883a 	mov	r17,r4
 800828c:	81000017 	ldw	r4,0(r16)
 8008290:	dfc00315 	stw	ra,12(sp)
 8008294:	280d883a 	mov	r6,r5
 8008298:	20000626 	beq	r4,zero,80082b4 <fputwc+0x40>
 800829c:	20800e17 	ldw	r2,56(r4)
 80082a0:	1000041e 	bne	r2,zero,80082b4 <fputwc+0x40>
 80082a4:	d9400015 	stw	r5,0(sp)
 80082a8:	80043b00 	call	80043b0 <__sinit>
 80082ac:	81000017 	ldw	r4,0(r16)
 80082b0:	d9800017 	ldw	r6,0(sp)
 80082b4:	880b883a 	mov	r5,r17
 80082b8:	dfc00317 	ldw	ra,12(sp)
 80082bc:	dc400217 	ldw	r17,8(sp)
 80082c0:	dc000117 	ldw	r16,4(sp)
 80082c4:	dec00404 	addi	sp,sp,16
 80082c8:	80080f01 	jmpi	80080f0 <_fputwc_r>

080082cc <_fstat_r>:
 80082cc:	defffd04 	addi	sp,sp,-12
 80082d0:	dc000015 	stw	r16,0(sp)
 80082d4:	04020074 	movhi	r16,2049
 80082d8:	dc400115 	stw	r17,4(sp)
 80082dc:	840aed04 	addi	r16,r16,11188
 80082e0:	2023883a 	mov	r17,r4
 80082e4:	2809883a 	mov	r4,r5
 80082e8:	300b883a 	mov	r5,r6
 80082ec:	dfc00215 	stw	ra,8(sp)
 80082f0:	80000015 	stw	zero,0(r16)
 80082f4:	800c7580 	call	800c758 <fstat>
 80082f8:	00ffffc4 	movi	r3,-1
 80082fc:	10c00526 	beq	r2,r3,8008314 <_fstat_r+0x48>
 8008300:	dfc00217 	ldw	ra,8(sp)
 8008304:	dc400117 	ldw	r17,4(sp)
 8008308:	dc000017 	ldw	r16,0(sp)
 800830c:	dec00304 	addi	sp,sp,12
 8008310:	f800283a 	ret
 8008314:	80c00017 	ldw	r3,0(r16)
 8008318:	183ff926 	beq	r3,zero,8008300 <__alt_data_end+0xfc008300>
 800831c:	88c00015 	stw	r3,0(r17)
 8008320:	003ff706 	br	8008300 <__alt_data_end+0xfc008300>

08008324 <__sfvwrite_r>:
 8008324:	30800217 	ldw	r2,8(r6)
 8008328:	10004526 	beq	r2,zero,8008440 <__sfvwrite_r+0x11c>
 800832c:	28c0030b 	ldhu	r3,12(r5)
 8008330:	defff404 	addi	sp,sp,-48
 8008334:	dd400715 	stw	r21,28(sp)
 8008338:	dcc00515 	stw	r19,20(sp)
 800833c:	dc000215 	stw	r16,8(sp)
 8008340:	dfc00b15 	stw	ra,44(sp)
 8008344:	df000a15 	stw	fp,40(sp)
 8008348:	ddc00915 	stw	r23,36(sp)
 800834c:	dd800815 	stw	r22,32(sp)
 8008350:	dd000615 	stw	r20,24(sp)
 8008354:	dc800415 	stw	r18,16(sp)
 8008358:	dc400315 	stw	r17,12(sp)
 800835c:	1880020c 	andi	r2,r3,8
 8008360:	2821883a 	mov	r16,r5
 8008364:	202b883a 	mov	r21,r4
 8008368:	3027883a 	mov	r19,r6
 800836c:	10002526 	beq	r2,zero,8008404 <__sfvwrite_r+0xe0>
 8008370:	28800417 	ldw	r2,16(r5)
 8008374:	10002326 	beq	r2,zero,8008404 <__sfvwrite_r+0xe0>
 8008378:	1880008c 	andi	r2,r3,2
 800837c:	9c400017 	ldw	r17,0(r19)
 8008380:	10003126 	beq	r2,zero,8008448 <__sfvwrite_r+0x124>
 8008384:	0029883a 	mov	r20,zero
 8008388:	0025883a 	mov	r18,zero
 800838c:	05810004 	movi	r22,1024
 8008390:	a00d883a 	mov	r6,r20
 8008394:	a809883a 	mov	r4,r21
 8008398:	90002526 	beq	r18,zero,8008430 <__sfvwrite_r+0x10c>
 800839c:	900f883a 	mov	r7,r18
 80083a0:	81400717 	ldw	r5,28(r16)
 80083a4:	b480012e 	bgeu	r22,r18,80083ac <__sfvwrite_r+0x88>
 80083a8:	01c10004 	movi	r7,1024
 80083ac:	80800917 	ldw	r2,36(r16)
 80083b0:	103ee83a 	callr	r2
 80083b4:	0080510e 	bge	zero,r2,80084fc <__sfvwrite_r+0x1d8>
 80083b8:	98c00217 	ldw	r3,8(r19)
 80083bc:	a0a9883a 	add	r20,r20,r2
 80083c0:	90a5c83a 	sub	r18,r18,r2
 80083c4:	1885c83a 	sub	r2,r3,r2
 80083c8:	98800215 	stw	r2,8(r19)
 80083cc:	103ff01e 	bne	r2,zero,8008390 <__alt_data_end+0xfc008390>
 80083d0:	0005883a 	mov	r2,zero
 80083d4:	dfc00b17 	ldw	ra,44(sp)
 80083d8:	df000a17 	ldw	fp,40(sp)
 80083dc:	ddc00917 	ldw	r23,36(sp)
 80083e0:	dd800817 	ldw	r22,32(sp)
 80083e4:	dd400717 	ldw	r21,28(sp)
 80083e8:	dd000617 	ldw	r20,24(sp)
 80083ec:	dcc00517 	ldw	r19,20(sp)
 80083f0:	dc800417 	ldw	r18,16(sp)
 80083f4:	dc400317 	ldw	r17,12(sp)
 80083f8:	dc000217 	ldw	r16,8(sp)
 80083fc:	dec00c04 	addi	sp,sp,48
 8008400:	f800283a 	ret
 8008404:	a809883a 	mov	r4,r21
 8008408:	800b883a 	mov	r5,r16
 800840c:	80023b00 	call	80023b0 <__swsetup_r>
 8008410:	80c0030b 	ldhu	r3,12(r16)
 8008414:	103fd826 	beq	r2,zero,8008378 <__alt_data_end+0xfc008378>
 8008418:	18c01014 	ori	r3,r3,64
 800841c:	80c0030d 	sth	r3,12(r16)
 8008420:	00c00244 	movi	r3,9
 8008424:	00bfffc4 	movi	r2,-1
 8008428:	a8c00015 	stw	r3,0(r21)
 800842c:	003fe906 	br	80083d4 <__alt_data_end+0xfc0083d4>
 8008430:	8d000017 	ldw	r20,0(r17)
 8008434:	8c800117 	ldw	r18,4(r17)
 8008438:	8c400204 	addi	r17,r17,8
 800843c:	003fd406 	br	8008390 <__alt_data_end+0xfc008390>
 8008440:	0005883a 	mov	r2,zero
 8008444:	f800283a 	ret
 8008448:	1880004c 	andi	r2,r3,1
 800844c:	1000301e 	bne	r2,zero,8008510 <__sfvwrite_r+0x1ec>
 8008450:	002f883a 	mov	r23,zero
 8008454:	0025883a 	mov	r18,zero
 8008458:	90001c26 	beq	r18,zero,80084cc <__sfvwrite_r+0x1a8>
 800845c:	1880800c 	andi	r2,r3,512
 8008460:	85000217 	ldw	r20,8(r16)
 8008464:	10006c26 	beq	r2,zero,8008618 <__sfvwrite_r+0x2f4>
 8008468:	a02d883a 	mov	r22,r20
 800846c:	95008536 	bltu	r18,r20,8008684 <__sfvwrite_r+0x360>
 8008470:	1881200c 	andi	r2,r3,1152
 8008474:	10009d1e 	bne	r2,zero,80086ec <__sfvwrite_r+0x3c8>
 8008478:	81000017 	ldw	r4,0(r16)
 800847c:	a039883a 	mov	fp,r20
 8008480:	9029883a 	mov	r20,r18
 8008484:	b80b883a 	mov	r5,r23
 8008488:	b00d883a 	mov	r6,r22
 800848c:	80088780 	call	8008878 <memmove>
 8008490:	80c00217 	ldw	r3,8(r16)
 8008494:	81000017 	ldw	r4,0(r16)
 8008498:	9005883a 	mov	r2,r18
 800849c:	1f39c83a 	sub	fp,r3,fp
 80084a0:	258f883a 	add	r7,r4,r22
 80084a4:	87000215 	stw	fp,8(r16)
 80084a8:	81c00015 	stw	r7,0(r16)
 80084ac:	98c00217 	ldw	r3,8(r19)
 80084b0:	b8af883a 	add	r23,r23,r2
 80084b4:	90a5c83a 	sub	r18,r18,r2
 80084b8:	1d05c83a 	sub	r2,r3,r20
 80084bc:	98800215 	stw	r2,8(r19)
 80084c0:	103fc326 	beq	r2,zero,80083d0 <__alt_data_end+0xfc0083d0>
 80084c4:	80c0030b 	ldhu	r3,12(r16)
 80084c8:	903fe41e 	bne	r18,zero,800845c <__alt_data_end+0xfc00845c>
 80084cc:	8dc00017 	ldw	r23,0(r17)
 80084d0:	8c800117 	ldw	r18,4(r17)
 80084d4:	8c400204 	addi	r17,r17,8
 80084d8:	003fdf06 	br	8008458 <__alt_data_end+0xfc008458>
 80084dc:	8008a300 	call	8008a30 <_realloc_r>
 80084e0:	102d883a 	mov	r22,r2
 80084e4:	1000a01e 	bne	r2,zero,8008768 <__sfvwrite_r+0x444>
 80084e8:	81400417 	ldw	r5,16(r16)
 80084ec:	a809883a 	mov	r4,r21
 80084f0:	80045240 	call	8004524 <_free_r>
 80084f4:	00800304 	movi	r2,12
 80084f8:	a8800015 	stw	r2,0(r21)
 80084fc:	80c0030b 	ldhu	r3,12(r16)
 8008500:	00bfffc4 	movi	r2,-1
 8008504:	18c01014 	ori	r3,r3,64
 8008508:	80c0030d 	sth	r3,12(r16)
 800850c:	003fb106 	br	80083d4 <__alt_data_end+0xfc0083d4>
 8008510:	0029883a 	mov	r20,zero
 8008514:	0011883a 	mov	r8,zero
 8008518:	0039883a 	mov	fp,zero
 800851c:	0025883a 	mov	r18,zero
 8008520:	90001f26 	beq	r18,zero,80085a0 <__sfvwrite_r+0x27c>
 8008524:	40006826 	beq	r8,zero,80086c8 <__sfvwrite_r+0x3a4>
 8008528:	a02f883a 	mov	r23,r20
 800852c:	9500012e 	bgeu	r18,r20,8008534 <__sfvwrite_r+0x210>
 8008530:	902f883a 	mov	r23,r18
 8008534:	81000017 	ldw	r4,0(r16)
 8008538:	80800417 	ldw	r2,16(r16)
 800853c:	b82d883a 	mov	r22,r23
 8008540:	81800217 	ldw	r6,8(r16)
 8008544:	81c00517 	ldw	r7,20(r16)
 8008548:	1100022e 	bgeu	r2,r4,8008554 <__sfvwrite_r+0x230>
 800854c:	31c7883a 	add	r3,r6,r7
 8008550:	1dc01816 	blt	r3,r23,80085b4 <__sfvwrite_r+0x290>
 8008554:	b9c03f16 	blt	r23,r7,8008654 <__sfvwrite_r+0x330>
 8008558:	80800917 	ldw	r2,36(r16)
 800855c:	81400717 	ldw	r5,28(r16)
 8008560:	a809883a 	mov	r4,r21
 8008564:	da000115 	stw	r8,4(sp)
 8008568:	e00d883a 	mov	r6,fp
 800856c:	103ee83a 	callr	r2
 8008570:	102d883a 	mov	r22,r2
 8008574:	da000117 	ldw	r8,4(sp)
 8008578:	00bfe00e 	bge	zero,r2,80084fc <__alt_data_end+0xfc0084fc>
 800857c:	a5a9c83a 	sub	r20,r20,r22
 8008580:	a0001f26 	beq	r20,zero,8008600 <__sfvwrite_r+0x2dc>
 8008584:	98800217 	ldw	r2,8(r19)
 8008588:	e5b9883a 	add	fp,fp,r22
 800858c:	95a5c83a 	sub	r18,r18,r22
 8008590:	15adc83a 	sub	r22,r2,r22
 8008594:	9d800215 	stw	r22,8(r19)
 8008598:	b03f8d26 	beq	r22,zero,80083d0 <__alt_data_end+0xfc0083d0>
 800859c:	903fe11e 	bne	r18,zero,8008524 <__alt_data_end+0xfc008524>
 80085a0:	8f000017 	ldw	fp,0(r17)
 80085a4:	8c800117 	ldw	r18,4(r17)
 80085a8:	0011883a 	mov	r8,zero
 80085ac:	8c400204 	addi	r17,r17,8
 80085b0:	003fdb06 	br	8008520 <__alt_data_end+0xfc008520>
 80085b4:	180d883a 	mov	r6,r3
 80085b8:	e00b883a 	mov	r5,fp
 80085bc:	da000115 	stw	r8,4(sp)
 80085c0:	d8c00015 	stw	r3,0(sp)
 80085c4:	80088780 	call	8008878 <memmove>
 80085c8:	d8c00017 	ldw	r3,0(sp)
 80085cc:	80800017 	ldw	r2,0(r16)
 80085d0:	a809883a 	mov	r4,r21
 80085d4:	800b883a 	mov	r5,r16
 80085d8:	10c5883a 	add	r2,r2,r3
 80085dc:	80800015 	stw	r2,0(r16)
 80085e0:	d8c00015 	stw	r3,0(sp)
 80085e4:	8003e080 	call	8003e08 <_fflush_r>
 80085e8:	d8c00017 	ldw	r3,0(sp)
 80085ec:	da000117 	ldw	r8,4(sp)
 80085f0:	103fc21e 	bne	r2,zero,80084fc <__alt_data_end+0xfc0084fc>
 80085f4:	182d883a 	mov	r22,r3
 80085f8:	a5a9c83a 	sub	r20,r20,r22
 80085fc:	a03fe11e 	bne	r20,zero,8008584 <__alt_data_end+0xfc008584>
 8008600:	a809883a 	mov	r4,r21
 8008604:	800b883a 	mov	r5,r16
 8008608:	8003e080 	call	8003e08 <_fflush_r>
 800860c:	103fbb1e 	bne	r2,zero,80084fc <__alt_data_end+0xfc0084fc>
 8008610:	0011883a 	mov	r8,zero
 8008614:	003fdb06 	br	8008584 <__alt_data_end+0xfc008584>
 8008618:	81000017 	ldw	r4,0(r16)
 800861c:	80800417 	ldw	r2,16(r16)
 8008620:	1100012e 	bgeu	r2,r4,8008628 <__sfvwrite_r+0x304>
 8008624:	a4805a36 	bltu	r20,r18,8008790 <__sfvwrite_r+0x46c>
 8008628:	81c00517 	ldw	r7,20(r16)
 800862c:	91c01a36 	bltu	r18,r7,8008698 <__sfvwrite_r+0x374>
 8008630:	80800917 	ldw	r2,36(r16)
 8008634:	81400717 	ldw	r5,28(r16)
 8008638:	a809883a 	mov	r4,r21
 800863c:	b80d883a 	mov	r6,r23
 8008640:	103ee83a 	callr	r2
 8008644:	1029883a 	mov	r20,r2
 8008648:	00bfac0e 	bge	zero,r2,80084fc <__alt_data_end+0xfc0084fc>
 800864c:	a005883a 	mov	r2,r20
 8008650:	003f9606 	br	80084ac <__alt_data_end+0xfc0084ac>
 8008654:	b80d883a 	mov	r6,r23
 8008658:	e00b883a 	mov	r5,fp
 800865c:	da000115 	stw	r8,4(sp)
 8008660:	80088780 	call	8008878 <memmove>
 8008664:	80800217 	ldw	r2,8(r16)
 8008668:	80c00017 	ldw	r3,0(r16)
 800866c:	da000117 	ldw	r8,4(sp)
 8008670:	15c5c83a 	sub	r2,r2,r23
 8008674:	1def883a 	add	r23,r3,r23
 8008678:	80800215 	stw	r2,8(r16)
 800867c:	85c00015 	stw	r23,0(r16)
 8008680:	003fbe06 	br	800857c <__alt_data_end+0xfc00857c>
 8008684:	81000017 	ldw	r4,0(r16)
 8008688:	9039883a 	mov	fp,r18
 800868c:	9029883a 	mov	r20,r18
 8008690:	902d883a 	mov	r22,r18
 8008694:	003f7b06 	br	8008484 <__alt_data_end+0xfc008484>
 8008698:	b80b883a 	mov	r5,r23
 800869c:	900d883a 	mov	r6,r18
 80086a0:	80088780 	call	8008878 <memmove>
 80086a4:	80c00217 	ldw	r3,8(r16)
 80086a8:	80800017 	ldw	r2,0(r16)
 80086ac:	9029883a 	mov	r20,r18
 80086b0:	1c87c83a 	sub	r3,r3,r18
 80086b4:	1485883a 	add	r2,r2,r18
 80086b8:	80800015 	stw	r2,0(r16)
 80086bc:	80c00215 	stw	r3,8(r16)
 80086c0:	9005883a 	mov	r2,r18
 80086c4:	003f7906 	br	80084ac <__alt_data_end+0xfc0084ac>
 80086c8:	e009883a 	mov	r4,fp
 80086cc:	01400284 	movi	r5,10
 80086d0:	900d883a 	mov	r6,r18
 80086d4:	80053c40 	call	80053c4 <memchr>
 80086d8:	10003826 	beq	r2,zero,80087bc <__sfvwrite_r+0x498>
 80086dc:	10800044 	addi	r2,r2,1
 80086e0:	1729c83a 	sub	r20,r2,fp
 80086e4:	02000044 	movi	r8,1
 80086e8:	003f8f06 	br	8008528 <__alt_data_end+0xfc008528>
 80086ec:	80800517 	ldw	r2,20(r16)
 80086f0:	81400417 	ldw	r5,16(r16)
 80086f4:	87000017 	ldw	fp,0(r16)
 80086f8:	10a9883a 	add	r20,r2,r2
 80086fc:	a085883a 	add	r2,r20,r2
 8008700:	1028d7fa 	srli	r20,r2,31
 8008704:	e179c83a 	sub	fp,fp,r5
 8008708:	e1000044 	addi	r4,fp,1
 800870c:	a085883a 	add	r2,r20,r2
 8008710:	1029d07a 	srai	r20,r2,1
 8008714:	2485883a 	add	r2,r4,r18
 8008718:	a00d883a 	mov	r6,r20
 800871c:	a080022e 	bgeu	r20,r2,8008728 <__sfvwrite_r+0x404>
 8008720:	1029883a 	mov	r20,r2
 8008724:	100d883a 	mov	r6,r2
 8008728:	18c1000c 	andi	r3,r3,1024
 800872c:	a809883a 	mov	r4,r21
 8008730:	183f6a26 	beq	r3,zero,80084dc <__alt_data_end+0xfc0084dc>
 8008734:	300b883a 	mov	r5,r6
 8008738:	8004c1c0 	call	8004c1c <_malloc_r>
 800873c:	102d883a 	mov	r22,r2
 8008740:	103f6c26 	beq	r2,zero,80084f4 <__alt_data_end+0xfc0084f4>
 8008744:	81400417 	ldw	r5,16(r16)
 8008748:	1009883a 	mov	r4,r2
 800874c:	e00d883a 	mov	r6,fp
 8008750:	80054ac0 	call	80054ac <memcpy>
 8008754:	8080030b 	ldhu	r2,12(r16)
 8008758:	00fedfc4 	movi	r3,-1153
 800875c:	10c4703a 	and	r2,r2,r3
 8008760:	10802014 	ori	r2,r2,128
 8008764:	8080030d 	sth	r2,12(r16)
 8008768:	b709883a 	add	r4,r22,fp
 800876c:	a707c83a 	sub	r3,r20,fp
 8008770:	85800415 	stw	r22,16(r16)
 8008774:	85000515 	stw	r20,20(r16)
 8008778:	81000015 	stw	r4,0(r16)
 800877c:	9039883a 	mov	fp,r18
 8008780:	80c00215 	stw	r3,8(r16)
 8008784:	9029883a 	mov	r20,r18
 8008788:	902d883a 	mov	r22,r18
 800878c:	003f3d06 	br	8008484 <__alt_data_end+0xfc008484>
 8008790:	b80b883a 	mov	r5,r23
 8008794:	a00d883a 	mov	r6,r20
 8008798:	80088780 	call	8008878 <memmove>
 800879c:	80800017 	ldw	r2,0(r16)
 80087a0:	a809883a 	mov	r4,r21
 80087a4:	800b883a 	mov	r5,r16
 80087a8:	1505883a 	add	r2,r2,r20
 80087ac:	80800015 	stw	r2,0(r16)
 80087b0:	8003e080 	call	8003e08 <_fflush_r>
 80087b4:	103fa526 	beq	r2,zero,800864c <__alt_data_end+0xfc00864c>
 80087b8:	003f5006 	br	80084fc <__alt_data_end+0xfc0084fc>
 80087bc:	95000044 	addi	r20,r18,1
 80087c0:	02000044 	movi	r8,1
 80087c4:	003f5806 	br	8008528 <__alt_data_end+0xfc008528>

080087c8 <_isatty_r>:
 80087c8:	defffd04 	addi	sp,sp,-12
 80087cc:	dc000015 	stw	r16,0(sp)
 80087d0:	04020074 	movhi	r16,2049
 80087d4:	dc400115 	stw	r17,4(sp)
 80087d8:	840aed04 	addi	r16,r16,11188
 80087dc:	2023883a 	mov	r17,r4
 80087e0:	2809883a 	mov	r4,r5
 80087e4:	dfc00215 	stw	ra,8(sp)
 80087e8:	80000015 	stw	zero,0(r16)
 80087ec:	800c8580 	call	800c858 <isatty>
 80087f0:	00ffffc4 	movi	r3,-1
 80087f4:	10c00526 	beq	r2,r3,800880c <_isatty_r+0x44>
 80087f8:	dfc00217 	ldw	ra,8(sp)
 80087fc:	dc400117 	ldw	r17,4(sp)
 8008800:	dc000017 	ldw	r16,0(sp)
 8008804:	dec00304 	addi	sp,sp,12
 8008808:	f800283a 	ret
 800880c:	80c00017 	ldw	r3,0(r16)
 8008810:	183ff926 	beq	r3,zero,80087f8 <__alt_data_end+0xfc0087f8>
 8008814:	88c00015 	stw	r3,0(r17)
 8008818:	003ff706 	br	80087f8 <__alt_data_end+0xfc0087f8>

0800881c <_lseek_r>:
 800881c:	defffd04 	addi	sp,sp,-12
 8008820:	dc000015 	stw	r16,0(sp)
 8008824:	04020074 	movhi	r16,2049
 8008828:	dc400115 	stw	r17,4(sp)
 800882c:	840aed04 	addi	r16,r16,11188
 8008830:	2023883a 	mov	r17,r4
 8008834:	2809883a 	mov	r4,r5
 8008838:	300b883a 	mov	r5,r6
 800883c:	380d883a 	mov	r6,r7
 8008840:	dfc00215 	stw	ra,8(sp)
 8008844:	80000015 	stw	zero,0(r16)
 8008848:	800ca300 	call	800ca30 <lseek>
 800884c:	00ffffc4 	movi	r3,-1
 8008850:	10c00526 	beq	r2,r3,8008868 <_lseek_r+0x4c>
 8008854:	dfc00217 	ldw	ra,8(sp)
 8008858:	dc400117 	ldw	r17,4(sp)
 800885c:	dc000017 	ldw	r16,0(sp)
 8008860:	dec00304 	addi	sp,sp,12
 8008864:	f800283a 	ret
 8008868:	80c00017 	ldw	r3,0(r16)
 800886c:	183ff926 	beq	r3,zero,8008854 <__alt_data_end+0xfc008854>
 8008870:	88c00015 	stw	r3,0(r17)
 8008874:	003ff706 	br	8008854 <__alt_data_end+0xfc008854>

08008878 <memmove>:
 8008878:	2005883a 	mov	r2,r4
 800887c:	29000b2e 	bgeu	r5,r4,80088ac <memmove+0x34>
 8008880:	298f883a 	add	r7,r5,r6
 8008884:	21c0092e 	bgeu	r4,r7,80088ac <memmove+0x34>
 8008888:	2187883a 	add	r3,r4,r6
 800888c:	198bc83a 	sub	r5,r3,r6
 8008890:	30004b26 	beq	r6,zero,80089c0 <memmove+0x148>
 8008894:	39ffffc4 	addi	r7,r7,-1
 8008898:	39000003 	ldbu	r4,0(r7)
 800889c:	18ffffc4 	addi	r3,r3,-1
 80088a0:	19000005 	stb	r4,0(r3)
 80088a4:	197ffb1e 	bne	r3,r5,8008894 <__alt_data_end+0xfc008894>
 80088a8:	f800283a 	ret
 80088ac:	00c003c4 	movi	r3,15
 80088b0:	1980412e 	bgeu	r3,r6,80089b8 <memmove+0x140>
 80088b4:	1146b03a 	or	r3,r2,r5
 80088b8:	18c000cc 	andi	r3,r3,3
 80088bc:	1800411e 	bne	r3,zero,80089c4 <memmove+0x14c>
 80088c0:	33fffc04 	addi	r15,r6,-16
 80088c4:	781ed13a 	srli	r15,r15,4
 80088c8:	28c00104 	addi	r3,r5,4
 80088cc:	13400104 	addi	r13,r2,4
 80088d0:	781c913a 	slli	r14,r15,4
 80088d4:	2b000204 	addi	r12,r5,8
 80088d8:	12c00204 	addi	r11,r2,8
 80088dc:	73800504 	addi	r14,r14,20
 80088e0:	2a800304 	addi	r10,r5,12
 80088e4:	12400304 	addi	r9,r2,12
 80088e8:	2b9d883a 	add	r14,r5,r14
 80088ec:	2811883a 	mov	r8,r5
 80088f0:	100f883a 	mov	r7,r2
 80088f4:	41000017 	ldw	r4,0(r8)
 80088f8:	39c00404 	addi	r7,r7,16
 80088fc:	18c00404 	addi	r3,r3,16
 8008900:	393ffc15 	stw	r4,-16(r7)
 8008904:	193ffc17 	ldw	r4,-16(r3)
 8008908:	6b400404 	addi	r13,r13,16
 800890c:	5ac00404 	addi	r11,r11,16
 8008910:	693ffc15 	stw	r4,-16(r13)
 8008914:	61000017 	ldw	r4,0(r12)
 8008918:	4a400404 	addi	r9,r9,16
 800891c:	42000404 	addi	r8,r8,16
 8008920:	593ffc15 	stw	r4,-16(r11)
 8008924:	51000017 	ldw	r4,0(r10)
 8008928:	63000404 	addi	r12,r12,16
 800892c:	52800404 	addi	r10,r10,16
 8008930:	493ffc15 	stw	r4,-16(r9)
 8008934:	1bbfef1e 	bne	r3,r14,80088f4 <__alt_data_end+0xfc0088f4>
 8008938:	79000044 	addi	r4,r15,1
 800893c:	2008913a 	slli	r4,r4,4
 8008940:	328003cc 	andi	r10,r6,15
 8008944:	02c000c4 	movi	r11,3
 8008948:	1107883a 	add	r3,r2,r4
 800894c:	290b883a 	add	r5,r5,r4
 8008950:	5a801e2e 	bgeu	r11,r10,80089cc <memmove+0x154>
 8008954:	1813883a 	mov	r9,r3
 8008958:	2811883a 	mov	r8,r5
 800895c:	500f883a 	mov	r7,r10
 8008960:	41000017 	ldw	r4,0(r8)
 8008964:	4a400104 	addi	r9,r9,4
 8008968:	39ffff04 	addi	r7,r7,-4
 800896c:	493fff15 	stw	r4,-4(r9)
 8008970:	42000104 	addi	r8,r8,4
 8008974:	59fffa36 	bltu	r11,r7,8008960 <__alt_data_end+0xfc008960>
 8008978:	513fff04 	addi	r4,r10,-4
 800897c:	2008d0ba 	srli	r4,r4,2
 8008980:	318000cc 	andi	r6,r6,3
 8008984:	21000044 	addi	r4,r4,1
 8008988:	2109883a 	add	r4,r4,r4
 800898c:	2109883a 	add	r4,r4,r4
 8008990:	1907883a 	add	r3,r3,r4
 8008994:	290b883a 	add	r5,r5,r4
 8008998:	30000926 	beq	r6,zero,80089c0 <memmove+0x148>
 800899c:	198d883a 	add	r6,r3,r6
 80089a0:	29c00003 	ldbu	r7,0(r5)
 80089a4:	18c00044 	addi	r3,r3,1
 80089a8:	29400044 	addi	r5,r5,1
 80089ac:	19ffffc5 	stb	r7,-1(r3)
 80089b0:	19bffb1e 	bne	r3,r6,80089a0 <__alt_data_end+0xfc0089a0>
 80089b4:	f800283a 	ret
 80089b8:	1007883a 	mov	r3,r2
 80089bc:	003ff606 	br	8008998 <__alt_data_end+0xfc008998>
 80089c0:	f800283a 	ret
 80089c4:	1007883a 	mov	r3,r2
 80089c8:	003ff406 	br	800899c <__alt_data_end+0xfc00899c>
 80089cc:	500d883a 	mov	r6,r10
 80089d0:	003ff106 	br	8008998 <__alt_data_end+0xfc008998>

080089d4 <_read_r>:
 80089d4:	defffd04 	addi	sp,sp,-12
 80089d8:	dc000015 	stw	r16,0(sp)
 80089dc:	04020074 	movhi	r16,2049
 80089e0:	dc400115 	stw	r17,4(sp)
 80089e4:	840aed04 	addi	r16,r16,11188
 80089e8:	2023883a 	mov	r17,r4
 80089ec:	2809883a 	mov	r4,r5
 80089f0:	300b883a 	mov	r5,r6
 80089f4:	380d883a 	mov	r6,r7
 80089f8:	dfc00215 	stw	ra,8(sp)
 80089fc:	80000015 	stw	zero,0(r16)
 8008a00:	800cc0c0 	call	800cc0c <read>
 8008a04:	00ffffc4 	movi	r3,-1
 8008a08:	10c00526 	beq	r2,r3,8008a20 <_read_r+0x4c>
 8008a0c:	dfc00217 	ldw	ra,8(sp)
 8008a10:	dc400117 	ldw	r17,4(sp)
 8008a14:	dc000017 	ldw	r16,0(sp)
 8008a18:	dec00304 	addi	sp,sp,12
 8008a1c:	f800283a 	ret
 8008a20:	80c00017 	ldw	r3,0(r16)
 8008a24:	183ff926 	beq	r3,zero,8008a0c <__alt_data_end+0xfc008a0c>
 8008a28:	88c00015 	stw	r3,0(r17)
 8008a2c:	003ff706 	br	8008a0c <__alt_data_end+0xfc008a0c>

08008a30 <_realloc_r>:
 8008a30:	defff604 	addi	sp,sp,-40
 8008a34:	dcc00315 	stw	r19,12(sp)
 8008a38:	dc400115 	stw	r17,4(sp)
 8008a3c:	dfc00915 	stw	ra,36(sp)
 8008a40:	df000815 	stw	fp,32(sp)
 8008a44:	ddc00715 	stw	r23,28(sp)
 8008a48:	dd800615 	stw	r22,24(sp)
 8008a4c:	dd400515 	stw	r21,20(sp)
 8008a50:	dd000415 	stw	r20,16(sp)
 8008a54:	dc800215 	stw	r18,8(sp)
 8008a58:	dc000015 	stw	r16,0(sp)
 8008a5c:	2827883a 	mov	r19,r5
 8008a60:	3023883a 	mov	r17,r6
 8008a64:	2800bf26 	beq	r5,zero,8008d64 <_realloc_r+0x334>
 8008a68:	2025883a 	mov	r18,r4
 8008a6c:	800cb7c0 	call	800cb7c <__malloc_lock>
 8008a70:	98ffff17 	ldw	r3,-4(r19)
 8008a74:	01bfff04 	movi	r6,-4
 8008a78:	890002c4 	addi	r4,r17,11
 8008a7c:	01c00584 	movi	r7,22
 8008a80:	9d7ffe04 	addi	r21,r19,-8
 8008a84:	19a0703a 	and	r16,r3,r6
 8008a88:	39003f2e 	bgeu	r7,r4,8008b88 <_realloc_r+0x158>
 8008a8c:	053ffe04 	movi	r20,-8
 8008a90:	2528703a 	and	r20,r4,r20
 8008a94:	a00f883a 	mov	r7,r20
 8008a98:	a0008216 	blt	r20,zero,8008ca4 <_realloc_r+0x274>
 8008a9c:	a4408136 	bltu	r20,r17,8008ca4 <_realloc_r+0x274>
 8008aa0:	81c03c0e 	bge	r16,r7,8008b94 <_realloc_r+0x164>
 8008aa4:	07020074 	movhi	fp,2049
 8008aa8:	e73e8204 	addi	fp,fp,-1528
 8008aac:	e1000217 	ldw	r4,8(fp)
 8008ab0:	ac05883a 	add	r2,r21,r16
 8008ab4:	2080bf26 	beq	r4,r2,8008db4 <_realloc_r+0x384>
 8008ab8:	11000117 	ldw	r4,4(r2)
 8008abc:	023fff84 	movi	r8,-2
 8008ac0:	2210703a 	and	r8,r4,r8
 8008ac4:	1211883a 	add	r8,r2,r8
 8008ac8:	41400117 	ldw	r5,4(r8)
 8008acc:	2940004c 	andi	r5,r5,1
 8008ad0:	28004a1e 	bne	r5,zero,8008bfc <_realloc_r+0x1cc>
 8008ad4:	017fff04 	movi	r5,-4
 8008ad8:	2148703a 	and	r4,r4,r5
 8008adc:	2409883a 	add	r4,r4,r16
 8008ae0:	21c0ad0e 	bge	r4,r7,8008d98 <_realloc_r+0x368>
 8008ae4:	18c0004c 	andi	r3,r3,1
 8008ae8:	18007f1e 	bne	r3,zero,8008ce8 <_realloc_r+0x2b8>
 8008aec:	9dfffe17 	ldw	r23,-8(r19)
 8008af0:	adefc83a 	sub	r23,r21,r23
 8008af4:	bd800117 	ldw	r22,4(r23)
 8008af8:	b14a703a 	and	r5,r22,r5
 8008afc:	216d883a 	add	r22,r4,r5
 8008b00:	b1c04516 	blt	r22,r7,8008c18 <_realloc_r+0x1e8>
 8008b04:	10c00317 	ldw	r3,12(r2)
 8008b08:	10800217 	ldw	r2,8(r2)
 8008b0c:	81bfff04 	addi	r6,r16,-4
 8008b10:	bc400204 	addi	r17,r23,8
 8008b14:	10c00315 	stw	r3,12(r2)
 8008b18:	18800215 	stw	r2,8(r3)
 8008b1c:	b9400217 	ldw	r5,8(r23)
 8008b20:	b8c00317 	ldw	r3,12(r23)
 8008b24:	00800904 	movi	r2,36
 8008b28:	28c00315 	stw	r3,12(r5)
 8008b2c:	19400215 	stw	r5,8(r3)
 8008b30:	1180ef36 	bltu	r2,r6,8008ef0 <_realloc_r+0x4c0>
 8008b34:	008004c4 	movi	r2,19
 8008b38:	1180da2e 	bgeu	r2,r6,8008ea4 <_realloc_r+0x474>
 8008b3c:	98800017 	ldw	r2,0(r19)
 8008b40:	b8800215 	stw	r2,8(r23)
 8008b44:	98800117 	ldw	r2,4(r19)
 8008b48:	b8800315 	stw	r2,12(r23)
 8008b4c:	008006c4 	movi	r2,27
 8008b50:	1180fc2e 	bgeu	r2,r6,8008f44 <_realloc_r+0x514>
 8008b54:	98800217 	ldw	r2,8(r19)
 8008b58:	b8800415 	stw	r2,16(r23)
 8008b5c:	98800317 	ldw	r2,12(r19)
 8008b60:	b8800515 	stw	r2,20(r23)
 8008b64:	00800904 	movi	r2,36
 8008b68:	3080421e 	bne	r6,r2,8008c74 <_realloc_r+0x244>
 8008b6c:	98800417 	ldw	r2,16(r19)
 8008b70:	9cc00604 	addi	r19,r19,24
 8008b74:	b8c00804 	addi	r3,r23,32
 8008b78:	b8800615 	stw	r2,24(r23)
 8008b7c:	98bfff17 	ldw	r2,-4(r19)
 8008b80:	b8800715 	stw	r2,28(r23)
 8008b84:	00003d06 	br	8008c7c <_realloc_r+0x24c>
 8008b88:	01c00404 	movi	r7,16
 8008b8c:	3829883a 	mov	r20,r7
 8008b90:	003fc206 	br	8008a9c <__alt_data_end+0xfc008a9c>
 8008b94:	9823883a 	mov	r17,r19
 8008b98:	850fc83a 	sub	r7,r16,r20
 8008b9c:	008003c4 	movi	r2,15
 8008ba0:	18c0004c 	andi	r3,r3,1
 8008ba4:	11c04336 	bltu	r2,r7,8008cb4 <_realloc_r+0x284>
 8008ba8:	1c06b03a 	or	r3,r3,r16
 8008bac:	a8c00115 	stw	r3,4(r21)
 8008bb0:	ac21883a 	add	r16,r21,r16
 8008bb4:	80c00117 	ldw	r3,4(r16)
 8008bb8:	18c00054 	ori	r3,r3,1
 8008bbc:	80c00115 	stw	r3,4(r16)
 8008bc0:	9009883a 	mov	r4,r18
 8008bc4:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8008bc8:	8805883a 	mov	r2,r17
 8008bcc:	dfc00917 	ldw	ra,36(sp)
 8008bd0:	df000817 	ldw	fp,32(sp)
 8008bd4:	ddc00717 	ldw	r23,28(sp)
 8008bd8:	dd800617 	ldw	r22,24(sp)
 8008bdc:	dd400517 	ldw	r21,20(sp)
 8008be0:	dd000417 	ldw	r20,16(sp)
 8008be4:	dcc00317 	ldw	r19,12(sp)
 8008be8:	dc800217 	ldw	r18,8(sp)
 8008bec:	dc400117 	ldw	r17,4(sp)
 8008bf0:	dc000017 	ldw	r16,0(sp)
 8008bf4:	dec00a04 	addi	sp,sp,40
 8008bf8:	f800283a 	ret
 8008bfc:	18c0004c 	andi	r3,r3,1
 8008c00:	1800391e 	bne	r3,zero,8008ce8 <_realloc_r+0x2b8>
 8008c04:	9dfffe17 	ldw	r23,-8(r19)
 8008c08:	00bfff04 	movi	r2,-4
 8008c0c:	adefc83a 	sub	r23,r21,r23
 8008c10:	b9400117 	ldw	r5,4(r23)
 8008c14:	288a703a 	and	r5,r5,r2
 8008c18:	2c2d883a 	add	r22,r5,r16
 8008c1c:	b1c03216 	blt	r22,r7,8008ce8 <_realloc_r+0x2b8>
 8008c20:	b8800317 	ldw	r2,12(r23)
 8008c24:	b8c00217 	ldw	r3,8(r23)
 8008c28:	81bfff04 	addi	r6,r16,-4
 8008c2c:	01000904 	movi	r4,36
 8008c30:	18800315 	stw	r2,12(r3)
 8008c34:	10c00215 	stw	r3,8(r2)
 8008c38:	bc400204 	addi	r17,r23,8
 8008c3c:	2180ac36 	bltu	r4,r6,8008ef0 <_realloc_r+0x4c0>
 8008c40:	008004c4 	movi	r2,19
 8008c44:	1180972e 	bgeu	r2,r6,8008ea4 <_realloc_r+0x474>
 8008c48:	98800017 	ldw	r2,0(r19)
 8008c4c:	b8800215 	stw	r2,8(r23)
 8008c50:	98800117 	ldw	r2,4(r19)
 8008c54:	b8800315 	stw	r2,12(r23)
 8008c58:	008006c4 	movi	r2,27
 8008c5c:	1180b92e 	bgeu	r2,r6,8008f44 <_realloc_r+0x514>
 8008c60:	98800217 	ldw	r2,8(r19)
 8008c64:	b8800415 	stw	r2,16(r23)
 8008c68:	98800317 	ldw	r2,12(r19)
 8008c6c:	b8800515 	stw	r2,20(r23)
 8008c70:	313fbe26 	beq	r6,r4,8008b6c <__alt_data_end+0xfc008b6c>
 8008c74:	b8c00604 	addi	r3,r23,24
 8008c78:	9cc00404 	addi	r19,r19,16
 8008c7c:	98800017 	ldw	r2,0(r19)
 8008c80:	b021883a 	mov	r16,r22
 8008c84:	b82b883a 	mov	r21,r23
 8008c88:	18800015 	stw	r2,0(r3)
 8008c8c:	98800117 	ldw	r2,4(r19)
 8008c90:	18800115 	stw	r2,4(r3)
 8008c94:	98800217 	ldw	r2,8(r19)
 8008c98:	18800215 	stw	r2,8(r3)
 8008c9c:	b8c00117 	ldw	r3,4(r23)
 8008ca0:	003fbd06 	br	8008b98 <__alt_data_end+0xfc008b98>
 8008ca4:	00800304 	movi	r2,12
 8008ca8:	90800015 	stw	r2,0(r18)
 8008cac:	0005883a 	mov	r2,zero
 8008cb0:	003fc606 	br	8008bcc <__alt_data_end+0xfc008bcc>
 8008cb4:	1d06b03a 	or	r3,r3,r20
 8008cb8:	ad0b883a 	add	r5,r21,r20
 8008cbc:	a8c00115 	stw	r3,4(r21)
 8008cc0:	38800054 	ori	r2,r7,1
 8008cc4:	28800115 	stw	r2,4(r5)
 8008cc8:	29cf883a 	add	r7,r5,r7
 8008ccc:	38800117 	ldw	r2,4(r7)
 8008cd0:	9009883a 	mov	r4,r18
 8008cd4:	29400204 	addi	r5,r5,8
 8008cd8:	10800054 	ori	r2,r2,1
 8008cdc:	38800115 	stw	r2,4(r7)
 8008ce0:	80045240 	call	8004524 <_free_r>
 8008ce4:	003fb606 	br	8008bc0 <__alt_data_end+0xfc008bc0>
 8008ce8:	880b883a 	mov	r5,r17
 8008cec:	9009883a 	mov	r4,r18
 8008cf0:	8004c1c0 	call	8004c1c <_malloc_r>
 8008cf4:	1023883a 	mov	r17,r2
 8008cf8:	1000aa26 	beq	r2,zero,8008fa4 <_realloc_r+0x574>
 8008cfc:	98ffff17 	ldw	r3,-4(r19)
 8008d00:	113ffe04 	addi	r4,r2,-8
 8008d04:	00bfff84 	movi	r2,-2
 8008d08:	1884703a 	and	r2,r3,r2
 8008d0c:	a885883a 	add	r2,r21,r2
 8008d10:	20808626 	beq	r4,r2,8008f2c <_realloc_r+0x4fc>
 8008d14:	81bfff04 	addi	r6,r16,-4
 8008d18:	00800904 	movi	r2,36
 8008d1c:	11807036 	bltu	r2,r6,8008ee0 <_realloc_r+0x4b0>
 8008d20:	00c004c4 	movi	r3,19
 8008d24:	19805636 	bltu	r3,r6,8008e80 <_realloc_r+0x450>
 8008d28:	8805883a 	mov	r2,r17
 8008d2c:	9807883a 	mov	r3,r19
 8008d30:	19000017 	ldw	r4,0(r3)
 8008d34:	11000015 	stw	r4,0(r2)
 8008d38:	19000117 	ldw	r4,4(r3)
 8008d3c:	11000115 	stw	r4,4(r2)
 8008d40:	18c00217 	ldw	r3,8(r3)
 8008d44:	10c00215 	stw	r3,8(r2)
 8008d48:	980b883a 	mov	r5,r19
 8008d4c:	9009883a 	mov	r4,r18
 8008d50:	80045240 	call	8004524 <_free_r>
 8008d54:	9009883a 	mov	r4,r18
 8008d58:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8008d5c:	8805883a 	mov	r2,r17
 8008d60:	003f9a06 	br	8008bcc <__alt_data_end+0xfc008bcc>
 8008d64:	300b883a 	mov	r5,r6
 8008d68:	dfc00917 	ldw	ra,36(sp)
 8008d6c:	df000817 	ldw	fp,32(sp)
 8008d70:	ddc00717 	ldw	r23,28(sp)
 8008d74:	dd800617 	ldw	r22,24(sp)
 8008d78:	dd400517 	ldw	r21,20(sp)
 8008d7c:	dd000417 	ldw	r20,16(sp)
 8008d80:	dcc00317 	ldw	r19,12(sp)
 8008d84:	dc800217 	ldw	r18,8(sp)
 8008d88:	dc400117 	ldw	r17,4(sp)
 8008d8c:	dc000017 	ldw	r16,0(sp)
 8008d90:	dec00a04 	addi	sp,sp,40
 8008d94:	8004c1c1 	jmpi	8004c1c <_malloc_r>
 8008d98:	11400317 	ldw	r5,12(r2)
 8008d9c:	10800217 	ldw	r2,8(r2)
 8008da0:	9823883a 	mov	r17,r19
 8008da4:	2021883a 	mov	r16,r4
 8008da8:	11400315 	stw	r5,12(r2)
 8008dac:	28800215 	stw	r2,8(r5)
 8008db0:	003f7906 	br	8008b98 <__alt_data_end+0xfc008b98>
 8008db4:	21000117 	ldw	r4,4(r4)
 8008db8:	00bfff04 	movi	r2,-4
 8008dbc:	a1800404 	addi	r6,r20,16
 8008dc0:	2088703a 	and	r4,r4,r2
 8008dc4:	2409883a 	add	r4,r4,r16
 8008dc8:	2180380e 	bge	r4,r6,8008eac <_realloc_r+0x47c>
 8008dcc:	18c0004c 	andi	r3,r3,1
 8008dd0:	183fc51e 	bne	r3,zero,8008ce8 <__alt_data_end+0xfc008ce8>
 8008dd4:	9dfffe17 	ldw	r23,-8(r19)
 8008dd8:	adefc83a 	sub	r23,r21,r23
 8008ddc:	b9400117 	ldw	r5,4(r23)
 8008de0:	288a703a 	and	r5,r5,r2
 8008de4:	216d883a 	add	r22,r4,r5
 8008de8:	b1bf8b16 	blt	r22,r6,8008c18 <__alt_data_end+0xfc008c18>
 8008dec:	b8800317 	ldw	r2,12(r23)
 8008df0:	b8c00217 	ldw	r3,8(r23)
 8008df4:	81bfff04 	addi	r6,r16,-4
 8008df8:	01000904 	movi	r4,36
 8008dfc:	18800315 	stw	r2,12(r3)
 8008e00:	10c00215 	stw	r3,8(r2)
 8008e04:	bc400204 	addi	r17,r23,8
 8008e08:	21805a36 	bltu	r4,r6,8008f74 <_realloc_r+0x544>
 8008e0c:	008004c4 	movi	r2,19
 8008e10:	1180562e 	bgeu	r2,r6,8008f6c <_realloc_r+0x53c>
 8008e14:	98800017 	ldw	r2,0(r19)
 8008e18:	b8800215 	stw	r2,8(r23)
 8008e1c:	98800117 	ldw	r2,4(r19)
 8008e20:	b8800315 	stw	r2,12(r23)
 8008e24:	008006c4 	movi	r2,27
 8008e28:	11805636 	bltu	r2,r6,8008f84 <_realloc_r+0x554>
 8008e2c:	b8800404 	addi	r2,r23,16
 8008e30:	9cc00204 	addi	r19,r19,8
 8008e34:	98c00017 	ldw	r3,0(r19)
 8008e38:	10c00015 	stw	r3,0(r2)
 8008e3c:	98c00117 	ldw	r3,4(r19)
 8008e40:	10c00115 	stw	r3,4(r2)
 8008e44:	98c00217 	ldw	r3,8(r19)
 8008e48:	10c00215 	stw	r3,8(r2)
 8008e4c:	bd07883a 	add	r3,r23,r20
 8008e50:	b505c83a 	sub	r2,r22,r20
 8008e54:	e0c00215 	stw	r3,8(fp)
 8008e58:	10800054 	ori	r2,r2,1
 8008e5c:	18800115 	stw	r2,4(r3)
 8008e60:	b8800117 	ldw	r2,4(r23)
 8008e64:	9009883a 	mov	r4,r18
 8008e68:	1080004c 	andi	r2,r2,1
 8008e6c:	a0a8b03a 	or	r20,r20,r2
 8008e70:	bd000115 	stw	r20,4(r23)
 8008e74:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8008e78:	8805883a 	mov	r2,r17
 8008e7c:	003f5306 	br	8008bcc <__alt_data_end+0xfc008bcc>
 8008e80:	98c00017 	ldw	r3,0(r19)
 8008e84:	88c00015 	stw	r3,0(r17)
 8008e88:	98c00117 	ldw	r3,4(r19)
 8008e8c:	88c00115 	stw	r3,4(r17)
 8008e90:	00c006c4 	movi	r3,27
 8008e94:	19801d36 	bltu	r3,r6,8008f0c <_realloc_r+0x4dc>
 8008e98:	88800204 	addi	r2,r17,8
 8008e9c:	98c00204 	addi	r3,r19,8
 8008ea0:	003fa306 	br	8008d30 <__alt_data_end+0xfc008d30>
 8008ea4:	8807883a 	mov	r3,r17
 8008ea8:	003f7406 	br	8008c7c <__alt_data_end+0xfc008c7c>
 8008eac:	ad2b883a 	add	r21,r21,r20
 8008eb0:	2505c83a 	sub	r2,r4,r20
 8008eb4:	e5400215 	stw	r21,8(fp)
 8008eb8:	10800054 	ori	r2,r2,1
 8008ebc:	a8800115 	stw	r2,4(r21)
 8008ec0:	98bfff17 	ldw	r2,-4(r19)
 8008ec4:	9009883a 	mov	r4,r18
 8008ec8:	1080004c 	andi	r2,r2,1
 8008ecc:	a0a8b03a 	or	r20,r20,r2
 8008ed0:	9d3fff15 	stw	r20,-4(r19)
 8008ed4:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8008ed8:	9805883a 	mov	r2,r19
 8008edc:	003f3b06 	br	8008bcc <__alt_data_end+0xfc008bcc>
 8008ee0:	8809883a 	mov	r4,r17
 8008ee4:	980b883a 	mov	r5,r19
 8008ee8:	80088780 	call	8008878 <memmove>
 8008eec:	003f9606 	br	8008d48 <__alt_data_end+0xfc008d48>
 8008ef0:	8809883a 	mov	r4,r17
 8008ef4:	980b883a 	mov	r5,r19
 8008ef8:	80088780 	call	8008878 <memmove>
 8008efc:	b8c00117 	ldw	r3,4(r23)
 8008f00:	b021883a 	mov	r16,r22
 8008f04:	b82b883a 	mov	r21,r23
 8008f08:	003f2306 	br	8008b98 <__alt_data_end+0xfc008b98>
 8008f0c:	98c00217 	ldw	r3,8(r19)
 8008f10:	88c00215 	stw	r3,8(r17)
 8008f14:	98c00317 	ldw	r3,12(r19)
 8008f18:	88c00315 	stw	r3,12(r17)
 8008f1c:	30800c26 	beq	r6,r2,8008f50 <_realloc_r+0x520>
 8008f20:	88800404 	addi	r2,r17,16
 8008f24:	98c00404 	addi	r3,r19,16
 8008f28:	003f8106 	br	8008d30 <__alt_data_end+0xfc008d30>
 8008f2c:	893fff17 	ldw	r4,-4(r17)
 8008f30:	00bfff04 	movi	r2,-4
 8008f34:	9823883a 	mov	r17,r19
 8008f38:	2084703a 	and	r2,r4,r2
 8008f3c:	80a1883a 	add	r16,r16,r2
 8008f40:	003f1506 	br	8008b98 <__alt_data_end+0xfc008b98>
 8008f44:	b8c00404 	addi	r3,r23,16
 8008f48:	9cc00204 	addi	r19,r19,8
 8008f4c:	003f4b06 	br	8008c7c <__alt_data_end+0xfc008c7c>
 8008f50:	99000417 	ldw	r4,16(r19)
 8008f54:	88800604 	addi	r2,r17,24
 8008f58:	98c00604 	addi	r3,r19,24
 8008f5c:	89000415 	stw	r4,16(r17)
 8008f60:	99000517 	ldw	r4,20(r19)
 8008f64:	89000515 	stw	r4,20(r17)
 8008f68:	003f7106 	br	8008d30 <__alt_data_end+0xfc008d30>
 8008f6c:	8805883a 	mov	r2,r17
 8008f70:	003fb006 	br	8008e34 <__alt_data_end+0xfc008e34>
 8008f74:	8809883a 	mov	r4,r17
 8008f78:	980b883a 	mov	r5,r19
 8008f7c:	80088780 	call	8008878 <memmove>
 8008f80:	003fb206 	br	8008e4c <__alt_data_end+0xfc008e4c>
 8008f84:	98800217 	ldw	r2,8(r19)
 8008f88:	b8800415 	stw	r2,16(r23)
 8008f8c:	98800317 	ldw	r2,12(r19)
 8008f90:	b8800515 	stw	r2,20(r23)
 8008f94:	31000726 	beq	r6,r4,8008fb4 <_realloc_r+0x584>
 8008f98:	b8800604 	addi	r2,r23,24
 8008f9c:	9cc00404 	addi	r19,r19,16
 8008fa0:	003fa406 	br	8008e34 <__alt_data_end+0xfc008e34>
 8008fa4:	9009883a 	mov	r4,r18
 8008fa8:	800cb9c0 	call	800cb9c <__malloc_unlock>
 8008fac:	0005883a 	mov	r2,zero
 8008fb0:	003f0606 	br	8008bcc <__alt_data_end+0xfc008bcc>
 8008fb4:	98c00417 	ldw	r3,16(r19)
 8008fb8:	9cc00604 	addi	r19,r19,24
 8008fbc:	b8800804 	addi	r2,r23,32
 8008fc0:	b8c00615 	stw	r3,24(r23)
 8008fc4:	98ffff17 	ldw	r3,-4(r19)
 8008fc8:	b8c00715 	stw	r3,28(r23)
 8008fcc:	003f9906 	br	8008e34 <__alt_data_end+0xfc008e34>

08008fd0 <__swbuf_r>:
 8008fd0:	defffc04 	addi	sp,sp,-16
 8008fd4:	dc800215 	stw	r18,8(sp)
 8008fd8:	dc400115 	stw	r17,4(sp)
 8008fdc:	dc000015 	stw	r16,0(sp)
 8008fe0:	dfc00315 	stw	ra,12(sp)
 8008fe4:	2025883a 	mov	r18,r4
 8008fe8:	2823883a 	mov	r17,r5
 8008fec:	3021883a 	mov	r16,r6
 8008ff0:	20000226 	beq	r4,zero,8008ffc <__swbuf_r+0x2c>
 8008ff4:	20800e17 	ldw	r2,56(r4)
 8008ff8:	10004126 	beq	r2,zero,8009100 <__swbuf_r+0x130>
 8008ffc:	80c00617 	ldw	r3,24(r16)
 8009000:	8180030b 	ldhu	r6,12(r16)
 8009004:	80c00215 	stw	r3,8(r16)
 8009008:	30c0020c 	andi	r3,r6,8
 800900c:	18003526 	beq	r3,zero,80090e4 <__swbuf_r+0x114>
 8009010:	80c00417 	ldw	r3,16(r16)
 8009014:	18003326 	beq	r3,zero,80090e4 <__swbuf_r+0x114>
 8009018:	3088000c 	andi	r2,r6,8192
 800901c:	8c403fcc 	andi	r17,r17,255
 8009020:	10001726 	beq	r2,zero,8009080 <__swbuf_r+0xb0>
 8009024:	80800017 	ldw	r2,0(r16)
 8009028:	81000517 	ldw	r4,20(r16)
 800902c:	10c7c83a 	sub	r3,r2,r3
 8009030:	19001d0e 	bge	r3,r4,80090a8 <__swbuf_r+0xd8>
 8009034:	18c00044 	addi	r3,r3,1
 8009038:	81400217 	ldw	r5,8(r16)
 800903c:	11000044 	addi	r4,r2,1
 8009040:	81000015 	stw	r4,0(r16)
 8009044:	297fffc4 	addi	r5,r5,-1
 8009048:	81400215 	stw	r5,8(r16)
 800904c:	14400005 	stb	r17,0(r2)
 8009050:	80800517 	ldw	r2,20(r16)
 8009054:	10c01d26 	beq	r2,r3,80090cc <__swbuf_r+0xfc>
 8009058:	8080030b 	ldhu	r2,12(r16)
 800905c:	1080004c 	andi	r2,r2,1
 8009060:	1000181e 	bne	r2,zero,80090c4 <__swbuf_r+0xf4>
 8009064:	8805883a 	mov	r2,r17
 8009068:	dfc00317 	ldw	ra,12(sp)
 800906c:	dc800217 	ldw	r18,8(sp)
 8009070:	dc400117 	ldw	r17,4(sp)
 8009074:	dc000017 	ldw	r16,0(sp)
 8009078:	dec00404 	addi	sp,sp,16
 800907c:	f800283a 	ret
 8009080:	81001917 	ldw	r4,100(r16)
 8009084:	00b7ffc4 	movi	r2,-8193
 8009088:	31880014 	ori	r6,r6,8192
 800908c:	2084703a 	and	r2,r4,r2
 8009090:	80801915 	stw	r2,100(r16)
 8009094:	80800017 	ldw	r2,0(r16)
 8009098:	81000517 	ldw	r4,20(r16)
 800909c:	8180030d 	sth	r6,12(r16)
 80090a0:	10c7c83a 	sub	r3,r2,r3
 80090a4:	193fe316 	blt	r3,r4,8009034 <__alt_data_end+0xfc009034>
 80090a8:	9009883a 	mov	r4,r18
 80090ac:	800b883a 	mov	r5,r16
 80090b0:	8003e080 	call	8003e08 <_fflush_r>
 80090b4:	1000091e 	bne	r2,zero,80090dc <__swbuf_r+0x10c>
 80090b8:	80800017 	ldw	r2,0(r16)
 80090bc:	00c00044 	movi	r3,1
 80090c0:	003fdd06 	br	8009038 <__alt_data_end+0xfc009038>
 80090c4:	00800284 	movi	r2,10
 80090c8:	88bfe61e 	bne	r17,r2,8009064 <__alt_data_end+0xfc009064>
 80090cc:	9009883a 	mov	r4,r18
 80090d0:	800b883a 	mov	r5,r16
 80090d4:	8003e080 	call	8003e08 <_fflush_r>
 80090d8:	103fe226 	beq	r2,zero,8009064 <__alt_data_end+0xfc009064>
 80090dc:	00bfffc4 	movi	r2,-1
 80090e0:	003fe106 	br	8009068 <__alt_data_end+0xfc009068>
 80090e4:	9009883a 	mov	r4,r18
 80090e8:	800b883a 	mov	r5,r16
 80090ec:	80023b00 	call	80023b0 <__swsetup_r>
 80090f0:	1000051e 	bne	r2,zero,8009108 <__swbuf_r+0x138>
 80090f4:	8180030b 	ldhu	r6,12(r16)
 80090f8:	80c00417 	ldw	r3,16(r16)
 80090fc:	003fc606 	br	8009018 <__alt_data_end+0xfc009018>
 8009100:	80043b00 	call	80043b0 <__sinit>
 8009104:	003fbd06 	br	8008ffc <__alt_data_end+0xfc008ffc>
 8009108:	80c0030b 	ldhu	r3,12(r16)
 800910c:	00bfffc4 	movi	r2,-1
 8009110:	18c01014 	ori	r3,r3,64
 8009114:	80c0030d 	sth	r3,12(r16)
 8009118:	00c00244 	movi	r3,9
 800911c:	90c00015 	stw	r3,0(r18)
 8009120:	003fd106 	br	8009068 <__alt_data_end+0xfc009068>

08009124 <__swbuf>:
 8009124:	00c20074 	movhi	r3,2049
 8009128:	18c41204 	addi	r3,r3,4168
 800912c:	2005883a 	mov	r2,r4
 8009130:	19000017 	ldw	r4,0(r3)
 8009134:	280d883a 	mov	r6,r5
 8009138:	100b883a 	mov	r5,r2
 800913c:	8008fd01 	jmpi	8008fd0 <__swbuf_r>

08009140 <_wcrtomb_r>:
 8009140:	defff604 	addi	sp,sp,-40
 8009144:	00820074 	movhi	r2,2049
 8009148:	dc800815 	stw	r18,32(sp)
 800914c:	dc400715 	stw	r17,28(sp)
 8009150:	dc000615 	stw	r16,24(sp)
 8009154:	10841604 	addi	r2,r2,4184
 8009158:	dfc00915 	stw	ra,36(sp)
 800915c:	2021883a 	mov	r16,r4
 8009160:	3823883a 	mov	r17,r7
 8009164:	14800017 	ldw	r18,0(r2)
 8009168:	28001426 	beq	r5,zero,80091bc <_wcrtomb_r+0x7c>
 800916c:	d9400415 	stw	r5,16(sp)
 8009170:	d9800515 	stw	r6,20(sp)
 8009174:	8004a000 	call	8004a00 <__locale_charset>
 8009178:	d9400417 	ldw	r5,16(sp)
 800917c:	d9800517 	ldw	r6,20(sp)
 8009180:	8009883a 	mov	r4,r16
 8009184:	dc400015 	stw	r17,0(sp)
 8009188:	100f883a 	mov	r7,r2
 800918c:	903ee83a 	callr	r18
 8009190:	00ffffc4 	movi	r3,-1
 8009194:	10c0031e 	bne	r2,r3,80091a4 <_wcrtomb_r+0x64>
 8009198:	88000015 	stw	zero,0(r17)
 800919c:	00c02284 	movi	r3,138
 80091a0:	80c00015 	stw	r3,0(r16)
 80091a4:	dfc00917 	ldw	ra,36(sp)
 80091a8:	dc800817 	ldw	r18,32(sp)
 80091ac:	dc400717 	ldw	r17,28(sp)
 80091b0:	dc000617 	ldw	r16,24(sp)
 80091b4:	dec00a04 	addi	sp,sp,40
 80091b8:	f800283a 	ret
 80091bc:	8004a000 	call	8004a00 <__locale_charset>
 80091c0:	8009883a 	mov	r4,r16
 80091c4:	dc400015 	stw	r17,0(sp)
 80091c8:	d9400104 	addi	r5,sp,4
 80091cc:	000d883a 	mov	r6,zero
 80091d0:	100f883a 	mov	r7,r2
 80091d4:	903ee83a 	callr	r18
 80091d8:	003fed06 	br	8009190 <__alt_data_end+0xfc009190>

080091dc <wcrtomb>:
 80091dc:	defff504 	addi	sp,sp,-44
 80091e0:	dc400515 	stw	r17,20(sp)
 80091e4:	dc000415 	stw	r16,16(sp)
 80091e8:	dfc00a15 	stw	ra,40(sp)
 80091ec:	dd400915 	stw	r21,36(sp)
 80091f0:	dd000815 	stw	r20,32(sp)
 80091f4:	dcc00715 	stw	r19,28(sp)
 80091f8:	dc800615 	stw	r18,24(sp)
 80091fc:	2021883a 	mov	r16,r4
 8009200:	3023883a 	mov	r17,r6
 8009204:	20001d26 	beq	r4,zero,800927c <wcrtomb+0xa0>
 8009208:	04820074 	movhi	r18,2049
 800920c:	94841204 	addi	r18,r18,4168
 8009210:	00820074 	movhi	r2,2049
 8009214:	95400017 	ldw	r21,0(r18)
 8009218:	10841604 	addi	r2,r2,4184
 800921c:	15000017 	ldw	r20,0(r2)
 8009220:	2827883a 	mov	r19,r5
 8009224:	8004a000 	call	8004a00 <__locale_charset>
 8009228:	a809883a 	mov	r4,r21
 800922c:	dc400015 	stw	r17,0(sp)
 8009230:	800b883a 	mov	r5,r16
 8009234:	980d883a 	mov	r6,r19
 8009238:	100f883a 	mov	r7,r2
 800923c:	a03ee83a 	callr	r20
 8009240:	00ffffc4 	movi	r3,-1
 8009244:	10c0041e 	bne	r2,r3,8009258 <wcrtomb+0x7c>
 8009248:	90c00017 	ldw	r3,0(r18)
 800924c:	01002284 	movi	r4,138
 8009250:	88000015 	stw	zero,0(r17)
 8009254:	19000015 	stw	r4,0(r3)
 8009258:	dfc00a17 	ldw	ra,40(sp)
 800925c:	dd400917 	ldw	r21,36(sp)
 8009260:	dd000817 	ldw	r20,32(sp)
 8009264:	dcc00717 	ldw	r19,28(sp)
 8009268:	dc800617 	ldw	r18,24(sp)
 800926c:	dc400517 	ldw	r17,20(sp)
 8009270:	dc000417 	ldw	r16,16(sp)
 8009274:	dec00b04 	addi	sp,sp,44
 8009278:	f800283a 	ret
 800927c:	04820074 	movhi	r18,2049
 8009280:	94841204 	addi	r18,r18,4168
 8009284:	00820074 	movhi	r2,2049
 8009288:	94c00017 	ldw	r19,0(r18)
 800928c:	10841604 	addi	r2,r2,4184
 8009290:	14000017 	ldw	r16,0(r2)
 8009294:	8004a000 	call	8004a00 <__locale_charset>
 8009298:	9809883a 	mov	r4,r19
 800929c:	dc400015 	stw	r17,0(sp)
 80092a0:	d9400104 	addi	r5,sp,4
 80092a4:	000d883a 	mov	r6,zero
 80092a8:	100f883a 	mov	r7,r2
 80092ac:	803ee83a 	callr	r16
 80092b0:	003fe306 	br	8009240 <__alt_data_end+0xfc009240>

080092b4 <__ascii_wctomb>:
 80092b4:	28000526 	beq	r5,zero,80092cc <__ascii_wctomb+0x18>
 80092b8:	00803fc4 	movi	r2,255
 80092bc:	11800536 	bltu	r2,r6,80092d4 <__ascii_wctomb+0x20>
 80092c0:	29800005 	stb	r6,0(r5)
 80092c4:	00800044 	movi	r2,1
 80092c8:	f800283a 	ret
 80092cc:	0005883a 	mov	r2,zero
 80092d0:	f800283a 	ret
 80092d4:	00802284 	movi	r2,138
 80092d8:	20800015 	stw	r2,0(r4)
 80092dc:	00bfffc4 	movi	r2,-1
 80092e0:	f800283a 	ret

080092e4 <_wctomb_r>:
 80092e4:	00820074 	movhi	r2,2049
 80092e8:	defff904 	addi	sp,sp,-28
 80092ec:	10841604 	addi	r2,r2,4184
 80092f0:	dfc00615 	stw	ra,24(sp)
 80092f4:	dc400515 	stw	r17,20(sp)
 80092f8:	dc000415 	stw	r16,16(sp)
 80092fc:	3823883a 	mov	r17,r7
 8009300:	14000017 	ldw	r16,0(r2)
 8009304:	d9000115 	stw	r4,4(sp)
 8009308:	d9400215 	stw	r5,8(sp)
 800930c:	d9800315 	stw	r6,12(sp)
 8009310:	8004a000 	call	8004a00 <__locale_charset>
 8009314:	d9000117 	ldw	r4,4(sp)
 8009318:	d9400217 	ldw	r5,8(sp)
 800931c:	d9800317 	ldw	r6,12(sp)
 8009320:	dc400015 	stw	r17,0(sp)
 8009324:	100f883a 	mov	r7,r2
 8009328:	803ee83a 	callr	r16
 800932c:	dfc00617 	ldw	ra,24(sp)
 8009330:	dc400517 	ldw	r17,20(sp)
 8009334:	dc000417 	ldw	r16,16(sp)
 8009338:	dec00704 	addi	sp,sp,28
 800933c:	f800283a 	ret

08009340 <__udivdi3>:
 8009340:	defff504 	addi	sp,sp,-44
 8009344:	dcc00415 	stw	r19,16(sp)
 8009348:	dc000115 	stw	r16,4(sp)
 800934c:	dfc00a15 	stw	ra,40(sp)
 8009350:	df000915 	stw	fp,36(sp)
 8009354:	ddc00815 	stw	r23,32(sp)
 8009358:	dd800715 	stw	r22,28(sp)
 800935c:	dd400615 	stw	r21,24(sp)
 8009360:	dd000515 	stw	r20,20(sp)
 8009364:	dc800315 	stw	r18,12(sp)
 8009368:	dc400215 	stw	r17,8(sp)
 800936c:	2027883a 	mov	r19,r4
 8009370:	2821883a 	mov	r16,r5
 8009374:	3800421e 	bne	r7,zero,8009480 <__udivdi3+0x140>
 8009378:	3025883a 	mov	r18,r6
 800937c:	2023883a 	mov	r17,r4
 8009380:	2980542e 	bgeu	r5,r6,80094d4 <__udivdi3+0x194>
 8009384:	00bfffd4 	movui	r2,65535
 8009388:	282d883a 	mov	r22,r5
 800938c:	1180a836 	bltu	r2,r6,8009630 <__udivdi3+0x2f0>
 8009390:	00803fc4 	movi	r2,255
 8009394:	1181422e 	bgeu	r2,r6,80098a0 <__udivdi3+0x560>
 8009398:	00800204 	movi	r2,8
 800939c:	1007883a 	mov	r3,r2
 80093a0:	3084d83a 	srl	r2,r6,r2
 80093a4:	01020074 	movhi	r4,2049
 80093a8:	213d0804 	addi	r4,r4,-3040
 80093ac:	2085883a 	add	r2,r4,r2
 80093b0:	10800003 	ldbu	r2,0(r2)
 80093b4:	10c7883a 	add	r3,r2,r3
 80093b8:	00800804 	movi	r2,32
 80093bc:	10c5c83a 	sub	r2,r2,r3
 80093c0:	10000526 	beq	r2,zero,80093d8 <__udivdi3+0x98>
 80093c4:	80a0983a 	sll	r16,r16,r2
 80093c8:	98c6d83a 	srl	r3,r19,r3
 80093cc:	30a4983a 	sll	r18,r6,r2
 80093d0:	98a2983a 	sll	r17,r19,r2
 80093d4:	80ecb03a 	or	r22,r16,r3
 80093d8:	902ad43a 	srli	r21,r18,16
 80093dc:	b009883a 	mov	r4,r22
 80093e0:	953fffcc 	andi	r20,r18,65535
 80093e4:	a80b883a 	mov	r5,r21
 80093e8:	8009fb40 	call	8009fb4 <__umodsi3>
 80093ec:	b009883a 	mov	r4,r22
 80093f0:	a80b883a 	mov	r5,r21
 80093f4:	1027883a 	mov	r19,r2
 80093f8:	8009fac0 	call	8009fac <__udivsi3>
 80093fc:	1021883a 	mov	r16,r2
 8009400:	8806d43a 	srli	r3,r17,16
 8009404:	9804943a 	slli	r2,r19,16
 8009408:	8527383a 	mul	r19,r16,r20
 800940c:	10c4b03a 	or	r2,r2,r3
 8009410:	14c0052e 	bgeu	r2,r19,8009428 <__udivdi3+0xe8>
 8009414:	1485883a 	add	r2,r2,r18
 8009418:	80ffffc4 	addi	r3,r16,-1
 800941c:	14800136 	bltu	r2,r18,8009424 <__udivdi3+0xe4>
 8009420:	14c13436 	bltu	r2,r19,80098f4 <__udivdi3+0x5b4>
 8009424:	1821883a 	mov	r16,r3
 8009428:	14e7c83a 	sub	r19,r2,r19
 800942c:	9809883a 	mov	r4,r19
 8009430:	a80b883a 	mov	r5,r21
 8009434:	8009fb40 	call	8009fb4 <__umodsi3>
 8009438:	102d883a 	mov	r22,r2
 800943c:	9809883a 	mov	r4,r19
 8009440:	a80b883a 	mov	r5,r21
 8009444:	8009fac0 	call	8009fac <__udivsi3>
 8009448:	b02c943a 	slli	r22,r22,16
 800944c:	1529383a 	mul	r20,r2,r20
 8009450:	8c7fffcc 	andi	r17,r17,65535
 8009454:	b462b03a 	or	r17,r22,r17
 8009458:	8d00052e 	bgeu	r17,r20,8009470 <__udivdi3+0x130>
 800945c:	8ca3883a 	add	r17,r17,r18
 8009460:	10ffffc4 	addi	r3,r2,-1
 8009464:	8c80f636 	bltu	r17,r18,8009840 <__udivdi3+0x500>
 8009468:	8d00f52e 	bgeu	r17,r20,8009840 <__udivdi3+0x500>
 800946c:	10bfff84 	addi	r2,r2,-2
 8009470:	8020943a 	slli	r16,r16,16
 8009474:	0007883a 	mov	r3,zero
 8009478:	1404b03a 	or	r2,r2,r16
 800947c:	00005b06 	br	80095ec <__udivdi3+0x2ac>
 8009480:	29c05836 	bltu	r5,r7,80095e4 <__udivdi3+0x2a4>
 8009484:	00bfffd4 	movui	r2,65535
 8009488:	11c0642e 	bgeu	r2,r7,800961c <__udivdi3+0x2dc>
 800948c:	00804034 	movhi	r2,256
 8009490:	10bfffc4 	addi	r2,r2,-1
 8009494:	11c0f32e 	bgeu	r2,r7,8009864 <__udivdi3+0x524>
 8009498:	00c00604 	movi	r3,24
 800949c:	180b883a 	mov	r5,r3
 80094a0:	38c6d83a 	srl	r3,r7,r3
 80094a4:	00820074 	movhi	r2,2049
 80094a8:	10bd0804 	addi	r2,r2,-3040
 80094ac:	10c7883a 	add	r3,r2,r3
 80094b0:	18c00003 	ldbu	r3,0(r3)
 80094b4:	01000804 	movi	r4,32
 80094b8:	1947883a 	add	r3,r3,r5
 80094bc:	20e5c83a 	sub	r18,r4,r3
 80094c0:	9000661e 	bne	r18,zero,800965c <__udivdi3+0x31c>
 80094c4:	3c00f936 	bltu	r7,r16,80098ac <__udivdi3+0x56c>
 80094c8:	9985403a 	cmpgeu	r2,r19,r6
 80094cc:	0007883a 	mov	r3,zero
 80094d0:	00004606 	br	80095ec <__udivdi3+0x2ac>
 80094d4:	3000041e 	bne	r6,zero,80094e8 <__udivdi3+0x1a8>
 80094d8:	01000044 	movi	r4,1
 80094dc:	000b883a 	mov	r5,zero
 80094e0:	8009fac0 	call	8009fac <__udivsi3>
 80094e4:	1025883a 	mov	r18,r2
 80094e8:	00bfffd4 	movui	r2,65535
 80094ec:	1480562e 	bgeu	r2,r18,8009648 <__udivdi3+0x308>
 80094f0:	00804034 	movhi	r2,256
 80094f4:	10bfffc4 	addi	r2,r2,-1
 80094f8:	1480e32e 	bgeu	r2,r18,8009888 <__udivdi3+0x548>
 80094fc:	00800604 	movi	r2,24
 8009500:	1007883a 	mov	r3,r2
 8009504:	9084d83a 	srl	r2,r18,r2
 8009508:	01020074 	movhi	r4,2049
 800950c:	213d0804 	addi	r4,r4,-3040
 8009510:	2085883a 	add	r2,r4,r2
 8009514:	10800003 	ldbu	r2,0(r2)
 8009518:	10c5883a 	add	r2,r2,r3
 800951c:	00c00804 	movi	r3,32
 8009520:	1887c83a 	sub	r3,r3,r2
 8009524:	1800911e 	bne	r3,zero,800976c <__udivdi3+0x42c>
 8009528:	9028d43a 	srli	r20,r18,16
 800952c:	84a1c83a 	sub	r16,r16,r18
 8009530:	957fffcc 	andi	r21,r18,65535
 8009534:	00c00044 	movi	r3,1
 8009538:	8009883a 	mov	r4,r16
 800953c:	a00b883a 	mov	r5,r20
 8009540:	d8c00015 	stw	r3,0(sp)
 8009544:	8009fb40 	call	8009fb4 <__umodsi3>
 8009548:	8009883a 	mov	r4,r16
 800954c:	a00b883a 	mov	r5,r20
 8009550:	1027883a 	mov	r19,r2
 8009554:	8009fac0 	call	8009fac <__udivsi3>
 8009558:	1021883a 	mov	r16,r2
 800955c:	880cd43a 	srli	r6,r17,16
 8009560:	9804943a 	slli	r2,r19,16
 8009564:	8567383a 	mul	r19,r16,r21
 8009568:	d8c00017 	ldw	r3,0(sp)
 800956c:	1188b03a 	or	r4,r2,r6
 8009570:	24c0052e 	bgeu	r4,r19,8009588 <__udivdi3+0x248>
 8009574:	2489883a 	add	r4,r4,r18
 8009578:	80bfffc4 	addi	r2,r16,-1
 800957c:	24800136 	bltu	r4,r18,8009584 <__udivdi3+0x244>
 8009580:	24c0d936 	bltu	r4,r19,80098e8 <__udivdi3+0x5a8>
 8009584:	1021883a 	mov	r16,r2
 8009588:	24e7c83a 	sub	r19,r4,r19
 800958c:	9809883a 	mov	r4,r19
 8009590:	a00b883a 	mov	r5,r20
 8009594:	d8c00015 	stw	r3,0(sp)
 8009598:	8009fb40 	call	8009fb4 <__umodsi3>
 800959c:	102d883a 	mov	r22,r2
 80095a0:	9809883a 	mov	r4,r19
 80095a4:	a00b883a 	mov	r5,r20
 80095a8:	8009fac0 	call	8009fac <__udivsi3>
 80095ac:	b02c943a 	slli	r22,r22,16
 80095b0:	156b383a 	mul	r21,r2,r21
 80095b4:	8c7fffcc 	andi	r17,r17,65535
 80095b8:	b462b03a 	or	r17,r22,r17
 80095bc:	d8c00017 	ldw	r3,0(sp)
 80095c0:	8d40052e 	bgeu	r17,r21,80095d8 <__udivdi3+0x298>
 80095c4:	8ca3883a 	add	r17,r17,r18
 80095c8:	113fffc4 	addi	r4,r2,-1
 80095cc:	8c809a36 	bltu	r17,r18,8009838 <__udivdi3+0x4f8>
 80095d0:	8d40992e 	bgeu	r17,r21,8009838 <__udivdi3+0x4f8>
 80095d4:	10bfff84 	addi	r2,r2,-2
 80095d8:	8020943a 	slli	r16,r16,16
 80095dc:	1404b03a 	or	r2,r2,r16
 80095e0:	00000206 	br	80095ec <__udivdi3+0x2ac>
 80095e4:	0007883a 	mov	r3,zero
 80095e8:	0005883a 	mov	r2,zero
 80095ec:	dfc00a17 	ldw	ra,40(sp)
 80095f0:	df000917 	ldw	fp,36(sp)
 80095f4:	ddc00817 	ldw	r23,32(sp)
 80095f8:	dd800717 	ldw	r22,28(sp)
 80095fc:	dd400617 	ldw	r21,24(sp)
 8009600:	dd000517 	ldw	r20,20(sp)
 8009604:	dcc00417 	ldw	r19,16(sp)
 8009608:	dc800317 	ldw	r18,12(sp)
 800960c:	dc400217 	ldw	r17,8(sp)
 8009610:	dc000117 	ldw	r16,4(sp)
 8009614:	dec00b04 	addi	sp,sp,44
 8009618:	f800283a 	ret
 800961c:	00803fc4 	movi	r2,255
 8009620:	11c0932e 	bgeu	r2,r7,8009870 <__udivdi3+0x530>
 8009624:	00c00204 	movi	r3,8
 8009628:	180b883a 	mov	r5,r3
 800962c:	003f9c06 	br	80094a0 <__alt_data_end+0xfc0094a0>
 8009630:	00804034 	movhi	r2,256
 8009634:	10bfffc4 	addi	r2,r2,-1
 8009638:	1180902e 	bgeu	r2,r6,800987c <__udivdi3+0x53c>
 800963c:	00800604 	movi	r2,24
 8009640:	1007883a 	mov	r3,r2
 8009644:	003f5606 	br	80093a0 <__alt_data_end+0xfc0093a0>
 8009648:	00803fc4 	movi	r2,255
 800964c:	1480912e 	bgeu	r2,r18,8009894 <__udivdi3+0x554>
 8009650:	00800204 	movi	r2,8
 8009654:	1007883a 	mov	r3,r2
 8009658:	003faa06 	br	8009504 <__alt_data_end+0xfc009504>
 800965c:	30eed83a 	srl	r23,r6,r3
 8009660:	3c8e983a 	sll	r7,r7,r18
 8009664:	80f8d83a 	srl	fp,r16,r3
 8009668:	98c6d83a 	srl	r3,r19,r3
 800966c:	3deeb03a 	or	r23,r7,r23
 8009670:	b828d43a 	srli	r20,r23,16
 8009674:	84a0983a 	sll	r16,r16,r18
 8009678:	e009883a 	mov	r4,fp
 800967c:	a00b883a 	mov	r5,r20
 8009680:	80e2b03a 	or	r17,r16,r3
 8009684:	34aa983a 	sll	r21,r6,r18
 8009688:	8009fb40 	call	8009fb4 <__umodsi3>
 800968c:	e009883a 	mov	r4,fp
 8009690:	a00b883a 	mov	r5,r20
 8009694:	102d883a 	mov	r22,r2
 8009698:	8009fac0 	call	8009fac <__udivsi3>
 800969c:	1021883a 	mov	r16,r2
 80096a0:	bf3fffcc 	andi	fp,r23,65535
 80096a4:	b004943a 	slli	r2,r22,16
 80096a8:	8808d43a 	srli	r4,r17,16
 80096ac:	872d383a 	mul	r22,r16,fp
 80096b0:	1104b03a 	or	r2,r2,r4
 80096b4:	1580042e 	bgeu	r2,r22,80096c8 <__udivdi3+0x388>
 80096b8:	15c5883a 	add	r2,r2,r23
 80096bc:	80ffffc4 	addi	r3,r16,-1
 80096c0:	15c0812e 	bgeu	r2,r23,80098c8 <__udivdi3+0x588>
 80096c4:	1821883a 	mov	r16,r3
 80096c8:	15adc83a 	sub	r22,r2,r22
 80096cc:	b009883a 	mov	r4,r22
 80096d0:	a00b883a 	mov	r5,r20
 80096d4:	8009fb40 	call	8009fb4 <__umodsi3>
 80096d8:	a00b883a 	mov	r5,r20
 80096dc:	b009883a 	mov	r4,r22
 80096e0:	d8800015 	stw	r2,0(sp)
 80096e4:	8009fac0 	call	8009fac <__udivsi3>
 80096e8:	d8c00017 	ldw	r3,0(sp)
 80096ec:	170b383a 	mul	r5,r2,fp
 80096f0:	8c7fffcc 	andi	r17,r17,65535
 80096f4:	1806943a 	slli	r3,r3,16
 80096f8:	1c46b03a 	or	r3,r3,r17
 80096fc:	1940042e 	bgeu	r3,r5,8009710 <__udivdi3+0x3d0>
 8009700:	1dc7883a 	add	r3,r3,r23
 8009704:	113fffc4 	addi	r4,r2,-1
 8009708:	1dc06b2e 	bgeu	r3,r23,80098b8 <__udivdi3+0x578>
 800970c:	2005883a 	mov	r2,r4
 8009710:	8020943a 	slli	r16,r16,16
 8009714:	a9ffffcc 	andi	r7,r21,65535
 8009718:	a82ad43a 	srli	r21,r21,16
 800971c:	1404b03a 	or	r2,r2,r16
 8009720:	113fffcc 	andi	r4,r2,65535
 8009724:	100cd43a 	srli	r6,r2,16
 8009728:	21d3383a 	mul	r9,r4,r7
 800972c:	2549383a 	mul	r4,r4,r21
 8009730:	31cf383a 	mul	r7,r6,r7
 8009734:	4810d43a 	srli	r8,r9,16
 8009738:	1947c83a 	sub	r3,r3,r5
 800973c:	3909883a 	add	r4,r7,r4
 8009740:	2209883a 	add	r4,r4,r8
 8009744:	354d383a 	mul	r6,r6,r21
 8009748:	21c0022e 	bgeu	r4,r7,8009754 <__udivdi3+0x414>
 800974c:	01400074 	movhi	r5,1
 8009750:	314d883a 	add	r6,r6,r5
 8009754:	202ad43a 	srli	r21,r4,16
 8009758:	354d883a 	add	r6,r6,r21
 800975c:	19803f36 	bltu	r3,r6,800985c <__udivdi3+0x51c>
 8009760:	19803926 	beq	r3,r6,8009848 <__udivdi3+0x508>
 8009764:	0007883a 	mov	r3,zero
 8009768:	003fa006 	br	80095ec <__alt_data_end+0xfc0095ec>
 800976c:	90e4983a 	sll	r18,r18,r3
 8009770:	80aad83a 	srl	r21,r16,r2
 8009774:	80e0983a 	sll	r16,r16,r3
 8009778:	9028d43a 	srli	r20,r18,16
 800977c:	9884d83a 	srl	r2,r19,r2
 8009780:	a809883a 	mov	r4,r21
 8009784:	a00b883a 	mov	r5,r20
 8009788:	80acb03a 	or	r22,r16,r2
 800978c:	98e2983a 	sll	r17,r19,r3
 8009790:	8009fb40 	call	8009fb4 <__umodsi3>
 8009794:	a809883a 	mov	r4,r21
 8009798:	a00b883a 	mov	r5,r20
 800979c:	1021883a 	mov	r16,r2
 80097a0:	8009fac0 	call	8009fac <__udivsi3>
 80097a4:	957fffcc 	andi	r21,r18,65535
 80097a8:	8020943a 	slli	r16,r16,16
 80097ac:	b00ad43a 	srli	r5,r22,16
 80097b0:	1567383a 	mul	r19,r2,r21
 80097b4:	102f883a 	mov	r23,r2
 80097b8:	8148b03a 	or	r4,r16,r5
 80097bc:	24c0062e 	bgeu	r4,r19,80097d8 <__udivdi3+0x498>
 80097c0:	2489883a 	add	r4,r4,r18
 80097c4:	10bfffc4 	addi	r2,r2,-1
 80097c8:	24804536 	bltu	r4,r18,80098e0 <__udivdi3+0x5a0>
 80097cc:	24c0442e 	bgeu	r4,r19,80098e0 <__udivdi3+0x5a0>
 80097d0:	bdffff84 	addi	r23,r23,-2
 80097d4:	2489883a 	add	r4,r4,r18
 80097d8:	24e7c83a 	sub	r19,r4,r19
 80097dc:	9809883a 	mov	r4,r19
 80097e0:	a00b883a 	mov	r5,r20
 80097e4:	8009fb40 	call	8009fb4 <__umodsi3>
 80097e8:	1021883a 	mov	r16,r2
 80097ec:	9809883a 	mov	r4,r19
 80097f0:	a00b883a 	mov	r5,r20
 80097f4:	8009fac0 	call	8009fac <__udivsi3>
 80097f8:	8020943a 	slli	r16,r16,16
 80097fc:	1007883a 	mov	r3,r2
 8009800:	1545383a 	mul	r2,r2,r21
 8009804:	b13fffcc 	andi	r4,r22,65535
 8009808:	8108b03a 	or	r4,r16,r4
 800980c:	2080062e 	bgeu	r4,r2,8009828 <__udivdi3+0x4e8>
 8009810:	2489883a 	add	r4,r4,r18
 8009814:	197fffc4 	addi	r5,r3,-1
 8009818:	24802f36 	bltu	r4,r18,80098d8 <__udivdi3+0x598>
 800981c:	20802e2e 	bgeu	r4,r2,80098d8 <__udivdi3+0x598>
 8009820:	18ffff84 	addi	r3,r3,-2
 8009824:	2489883a 	add	r4,r4,r18
 8009828:	b82e943a 	slli	r23,r23,16
 800982c:	20a1c83a 	sub	r16,r4,r2
 8009830:	1dc6b03a 	or	r3,r3,r23
 8009834:	003f4006 	br	8009538 <__alt_data_end+0xfc009538>
 8009838:	2005883a 	mov	r2,r4
 800983c:	003f6606 	br	80095d8 <__alt_data_end+0xfc0095d8>
 8009840:	1805883a 	mov	r2,r3
 8009844:	003f0a06 	br	8009470 <__alt_data_end+0xfc009470>
 8009848:	2006943a 	slli	r3,r4,16
 800984c:	9c88983a 	sll	r4,r19,r18
 8009850:	4a7fffcc 	andi	r9,r9,65535
 8009854:	1a47883a 	add	r3,r3,r9
 8009858:	20ffc22e 	bgeu	r4,r3,8009764 <__alt_data_end+0xfc009764>
 800985c:	10bfffc4 	addi	r2,r2,-1
 8009860:	003fc006 	br	8009764 <__alt_data_end+0xfc009764>
 8009864:	00c00404 	movi	r3,16
 8009868:	180b883a 	mov	r5,r3
 800986c:	003f0c06 	br	80094a0 <__alt_data_end+0xfc0094a0>
 8009870:	0007883a 	mov	r3,zero
 8009874:	000b883a 	mov	r5,zero
 8009878:	003f0906 	br	80094a0 <__alt_data_end+0xfc0094a0>
 800987c:	00800404 	movi	r2,16
 8009880:	1007883a 	mov	r3,r2
 8009884:	003ec606 	br	80093a0 <__alt_data_end+0xfc0093a0>
 8009888:	00800404 	movi	r2,16
 800988c:	1007883a 	mov	r3,r2
 8009890:	003f1c06 	br	8009504 <__alt_data_end+0xfc009504>
 8009894:	0005883a 	mov	r2,zero
 8009898:	0007883a 	mov	r3,zero
 800989c:	003f1906 	br	8009504 <__alt_data_end+0xfc009504>
 80098a0:	0005883a 	mov	r2,zero
 80098a4:	0007883a 	mov	r3,zero
 80098a8:	003ebd06 	br	80093a0 <__alt_data_end+0xfc0093a0>
 80098ac:	0007883a 	mov	r3,zero
 80098b0:	00800044 	movi	r2,1
 80098b4:	003f4d06 	br	80095ec <__alt_data_end+0xfc0095ec>
 80098b8:	197f942e 	bgeu	r3,r5,800970c <__alt_data_end+0xfc00970c>
 80098bc:	10bfff84 	addi	r2,r2,-2
 80098c0:	1dc7883a 	add	r3,r3,r23
 80098c4:	003f9206 	br	8009710 <__alt_data_end+0xfc009710>
 80098c8:	15bf7e2e 	bgeu	r2,r22,80096c4 <__alt_data_end+0xfc0096c4>
 80098cc:	843fff84 	addi	r16,r16,-2
 80098d0:	15c5883a 	add	r2,r2,r23
 80098d4:	003f7c06 	br	80096c8 <__alt_data_end+0xfc0096c8>
 80098d8:	2807883a 	mov	r3,r5
 80098dc:	003fd206 	br	8009828 <__alt_data_end+0xfc009828>
 80098e0:	102f883a 	mov	r23,r2
 80098e4:	003fbc06 	br	80097d8 <__alt_data_end+0xfc0097d8>
 80098e8:	843fff84 	addi	r16,r16,-2
 80098ec:	2489883a 	add	r4,r4,r18
 80098f0:	003f2506 	br	8009588 <__alt_data_end+0xfc009588>
 80098f4:	843fff84 	addi	r16,r16,-2
 80098f8:	1485883a 	add	r2,r2,r18
 80098fc:	003eca06 	br	8009428 <__alt_data_end+0xfc009428>

08009900 <__umoddi3>:
 8009900:	defff404 	addi	sp,sp,-48
 8009904:	ddc00915 	stw	r23,36(sp)
 8009908:	dc400315 	stw	r17,12(sp)
 800990c:	dc000215 	stw	r16,8(sp)
 8009910:	dfc00b15 	stw	ra,44(sp)
 8009914:	df000a15 	stw	fp,40(sp)
 8009918:	dd800815 	stw	r22,32(sp)
 800991c:	dd400715 	stw	r21,28(sp)
 8009920:	dd000615 	stw	r20,24(sp)
 8009924:	dcc00515 	stw	r19,20(sp)
 8009928:	dc800415 	stw	r18,16(sp)
 800992c:	2021883a 	mov	r16,r4
 8009930:	2823883a 	mov	r17,r5
 8009934:	282f883a 	mov	r23,r5
 8009938:	3800381e 	bne	r7,zero,8009a1c <__umoddi3+0x11c>
 800993c:	3027883a 	mov	r19,r6
 8009940:	2029883a 	mov	r20,r4
 8009944:	29804e2e 	bgeu	r5,r6,8009a80 <__umoddi3+0x180>
 8009948:	00bfffd4 	movui	r2,65535
 800994c:	11809c36 	bltu	r2,r6,8009bc0 <__umoddi3+0x2c0>
 8009950:	00803fc4 	movi	r2,255
 8009954:	11813b2e 	bgeu	r2,r6,8009e44 <__umoddi3+0x544>
 8009958:	01400204 	movi	r5,8
 800995c:	2805883a 	mov	r2,r5
 8009960:	314ad83a 	srl	r5,r6,r5
 8009964:	00c20074 	movhi	r3,2049
 8009968:	18fd0804 	addi	r3,r3,-3040
 800996c:	194b883a 	add	r5,r3,r5
 8009970:	29000003 	ldbu	r4,0(r5)
 8009974:	2089883a 	add	r4,r4,r2
 8009978:	00800804 	movi	r2,32
 800997c:	1105c83a 	sub	r2,r2,r4
 8009980:	1000ec26 	beq	r2,zero,8009d34 <__umoddi3+0x434>
 8009984:	88a2983a 	sll	r17,r17,r2
 8009988:	8108d83a 	srl	r4,r16,r4
 800998c:	30a6983a 	sll	r19,r6,r2
 8009990:	80a8983a 	sll	r20,r16,r2
 8009994:	1025883a 	mov	r18,r2
 8009998:	892eb03a 	or	r23,r17,r4
 800999c:	982cd43a 	srli	r22,r19,16
 80099a0:	b809883a 	mov	r4,r23
 80099a4:	9d7fffcc 	andi	r21,r19,65535
 80099a8:	b00b883a 	mov	r5,r22
 80099ac:	8009fb40 	call	8009fb4 <__umodsi3>
 80099b0:	b809883a 	mov	r4,r23
 80099b4:	b00b883a 	mov	r5,r22
 80099b8:	1021883a 	mov	r16,r2
 80099bc:	8009fac0 	call	8009fac <__udivsi3>
 80099c0:	8020943a 	slli	r16,r16,16
 80099c4:	a00cd43a 	srli	r6,r20,16
 80099c8:	1545383a 	mul	r2,r2,r21
 80099cc:	8188b03a 	or	r4,r16,r6
 80099d0:	2080042e 	bgeu	r4,r2,80099e4 <__umoddi3+0xe4>
 80099d4:	24c9883a 	add	r4,r4,r19
 80099d8:	24c00236 	bltu	r4,r19,80099e4 <__umoddi3+0xe4>
 80099dc:	2080012e 	bgeu	r4,r2,80099e4 <__umoddi3+0xe4>
 80099e0:	24c9883a 	add	r4,r4,r19
 80099e4:	20a3c83a 	sub	r17,r4,r2
 80099e8:	8809883a 	mov	r4,r17
 80099ec:	b00b883a 	mov	r5,r22
 80099f0:	8009fb40 	call	8009fb4 <__umodsi3>
 80099f4:	8809883a 	mov	r4,r17
 80099f8:	b00b883a 	mov	r5,r22
 80099fc:	1021883a 	mov	r16,r2
 8009a00:	8009fac0 	call	8009fac <__udivsi3>
 8009a04:	8006943a 	slli	r3,r16,16
 8009a08:	1545383a 	mul	r2,r2,r21
 8009a0c:	a13fffcc 	andi	r4,r20,65535
 8009a10:	1906b03a 	or	r3,r3,r4
 8009a14:	1880532e 	bgeu	r3,r2,8009b64 <__umoddi3+0x264>
 8009a18:	00004e06 	br	8009b54 <__umoddi3+0x254>
 8009a1c:	29c05536 	bltu	r5,r7,8009b74 <__umoddi3+0x274>
 8009a20:	00bfffd4 	movui	r2,65535
 8009a24:	11c0612e 	bgeu	r2,r7,8009bac <__umoddi3+0x2ac>
 8009a28:	00804034 	movhi	r2,256
 8009a2c:	10bfffc4 	addi	r2,r2,-1
 8009a30:	11c0f82e 	bgeu	r2,r7,8009e14 <__umoddi3+0x514>
 8009a34:	01400604 	movi	r5,24
 8009a38:	282b883a 	mov	r21,r5
 8009a3c:	394ad83a 	srl	r5,r7,r5
 8009a40:	00c20074 	movhi	r3,2049
 8009a44:	18fd0804 	addi	r3,r3,-3040
 8009a48:	194b883a 	add	r5,r3,r5
 8009a4c:	28800003 	ldbu	r2,0(r5)
 8009a50:	00c00804 	movi	r3,32
 8009a54:	156b883a 	add	r21,r2,r21
 8009a58:	1d69c83a 	sub	r20,r3,r21
 8009a5c:	a000631e 	bne	r20,zero,8009bec <__umoddi3+0x2ec>
 8009a60:	3c400136 	bltu	r7,r17,8009a68 <__umoddi3+0x168>
 8009a64:	81810436 	bltu	r16,r6,8009e78 <__umoddi3+0x578>
 8009a68:	8185c83a 	sub	r2,r16,r6
 8009a6c:	89e3c83a 	sub	r17,r17,r7
 8009a70:	8087803a 	cmpltu	r3,r16,r2
 8009a74:	88efc83a 	sub	r23,r17,r3
 8009a78:	b807883a 	mov	r3,r23
 8009a7c:	00003f06 	br	8009b7c <__umoddi3+0x27c>
 8009a80:	3000041e 	bne	r6,zero,8009a94 <__umoddi3+0x194>
 8009a84:	01000044 	movi	r4,1
 8009a88:	000b883a 	mov	r5,zero
 8009a8c:	8009fac0 	call	8009fac <__udivsi3>
 8009a90:	1027883a 	mov	r19,r2
 8009a94:	00bfffd4 	movui	r2,65535
 8009a98:	14c04f2e 	bgeu	r2,r19,8009bd8 <__umoddi3+0x2d8>
 8009a9c:	00804034 	movhi	r2,256
 8009aa0:	10bfffc4 	addi	r2,r2,-1
 8009aa4:	14c0e42e 	bgeu	r2,r19,8009e38 <__umoddi3+0x538>
 8009aa8:	00800604 	movi	r2,24
 8009aac:	1007883a 	mov	r3,r2
 8009ab0:	9884d83a 	srl	r2,r19,r2
 8009ab4:	01020074 	movhi	r4,2049
 8009ab8:	213d0804 	addi	r4,r4,-3040
 8009abc:	2085883a 	add	r2,r4,r2
 8009ac0:	11000003 	ldbu	r4,0(r2)
 8009ac4:	00800804 	movi	r2,32
 8009ac8:	20c7883a 	add	r3,r4,r3
 8009acc:	10c5c83a 	sub	r2,r2,r3
 8009ad0:	10009a1e 	bne	r2,zero,8009d3c <__umoddi3+0x43c>
 8009ad4:	982cd43a 	srli	r22,r19,16
 8009ad8:	8ce3c83a 	sub	r17,r17,r19
 8009adc:	9c3fffcc 	andi	r16,r19,65535
 8009ae0:	0025883a 	mov	r18,zero
 8009ae4:	8809883a 	mov	r4,r17
 8009ae8:	b00b883a 	mov	r5,r22
 8009aec:	8009fb40 	call	8009fb4 <__umodsi3>
 8009af0:	8809883a 	mov	r4,r17
 8009af4:	b00b883a 	mov	r5,r22
 8009af8:	102b883a 	mov	r21,r2
 8009afc:	8009fac0 	call	8009fac <__udivsi3>
 8009b00:	a806943a 	slli	r3,r21,16
 8009b04:	a008d43a 	srli	r4,r20,16
 8009b08:	1405383a 	mul	r2,r2,r16
 8009b0c:	190cb03a 	or	r6,r3,r4
 8009b10:	3080032e 	bgeu	r6,r2,8009b20 <__umoddi3+0x220>
 8009b14:	34cd883a 	add	r6,r6,r19
 8009b18:	34c00136 	bltu	r6,r19,8009b20 <__umoddi3+0x220>
 8009b1c:	3080d436 	bltu	r6,r2,8009e70 <__umoddi3+0x570>
 8009b20:	30abc83a 	sub	r21,r6,r2
 8009b24:	a809883a 	mov	r4,r21
 8009b28:	b00b883a 	mov	r5,r22
 8009b2c:	8009fb40 	call	8009fb4 <__umodsi3>
 8009b30:	1023883a 	mov	r17,r2
 8009b34:	a809883a 	mov	r4,r21
 8009b38:	b00b883a 	mov	r5,r22
 8009b3c:	8009fac0 	call	8009fac <__udivsi3>
 8009b40:	8822943a 	slli	r17,r17,16
 8009b44:	1405383a 	mul	r2,r2,r16
 8009b48:	a13fffcc 	andi	r4,r20,65535
 8009b4c:	8906b03a 	or	r3,r17,r4
 8009b50:	1880042e 	bgeu	r3,r2,8009b64 <__umoddi3+0x264>
 8009b54:	1cc7883a 	add	r3,r3,r19
 8009b58:	1cc00236 	bltu	r3,r19,8009b64 <__umoddi3+0x264>
 8009b5c:	1880012e 	bgeu	r3,r2,8009b64 <__umoddi3+0x264>
 8009b60:	1cc7883a 	add	r3,r3,r19
 8009b64:	1887c83a 	sub	r3,r3,r2
 8009b68:	1c84d83a 	srl	r2,r3,r18
 8009b6c:	0007883a 	mov	r3,zero
 8009b70:	00000206 	br	8009b7c <__umoddi3+0x27c>
 8009b74:	2005883a 	mov	r2,r4
 8009b78:	2807883a 	mov	r3,r5
 8009b7c:	dfc00b17 	ldw	ra,44(sp)
 8009b80:	df000a17 	ldw	fp,40(sp)
 8009b84:	ddc00917 	ldw	r23,36(sp)
 8009b88:	dd800817 	ldw	r22,32(sp)
 8009b8c:	dd400717 	ldw	r21,28(sp)
 8009b90:	dd000617 	ldw	r20,24(sp)
 8009b94:	dcc00517 	ldw	r19,20(sp)
 8009b98:	dc800417 	ldw	r18,16(sp)
 8009b9c:	dc400317 	ldw	r17,12(sp)
 8009ba0:	dc000217 	ldw	r16,8(sp)
 8009ba4:	dec00c04 	addi	sp,sp,48
 8009ba8:	f800283a 	ret
 8009bac:	00803fc4 	movi	r2,255
 8009bb0:	11c0952e 	bgeu	r2,r7,8009e08 <__umoddi3+0x508>
 8009bb4:	01400204 	movi	r5,8
 8009bb8:	282b883a 	mov	r21,r5
 8009bbc:	003f9f06 	br	8009a3c <__alt_data_end+0xfc009a3c>
 8009bc0:	00804034 	movhi	r2,256
 8009bc4:	10bfffc4 	addi	r2,r2,-1
 8009bc8:	1180952e 	bgeu	r2,r6,8009e20 <__umoddi3+0x520>
 8009bcc:	01400604 	movi	r5,24
 8009bd0:	2805883a 	mov	r2,r5
 8009bd4:	003f6206 	br	8009960 <__alt_data_end+0xfc009960>
 8009bd8:	00803fc4 	movi	r2,255
 8009bdc:	14c0932e 	bgeu	r2,r19,8009e2c <__umoddi3+0x52c>
 8009be0:	00800204 	movi	r2,8
 8009be4:	1007883a 	mov	r3,r2
 8009be8:	003fb106 	br	8009ab0 <__alt_data_end+0xfc009ab0>
 8009bec:	3548d83a 	srl	r4,r6,r21
 8009bf0:	3d0e983a 	sll	r7,r7,r20
 8009bf4:	8d10983a 	sll	r8,r17,r20
 8009bf8:	8d6cd83a 	srl	r22,r17,r21
 8009bfc:	3922b03a 	or	r17,r7,r4
 8009c00:	882ed43a 	srli	r23,r17,16
 8009c04:	8564d83a 	srl	r18,r16,r21
 8009c08:	b009883a 	mov	r4,r22
 8009c0c:	b80b883a 	mov	r5,r23
 8009c10:	44a4b03a 	or	r18,r8,r18
 8009c14:	3526983a 	sll	r19,r6,r20
 8009c18:	8009fb40 	call	8009fb4 <__umodsi3>
 8009c1c:	b009883a 	mov	r4,r22
 8009c20:	b80b883a 	mov	r5,r23
 8009c24:	1039883a 	mov	fp,r2
 8009c28:	8009fac0 	call	8009fac <__udivsi3>
 8009c2c:	102d883a 	mov	r22,r2
 8009c30:	8a3fffcc 	andi	r8,r17,65535
 8009c34:	e004943a 	slli	r2,fp,16
 8009c38:	900cd43a 	srli	r6,r18,16
 8009c3c:	b239383a 	mul	fp,r22,r8
 8009c40:	8520983a 	sll	r16,r16,r20
 8009c44:	118ab03a 	or	r5,r2,r6
 8009c48:	2f00042e 	bgeu	r5,fp,8009c5c <__umoddi3+0x35c>
 8009c4c:	2c4b883a 	add	r5,r5,r17
 8009c50:	b0bfffc4 	addi	r2,r22,-1
 8009c54:	2c40822e 	bgeu	r5,r17,8009e60 <__umoddi3+0x560>
 8009c58:	102d883a 	mov	r22,r2
 8009c5c:	2f39c83a 	sub	fp,r5,fp
 8009c60:	e009883a 	mov	r4,fp
 8009c64:	b80b883a 	mov	r5,r23
 8009c68:	da000115 	stw	r8,4(sp)
 8009c6c:	8009fb40 	call	8009fb4 <__umodsi3>
 8009c70:	e009883a 	mov	r4,fp
 8009c74:	b80b883a 	mov	r5,r23
 8009c78:	d8800015 	stw	r2,0(sp)
 8009c7c:	8009fac0 	call	8009fac <__udivsi3>
 8009c80:	d9800017 	ldw	r6,0(sp)
 8009c84:	da000117 	ldw	r8,4(sp)
 8009c88:	94bfffcc 	andi	r18,r18,65535
 8009c8c:	300c943a 	slli	r6,r6,16
 8009c90:	1209383a 	mul	r4,r2,r8
 8009c94:	3490b03a 	or	r8,r6,r18
 8009c98:	4100042e 	bgeu	r8,r4,8009cac <__umoddi3+0x3ac>
 8009c9c:	4451883a 	add	r8,r8,r17
 8009ca0:	10ffffc4 	addi	r3,r2,-1
 8009ca4:	44406a2e 	bgeu	r8,r17,8009e50 <__umoddi3+0x550>
 8009ca8:	1805883a 	mov	r2,r3
 8009cac:	b012943a 	slli	r9,r22,16
 8009cb0:	9abfffcc 	andi	r10,r19,65535
 8009cb4:	980ed43a 	srli	r7,r19,16
 8009cb8:	124ab03a 	or	r5,r2,r9
 8009cbc:	2a7fffcc 	andi	r9,r5,65535
 8009cc0:	280ad43a 	srli	r5,r5,16
 8009cc4:	4a8d383a 	mul	r6,r9,r10
 8009cc8:	49d3383a 	mul	r9,r9,r7
 8009ccc:	2a95383a 	mul	r10,r5,r10
 8009cd0:	3004d43a 	srli	r2,r6,16
 8009cd4:	4111c83a 	sub	r8,r8,r4
 8009cd8:	5253883a 	add	r9,r10,r9
 8009cdc:	4893883a 	add	r9,r9,r2
 8009ce0:	29cb383a 	mul	r5,r5,r7
 8009ce4:	4a80022e 	bgeu	r9,r10,8009cf0 <__umoddi3+0x3f0>
 8009ce8:	00800074 	movhi	r2,1
 8009cec:	288b883a 	add	r5,r5,r2
 8009cf0:	4808d43a 	srli	r4,r9,16
 8009cf4:	4812943a 	slli	r9,r9,16
 8009cf8:	31bfffcc 	andi	r6,r6,65535
 8009cfc:	290b883a 	add	r5,r5,r4
 8009d00:	498d883a 	add	r6,r9,r6
 8009d04:	41403a36 	bltu	r8,r5,8009df0 <__umoddi3+0x4f0>
 8009d08:	41405d26 	beq	r8,r5,8009e80 <__umoddi3+0x580>
 8009d0c:	4149c83a 	sub	r4,r8,r5
 8009d10:	300f883a 	mov	r7,r6
 8009d14:	81cfc83a 	sub	r7,r16,r7
 8009d18:	81c7803a 	cmpltu	r3,r16,r7
 8009d1c:	20c7c83a 	sub	r3,r4,r3
 8009d20:	1d44983a 	sll	r2,r3,r21
 8009d24:	3d0ed83a 	srl	r7,r7,r20
 8009d28:	1d06d83a 	srl	r3,r3,r20
 8009d2c:	11c4b03a 	or	r2,r2,r7
 8009d30:	003f9206 	br	8009b7c <__alt_data_end+0xfc009b7c>
 8009d34:	0025883a 	mov	r18,zero
 8009d38:	003f1806 	br	800999c <__alt_data_end+0xfc00999c>
 8009d3c:	98a6983a 	sll	r19,r19,r2
 8009d40:	88e8d83a 	srl	r20,r17,r3
 8009d44:	80c6d83a 	srl	r3,r16,r3
 8009d48:	982cd43a 	srli	r22,r19,16
 8009d4c:	88a2983a 	sll	r17,r17,r2
 8009d50:	a009883a 	mov	r4,r20
 8009d54:	b00b883a 	mov	r5,r22
 8009d58:	88eab03a 	or	r21,r17,r3
 8009d5c:	1025883a 	mov	r18,r2
 8009d60:	8009fb40 	call	8009fb4 <__umodsi3>
 8009d64:	a009883a 	mov	r4,r20
 8009d68:	b00b883a 	mov	r5,r22
 8009d6c:	1023883a 	mov	r17,r2
 8009d70:	8009fac0 	call	8009fac <__udivsi3>
 8009d74:	9f3fffcc 	andi	fp,r19,65535
 8009d78:	8822943a 	slli	r17,r17,16
 8009d7c:	a80ad43a 	srli	r5,r21,16
 8009d80:	1705383a 	mul	r2,r2,fp
 8009d84:	84a8983a 	sll	r20,r16,r18
 8009d88:	8948b03a 	or	r4,r17,r5
 8009d8c:	2080042e 	bgeu	r4,r2,8009da0 <__umoddi3+0x4a0>
 8009d90:	24c9883a 	add	r4,r4,r19
 8009d94:	24c00236 	bltu	r4,r19,8009da0 <__umoddi3+0x4a0>
 8009d98:	2080012e 	bgeu	r4,r2,8009da0 <__umoddi3+0x4a0>
 8009d9c:	24c9883a 	add	r4,r4,r19
 8009da0:	20afc83a 	sub	r23,r4,r2
 8009da4:	b809883a 	mov	r4,r23
 8009da8:	b00b883a 	mov	r5,r22
 8009dac:	8009fb40 	call	8009fb4 <__umodsi3>
 8009db0:	1023883a 	mov	r17,r2
 8009db4:	b809883a 	mov	r4,r23
 8009db8:	b00b883a 	mov	r5,r22
 8009dbc:	8009fac0 	call	8009fac <__udivsi3>
 8009dc0:	8822943a 	slli	r17,r17,16
 8009dc4:	1705383a 	mul	r2,r2,fp
 8009dc8:	a93fffcc 	andi	r4,r21,65535
 8009dcc:	8908b03a 	or	r4,r17,r4
 8009dd0:	2080042e 	bgeu	r4,r2,8009de4 <__umoddi3+0x4e4>
 8009dd4:	24c9883a 	add	r4,r4,r19
 8009dd8:	24c00236 	bltu	r4,r19,8009de4 <__umoddi3+0x4e4>
 8009ddc:	2080012e 	bgeu	r4,r2,8009de4 <__umoddi3+0x4e4>
 8009de0:	24c9883a 	add	r4,r4,r19
 8009de4:	20a3c83a 	sub	r17,r4,r2
 8009de8:	e021883a 	mov	r16,fp
 8009dec:	003f3d06 	br	8009ae4 <__alt_data_end+0xfc009ae4>
 8009df0:	34cfc83a 	sub	r7,r6,r19
 8009df4:	2c4bc83a 	sub	r5,r5,r17
 8009df8:	31cd803a 	cmpltu	r6,r6,r7
 8009dfc:	298dc83a 	sub	r6,r5,r6
 8009e00:	4189c83a 	sub	r4,r8,r6
 8009e04:	003fc306 	br	8009d14 <__alt_data_end+0xfc009d14>
 8009e08:	000b883a 	mov	r5,zero
 8009e0c:	002b883a 	mov	r21,zero
 8009e10:	003f0a06 	br	8009a3c <__alt_data_end+0xfc009a3c>
 8009e14:	01400404 	movi	r5,16
 8009e18:	282b883a 	mov	r21,r5
 8009e1c:	003f0706 	br	8009a3c <__alt_data_end+0xfc009a3c>
 8009e20:	01400404 	movi	r5,16
 8009e24:	2805883a 	mov	r2,r5
 8009e28:	003ecd06 	br	8009960 <__alt_data_end+0xfc009960>
 8009e2c:	0005883a 	mov	r2,zero
 8009e30:	0007883a 	mov	r3,zero
 8009e34:	003f1e06 	br	8009ab0 <__alt_data_end+0xfc009ab0>
 8009e38:	00800404 	movi	r2,16
 8009e3c:	1007883a 	mov	r3,r2
 8009e40:	003f1b06 	br	8009ab0 <__alt_data_end+0xfc009ab0>
 8009e44:	000b883a 	mov	r5,zero
 8009e48:	0005883a 	mov	r2,zero
 8009e4c:	003ec406 	br	8009960 <__alt_data_end+0xfc009960>
 8009e50:	413f952e 	bgeu	r8,r4,8009ca8 <__alt_data_end+0xfc009ca8>
 8009e54:	10bfff84 	addi	r2,r2,-2
 8009e58:	4451883a 	add	r8,r8,r17
 8009e5c:	003f9306 	br	8009cac <__alt_data_end+0xfc009cac>
 8009e60:	2f3f7d2e 	bgeu	r5,fp,8009c58 <__alt_data_end+0xfc009c58>
 8009e64:	b5bfff84 	addi	r22,r22,-2
 8009e68:	2c4b883a 	add	r5,r5,r17
 8009e6c:	003f7b06 	br	8009c5c <__alt_data_end+0xfc009c5c>
 8009e70:	34cd883a 	add	r6,r6,r19
 8009e74:	003f2a06 	br	8009b20 <__alt_data_end+0xfc009b20>
 8009e78:	8005883a 	mov	r2,r16
 8009e7c:	003efe06 	br	8009a78 <__alt_data_end+0xfc009a78>
 8009e80:	81bfdb36 	bltu	r16,r6,8009df0 <__alt_data_end+0xfc009df0>
 8009e84:	300f883a 	mov	r7,r6
 8009e88:	0009883a 	mov	r4,zero
 8009e8c:	003fa106 	br	8009d14 <__alt_data_end+0xfc009d14>

08009e90 <udivmodsi4>:
 8009e90:	2900182e 	bgeu	r5,r4,8009ef4 <udivmodsi4+0x64>
 8009e94:	28001716 	blt	r5,zero,8009ef4 <udivmodsi4+0x64>
 8009e98:	00800804 	movi	r2,32
 8009e9c:	00c00044 	movi	r3,1
 8009ea0:	00000206 	br	8009eac <udivmodsi4+0x1c>
 8009ea4:	10001126 	beq	r2,zero,8009eec <udivmodsi4+0x5c>
 8009ea8:	28000516 	blt	r5,zero,8009ec0 <udivmodsi4+0x30>
 8009eac:	294b883a 	add	r5,r5,r5
 8009eb0:	10bfffc4 	addi	r2,r2,-1
 8009eb4:	18c7883a 	add	r3,r3,r3
 8009eb8:	293ffa36 	bltu	r5,r4,8009ea4 <__alt_data_end+0xfc009ea4>
 8009ebc:	18000b26 	beq	r3,zero,8009eec <udivmodsi4+0x5c>
 8009ec0:	0005883a 	mov	r2,zero
 8009ec4:	21400236 	bltu	r4,r5,8009ed0 <udivmodsi4+0x40>
 8009ec8:	2149c83a 	sub	r4,r4,r5
 8009ecc:	10c4b03a 	or	r2,r2,r3
 8009ed0:	1806d07a 	srli	r3,r3,1
 8009ed4:	280ad07a 	srli	r5,r5,1
 8009ed8:	183ffa1e 	bne	r3,zero,8009ec4 <__alt_data_end+0xfc009ec4>
 8009edc:	3000011e 	bne	r6,zero,8009ee4 <udivmodsi4+0x54>
 8009ee0:	f800283a 	ret
 8009ee4:	2005883a 	mov	r2,r4
 8009ee8:	f800283a 	ret
 8009eec:	0005883a 	mov	r2,zero
 8009ef0:	003ffa06 	br	8009edc <__alt_data_end+0xfc009edc>
 8009ef4:	00c00044 	movi	r3,1
 8009ef8:	003ff106 	br	8009ec0 <__alt_data_end+0xfc009ec0>

08009efc <__divsi3>:
 8009efc:	defffe04 	addi	sp,sp,-8
 8009f00:	dfc00115 	stw	ra,4(sp)
 8009f04:	dc000015 	stw	r16,0(sp)
 8009f08:	20000b16 	blt	r4,zero,8009f38 <__divsi3+0x3c>
 8009f0c:	0021883a 	mov	r16,zero
 8009f10:	28000c16 	blt	r5,zero,8009f44 <__divsi3+0x48>
 8009f14:	000d883a 	mov	r6,zero
 8009f18:	8009e900 	call	8009e90 <udivmodsi4>
 8009f1c:	0407c83a 	sub	r3,zero,r16
 8009f20:	1884f03a 	xor	r2,r3,r2
 8009f24:	1405883a 	add	r2,r2,r16
 8009f28:	dfc00117 	ldw	ra,4(sp)
 8009f2c:	dc000017 	ldw	r16,0(sp)
 8009f30:	dec00204 	addi	sp,sp,8
 8009f34:	f800283a 	ret
 8009f38:	0109c83a 	sub	r4,zero,r4
 8009f3c:	04000044 	movi	r16,1
 8009f40:	283ff40e 	bge	r5,zero,8009f14 <__alt_data_end+0xfc009f14>
 8009f44:	014bc83a 	sub	r5,zero,r5
 8009f48:	8400005c 	xori	r16,r16,1
 8009f4c:	003ff106 	br	8009f14 <__alt_data_end+0xfc009f14>

08009f50 <__modsi3>:
 8009f50:	defffd04 	addi	sp,sp,-12
 8009f54:	dfc00215 	stw	ra,8(sp)
 8009f58:	dc400115 	stw	r17,4(sp)
 8009f5c:	dc000015 	stw	r16,0(sp)
 8009f60:	20000c16 	blt	r4,zero,8009f94 <__modsi3+0x44>
 8009f64:	0023883a 	mov	r17,zero
 8009f68:	0021883a 	mov	r16,zero
 8009f6c:	28000d16 	blt	r5,zero,8009fa4 <__modsi3+0x54>
 8009f70:	01800044 	movi	r6,1
 8009f74:	8009e900 	call	8009e90 <udivmodsi4>
 8009f78:	1404f03a 	xor	r2,r2,r16
 8009f7c:	8885883a 	add	r2,r17,r2
 8009f80:	dfc00217 	ldw	ra,8(sp)
 8009f84:	dc400117 	ldw	r17,4(sp)
 8009f88:	dc000017 	ldw	r16,0(sp)
 8009f8c:	dec00304 	addi	sp,sp,12
 8009f90:	f800283a 	ret
 8009f94:	0109c83a 	sub	r4,zero,r4
 8009f98:	04400044 	movi	r17,1
 8009f9c:	043fffc4 	movi	r16,-1
 8009fa0:	283ff30e 	bge	r5,zero,8009f70 <__alt_data_end+0xfc009f70>
 8009fa4:	014bc83a 	sub	r5,zero,r5
 8009fa8:	003ff106 	br	8009f70 <__alt_data_end+0xfc009f70>

08009fac <__udivsi3>:
 8009fac:	000d883a 	mov	r6,zero
 8009fb0:	8009e901 	jmpi	8009e90 <udivmodsi4>

08009fb4 <__umodsi3>:
 8009fb4:	01800044 	movi	r6,1
 8009fb8:	8009e901 	jmpi	8009e90 <udivmodsi4>

08009fbc <__adddf3>:
 8009fbc:	02000434 	movhi	r8,16
 8009fc0:	423fffc4 	addi	r8,r8,-1
 8009fc4:	defffb04 	addi	sp,sp,-20
 8009fc8:	2a12703a 	and	r9,r5,r8
 8009fcc:	2806d7fa 	srli	r3,r5,31
 8009fd0:	3a10703a 	and	r8,r7,r8
 8009fd4:	3804d53a 	srli	r2,r7,20
 8009fd8:	3014d77a 	srli	r10,r6,29
 8009fdc:	dc000015 	stw	r16,0(sp)
 8009fe0:	481290fa 	slli	r9,r9,3
 8009fe4:	2820d53a 	srli	r16,r5,20
 8009fe8:	401090fa 	slli	r8,r8,3
 8009fec:	200ad77a 	srli	r5,r4,29
 8009ff0:	380ed7fa 	srli	r7,r7,31
 8009ff4:	dc800215 	stw	r18,8(sp)
 8009ff8:	dc400115 	stw	r17,4(sp)
 8009ffc:	dfc00415 	stw	ra,16(sp)
 800a000:	dcc00315 	stw	r19,12(sp)
 800a004:	1c803fcc 	andi	r18,r3,255
 800a008:	8401ffcc 	andi	r16,r16,2047
 800a00c:	494ab03a 	or	r5,r9,r5
 800a010:	202290fa 	slli	r17,r4,3
 800a014:	1081ffcc 	andi	r2,r2,2047
 800a018:	4290b03a 	or	r8,r8,r10
 800a01c:	300c90fa 	slli	r6,r6,3
 800a020:	91c07026 	beq	r18,r7,800a1e4 <__adddf3+0x228>
 800a024:	8087c83a 	sub	r3,r16,r2
 800a028:	00c0b30e 	bge	zero,r3,800a2f8 <__adddf3+0x33c>
 800a02c:	10002a1e 	bne	r2,zero,800a0d8 <__adddf3+0x11c>
 800a030:	4184b03a 	or	r2,r8,r6
 800a034:	1000991e 	bne	r2,zero,800a29c <__adddf3+0x2e0>
 800a038:	888001cc 	andi	r2,r17,7
 800a03c:	10005b26 	beq	r2,zero,800a1ac <__adddf3+0x1f0>
 800a040:	88c003cc 	andi	r3,r17,15
 800a044:	00800104 	movi	r2,4
 800a048:	18805826 	beq	r3,r2,800a1ac <__adddf3+0x1f0>
 800a04c:	89800104 	addi	r6,r17,4
 800a050:	3463803a 	cmpltu	r17,r6,r17
 800a054:	2c4b883a 	add	r5,r5,r17
 800a058:	2880202c 	andhi	r2,r5,128
 800a05c:	9007883a 	mov	r3,r18
 800a060:	3023883a 	mov	r17,r6
 800a064:	10005426 	beq	r2,zero,800a1b8 <__adddf3+0x1fc>
 800a068:	84000044 	addi	r16,r16,1
 800a06c:	0081ffc4 	movi	r2,2047
 800a070:	8080c126 	beq	r16,r2,800a378 <__adddf3+0x3bc>
 800a074:	013fe034 	movhi	r4,65408
 800a078:	213fffc4 	addi	r4,r4,-1
 800a07c:	290a703a 	and	r5,r5,r4
 800a080:	2804977a 	slli	r2,r5,29
 800a084:	280a927a 	slli	r5,r5,9
 800a088:	8822d0fa 	srli	r17,r17,3
 800a08c:	8401ffcc 	andi	r16,r16,2047
 800a090:	2808d33a 	srli	r4,r5,12
 800a094:	1444b03a 	or	r2,r2,r17
 800a098:	8401ffcc 	andi	r16,r16,2047
 800a09c:	800a953a 	slli	r5,r16,20
 800a0a0:	18c03fcc 	andi	r3,r3,255
 800a0a4:	04000434 	movhi	r16,16
 800a0a8:	180697fa 	slli	r3,r3,31
 800a0ac:	843fffc4 	addi	r16,r16,-1
 800a0b0:	2420703a 	and	r16,r4,r16
 800a0b4:	8160b03a 	or	r16,r16,r5
 800a0b8:	80c6b03a 	or	r3,r16,r3
 800a0bc:	dfc00417 	ldw	ra,16(sp)
 800a0c0:	dcc00317 	ldw	r19,12(sp)
 800a0c4:	dc800217 	ldw	r18,8(sp)
 800a0c8:	dc400117 	ldw	r17,4(sp)
 800a0cc:	dc000017 	ldw	r16,0(sp)
 800a0d0:	dec00504 	addi	sp,sp,20
 800a0d4:	f800283a 	ret
 800a0d8:	0081ffc4 	movi	r2,2047
 800a0dc:	80bfd626 	beq	r16,r2,800a038 <__alt_data_end+0xfc00a038>
 800a0e0:	42002034 	orhi	r8,r8,128
 800a0e4:	00800e04 	movi	r2,56
 800a0e8:	10c0a616 	blt	r2,r3,800a384 <__adddf3+0x3c8>
 800a0ec:	008007c4 	movi	r2,31
 800a0f0:	10c0c916 	blt	r2,r3,800a418 <__adddf3+0x45c>
 800a0f4:	00800804 	movi	r2,32
 800a0f8:	10c5c83a 	sub	r2,r2,r3
 800a0fc:	408e983a 	sll	r7,r8,r2
 800a100:	30c8d83a 	srl	r4,r6,r3
 800a104:	3084983a 	sll	r2,r6,r2
 800a108:	40c6d83a 	srl	r3,r8,r3
 800a10c:	390cb03a 	or	r6,r7,r4
 800a110:	1004c03a 	cmpne	r2,r2,zero
 800a114:	308cb03a 	or	r6,r6,r2
 800a118:	898dc83a 	sub	r6,r17,r6
 800a11c:	89a3803a 	cmpltu	r17,r17,r6
 800a120:	28cbc83a 	sub	r5,r5,r3
 800a124:	2c4bc83a 	sub	r5,r5,r17
 800a128:	3023883a 	mov	r17,r6
 800a12c:	2880202c 	andhi	r2,r5,128
 800a130:	10006d26 	beq	r2,zero,800a2e8 <__adddf3+0x32c>
 800a134:	04c02034 	movhi	r19,128
 800a138:	9cffffc4 	addi	r19,r19,-1
 800a13c:	2ce6703a 	and	r19,r5,r19
 800a140:	98007e26 	beq	r19,zero,800a33c <__adddf3+0x380>
 800a144:	9809883a 	mov	r4,r19
 800a148:	800c5580 	call	800c558 <__clzsi2>
 800a14c:	10fffe04 	addi	r3,r2,-8
 800a150:	010007c4 	movi	r4,31
 800a154:	20c07f16 	blt	r4,r3,800a354 <__adddf3+0x398>
 800a158:	01400a04 	movi	r5,40
 800a15c:	2885c83a 	sub	r2,r5,r2
 800a160:	888ad83a 	srl	r5,r17,r2
 800a164:	98e6983a 	sll	r19,r19,r3
 800a168:	88e2983a 	sll	r17,r17,r3
 800a16c:	2ce6b03a 	or	r19,r5,r19
 800a170:	1c007c16 	blt	r3,r16,800a364 <__adddf3+0x3a8>
 800a174:	1c21c83a 	sub	r16,r3,r16
 800a178:	81400044 	addi	r5,r16,1
 800a17c:	00c007c4 	movi	r3,31
 800a180:	19409816 	blt	r3,r5,800a3e4 <__adddf3+0x428>
 800a184:	1c21c83a 	sub	r16,r3,r16
 800a188:	8c08983a 	sll	r4,r17,r16
 800a18c:	8946d83a 	srl	r3,r17,r5
 800a190:	9c20983a 	sll	r16,r19,r16
 800a194:	2008c03a 	cmpne	r4,r4,zero
 800a198:	994ad83a 	srl	r5,r19,r5
 800a19c:	1c06b03a 	or	r3,r3,r16
 800a1a0:	1922b03a 	or	r17,r3,r4
 800a1a4:	0021883a 	mov	r16,zero
 800a1a8:	003fa306 	br	800a038 <__alt_data_end+0xfc00a038>
 800a1ac:	2880202c 	andhi	r2,r5,128
 800a1b0:	9007883a 	mov	r3,r18
 800a1b4:	103fac1e 	bne	r2,zero,800a068 <__alt_data_end+0xfc00a068>
 800a1b8:	2804977a 	slli	r2,r5,29
 800a1bc:	8822d0fa 	srli	r17,r17,3
 800a1c0:	0101ffc4 	movi	r4,2047
 800a1c4:	280ad0fa 	srli	r5,r5,3
 800a1c8:	1444b03a 	or	r2,r2,r17
 800a1cc:	81002c26 	beq	r16,r4,800a280 <__adddf3+0x2c4>
 800a1d0:	8120703a 	and	r16,r16,r4
 800a1d4:	01000434 	movhi	r4,16
 800a1d8:	213fffc4 	addi	r4,r4,-1
 800a1dc:	2908703a 	and	r4,r5,r4
 800a1e0:	003fad06 	br	800a098 <__alt_data_end+0xfc00a098>
 800a1e4:	8089c83a 	sub	r4,r16,r2
 800a1e8:	01006a0e 	bge	zero,r4,800a394 <__adddf3+0x3d8>
 800a1ec:	10003326 	beq	r2,zero,800a2bc <__adddf3+0x300>
 800a1f0:	0081ffc4 	movi	r2,2047
 800a1f4:	80bf9026 	beq	r16,r2,800a038 <__alt_data_end+0xfc00a038>
 800a1f8:	42002034 	orhi	r8,r8,128
 800a1fc:	00800e04 	movi	r2,56
 800a200:	1100b116 	blt	r2,r4,800a4c8 <__adddf3+0x50c>
 800a204:	008007c4 	movi	r2,31
 800a208:	1100e216 	blt	r2,r4,800a594 <__adddf3+0x5d8>
 800a20c:	00800804 	movi	r2,32
 800a210:	1105c83a 	sub	r2,r2,r4
 800a214:	4092983a 	sll	r9,r8,r2
 800a218:	310ed83a 	srl	r7,r6,r4
 800a21c:	3084983a 	sll	r2,r6,r2
 800a220:	4110d83a 	srl	r8,r8,r4
 800a224:	49ccb03a 	or	r6,r9,r7
 800a228:	1004c03a 	cmpne	r2,r2,zero
 800a22c:	308cb03a 	or	r6,r6,r2
 800a230:	344d883a 	add	r6,r6,r17
 800a234:	3463803a 	cmpltu	r17,r6,r17
 800a238:	414b883a 	add	r5,r8,r5
 800a23c:	2c4b883a 	add	r5,r5,r17
 800a240:	3023883a 	mov	r17,r6
 800a244:	2880202c 	andhi	r2,r5,128
 800a248:	10002726 	beq	r2,zero,800a2e8 <__adddf3+0x32c>
 800a24c:	84000044 	addi	r16,r16,1
 800a250:	0081ffc4 	movi	r2,2047
 800a254:	8080ae26 	beq	r16,r2,800a510 <__adddf3+0x554>
 800a258:	00bfe034 	movhi	r2,65408
 800a25c:	10bfffc4 	addi	r2,r2,-1
 800a260:	288a703a 	and	r5,r5,r2
 800a264:	880cd07a 	srli	r6,r17,1
 800a268:	280897fa 	slli	r4,r5,31
 800a26c:	88c0004c 	andi	r3,r17,1
 800a270:	30e2b03a 	or	r17,r6,r3
 800a274:	280ad07a 	srli	r5,r5,1
 800a278:	8922b03a 	or	r17,r17,r4
 800a27c:	003f6e06 	br	800a038 <__alt_data_end+0xfc00a038>
 800a280:	1148b03a 	or	r4,r2,r5
 800a284:	20003c26 	beq	r4,zero,800a378 <__adddf3+0x3bc>
 800a288:	29000234 	orhi	r4,r5,8
 800a28c:	01400434 	movhi	r5,16
 800a290:	297fffc4 	addi	r5,r5,-1
 800a294:	2148703a 	and	r4,r4,r5
 800a298:	003f7f06 	br	800a098 <__alt_data_end+0xfc00a098>
 800a29c:	18ffffc4 	addi	r3,r3,-1
 800a2a0:	18004d1e 	bne	r3,zero,800a3d8 <__adddf3+0x41c>
 800a2a4:	898dc83a 	sub	r6,r17,r6
 800a2a8:	89a3803a 	cmpltu	r17,r17,r6
 800a2ac:	2a0bc83a 	sub	r5,r5,r8
 800a2b0:	2c4bc83a 	sub	r5,r5,r17
 800a2b4:	3023883a 	mov	r17,r6
 800a2b8:	003f9c06 	br	800a12c <__alt_data_end+0xfc00a12c>
 800a2bc:	4184b03a 	or	r2,r8,r6
 800a2c0:	103f5d26 	beq	r2,zero,800a038 <__alt_data_end+0xfc00a038>
 800a2c4:	213fffc4 	addi	r4,r4,-1
 800a2c8:	203fd926 	beq	r4,zero,800a230 <__alt_data_end+0xfc00a230>
 800a2cc:	0081ffc4 	movi	r2,2047
 800a2d0:	80bfca1e 	bne	r16,r2,800a1fc <__alt_data_end+0xfc00a1fc>
 800a2d4:	003f5806 	br	800a038 <__alt_data_end+0xfc00a038>
 800a2d8:	10c8b03a 	or	r4,r2,r3
 800a2dc:	20008b26 	beq	r4,zero,800a50c <__adddf3+0x550>
 800a2e0:	100b883a 	mov	r5,r2
 800a2e4:	1823883a 	mov	r17,r3
 800a2e8:	888001cc 	andi	r2,r17,7
 800a2ec:	103f541e 	bne	r2,zero,800a040 <__alt_data_end+0xfc00a040>
 800a2f0:	9007883a 	mov	r3,r18
 800a2f4:	003fb006 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a2f8:	1800531e 	bne	r3,zero,800a448 <__adddf3+0x48c>
 800a2fc:	80800044 	addi	r2,r16,1
 800a300:	1081ffcc 	andi	r2,r2,2047
 800a304:	00c00044 	movi	r3,1
 800a308:	1880990e 	bge	r3,r2,800a570 <__adddf3+0x5b4>
 800a30c:	8985c83a 	sub	r2,r17,r6
 800a310:	8887803a 	cmpltu	r3,r17,r2
 800a314:	2a27c83a 	sub	r19,r5,r8
 800a318:	98e7c83a 	sub	r19,r19,r3
 800a31c:	98c0202c 	andhi	r3,r19,128
 800a320:	18006226 	beq	r3,zero,800a4ac <__adddf3+0x4f0>
 800a324:	3463c83a 	sub	r17,r6,r17
 800a328:	4151c83a 	sub	r8,r8,r5
 800a32c:	344d803a 	cmpltu	r6,r6,r17
 800a330:	41a7c83a 	sub	r19,r8,r6
 800a334:	3825883a 	mov	r18,r7
 800a338:	983f821e 	bne	r19,zero,800a144 <__alt_data_end+0xfc00a144>
 800a33c:	8809883a 	mov	r4,r17
 800a340:	800c5580 	call	800c558 <__clzsi2>
 800a344:	10800804 	addi	r2,r2,32
 800a348:	10fffe04 	addi	r3,r2,-8
 800a34c:	010007c4 	movi	r4,31
 800a350:	20ff810e 	bge	r4,r3,800a158 <__alt_data_end+0xfc00a158>
 800a354:	14fff604 	addi	r19,r2,-40
 800a358:	8ce6983a 	sll	r19,r17,r19
 800a35c:	0023883a 	mov	r17,zero
 800a360:	1c3f840e 	bge	r3,r16,800a174 <__alt_data_end+0xfc00a174>
 800a364:	017fe034 	movhi	r5,65408
 800a368:	297fffc4 	addi	r5,r5,-1
 800a36c:	80e1c83a 	sub	r16,r16,r3
 800a370:	994a703a 	and	r5,r19,r5
 800a374:	003f3006 	br	800a038 <__alt_data_end+0xfc00a038>
 800a378:	0009883a 	mov	r4,zero
 800a37c:	0005883a 	mov	r2,zero
 800a380:	003f4506 	br	800a098 <__alt_data_end+0xfc00a098>
 800a384:	418cb03a 	or	r6,r8,r6
 800a388:	300cc03a 	cmpne	r6,r6,zero
 800a38c:	0007883a 	mov	r3,zero
 800a390:	003f6106 	br	800a118 <__alt_data_end+0xfc00a118>
 800a394:	2000921e 	bne	r4,zero,800a5e0 <__adddf3+0x624>
 800a398:	80800044 	addi	r2,r16,1
 800a39c:	11c1ffcc 	andi	r7,r2,2047
 800a3a0:	01000044 	movi	r4,1
 800a3a4:	21c0610e 	bge	r4,r7,800a52c <__adddf3+0x570>
 800a3a8:	0101ffc4 	movi	r4,2047
 800a3ac:	1100a326 	beq	r2,r4,800a63c <__adddf3+0x680>
 800a3b0:	344d883a 	add	r6,r6,r17
 800a3b4:	3463803a 	cmpltu	r17,r6,r17
 800a3b8:	414b883a 	add	r5,r8,r5
 800a3bc:	2c4b883a 	add	r5,r5,r17
 800a3c0:	282297fa 	slli	r17,r5,31
 800a3c4:	300cd07a 	srli	r6,r6,1
 800a3c8:	280ad07a 	srli	r5,r5,1
 800a3cc:	1021883a 	mov	r16,r2
 800a3d0:	89a2b03a 	or	r17,r17,r6
 800a3d4:	003f1806 	br	800a038 <__alt_data_end+0xfc00a038>
 800a3d8:	0081ffc4 	movi	r2,2047
 800a3dc:	80bf411e 	bne	r16,r2,800a0e4 <__alt_data_end+0xfc00a0e4>
 800a3e0:	003f1506 	br	800a038 <__alt_data_end+0xfc00a038>
 800a3e4:	80bff844 	addi	r2,r16,-31
 800a3e8:	00c00804 	movi	r3,32
 800a3ec:	9884d83a 	srl	r2,r19,r2
 800a3f0:	28c04a26 	beq	r5,r3,800a51c <__adddf3+0x560>
 800a3f4:	00c00fc4 	movi	r3,63
 800a3f8:	1c21c83a 	sub	r16,r3,r16
 800a3fc:	9c26983a 	sll	r19,r19,r16
 800a400:	9c62b03a 	or	r17,r19,r17
 800a404:	8822c03a 	cmpne	r17,r17,zero
 800a408:	88a2b03a 	or	r17,r17,r2
 800a40c:	000b883a 	mov	r5,zero
 800a410:	0021883a 	mov	r16,zero
 800a414:	003fb406 	br	800a2e8 <__alt_data_end+0xfc00a2e8>
 800a418:	18bff804 	addi	r2,r3,-32
 800a41c:	01000804 	movi	r4,32
 800a420:	4084d83a 	srl	r2,r8,r2
 800a424:	19003f26 	beq	r3,r4,800a524 <__adddf3+0x568>
 800a428:	01001004 	movi	r4,64
 800a42c:	20c7c83a 	sub	r3,r4,r3
 800a430:	40d0983a 	sll	r8,r8,r3
 800a434:	418cb03a 	or	r6,r8,r6
 800a438:	300cc03a 	cmpne	r6,r6,zero
 800a43c:	308cb03a 	or	r6,r6,r2
 800a440:	0007883a 	mov	r3,zero
 800a444:	003f3406 	br	800a118 <__alt_data_end+0xfc00a118>
 800a448:	80002326 	beq	r16,zero,800a4d8 <__adddf3+0x51c>
 800a44c:	0101ffc4 	movi	r4,2047
 800a450:	11005e26 	beq	r2,r4,800a5cc <__adddf3+0x610>
 800a454:	00c7c83a 	sub	r3,zero,r3
 800a458:	29402034 	orhi	r5,r5,128
 800a45c:	01000e04 	movi	r4,56
 800a460:	20c07216 	blt	r4,r3,800a62c <__adddf3+0x670>
 800a464:	010007c4 	movi	r4,31
 800a468:	20c0ce16 	blt	r4,r3,800a7a4 <__adddf3+0x7e8>
 800a46c:	01000804 	movi	r4,32
 800a470:	20c9c83a 	sub	r4,r4,r3
 800a474:	2914983a 	sll	r10,r5,r4
 800a478:	88d2d83a 	srl	r9,r17,r3
 800a47c:	8908983a 	sll	r4,r17,r4
 800a480:	28c6d83a 	srl	r3,r5,r3
 800a484:	5262b03a 	or	r17,r10,r9
 800a488:	2008c03a 	cmpne	r4,r4,zero
 800a48c:	8922b03a 	or	r17,r17,r4
 800a490:	3463c83a 	sub	r17,r6,r17
 800a494:	40c7c83a 	sub	r3,r8,r3
 800a498:	344d803a 	cmpltu	r6,r6,r17
 800a49c:	198bc83a 	sub	r5,r3,r6
 800a4a0:	1021883a 	mov	r16,r2
 800a4a4:	3825883a 	mov	r18,r7
 800a4a8:	003f2006 	br	800a12c <__alt_data_end+0xfc00a12c>
 800a4ac:	9886b03a 	or	r3,r19,r2
 800a4b0:	1800141e 	bne	r3,zero,800a504 <__adddf3+0x548>
 800a4b4:	0007883a 	mov	r3,zero
 800a4b8:	000b883a 	mov	r5,zero
 800a4bc:	0023883a 	mov	r17,zero
 800a4c0:	0021883a 	mov	r16,zero
 800a4c4:	003f3c06 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a4c8:	418cb03a 	or	r6,r8,r6
 800a4cc:	300cc03a 	cmpne	r6,r6,zero
 800a4d0:	0011883a 	mov	r8,zero
 800a4d4:	003f5606 	br	800a230 <__alt_data_end+0xfc00a230>
 800a4d8:	2c48b03a 	or	r4,r5,r17
 800a4dc:	20003b26 	beq	r4,zero,800a5cc <__adddf3+0x610>
 800a4e0:	00c6303a 	nor	r3,zero,r3
 800a4e4:	1800371e 	bne	r3,zero,800a5c4 <__adddf3+0x608>
 800a4e8:	3463c83a 	sub	r17,r6,r17
 800a4ec:	414bc83a 	sub	r5,r8,r5
 800a4f0:	344d803a 	cmpltu	r6,r6,r17
 800a4f4:	298bc83a 	sub	r5,r5,r6
 800a4f8:	1021883a 	mov	r16,r2
 800a4fc:	3825883a 	mov	r18,r7
 800a500:	003f0a06 	br	800a12c <__alt_data_end+0xfc00a12c>
 800a504:	1023883a 	mov	r17,r2
 800a508:	003f0d06 	br	800a140 <__alt_data_end+0xfc00a140>
 800a50c:	0007883a 	mov	r3,zero
 800a510:	000b883a 	mov	r5,zero
 800a514:	0023883a 	mov	r17,zero
 800a518:	003f2706 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a51c:	0027883a 	mov	r19,zero
 800a520:	003fb706 	br	800a400 <__alt_data_end+0xfc00a400>
 800a524:	0011883a 	mov	r8,zero
 800a528:	003fc206 	br	800a434 <__alt_data_end+0xfc00a434>
 800a52c:	2c44b03a 	or	r2,r5,r17
 800a530:	8000871e 	bne	r16,zero,800a750 <__adddf3+0x794>
 800a534:	1000b126 	beq	r2,zero,800a7fc <__adddf3+0x840>
 800a538:	4184b03a 	or	r2,r8,r6
 800a53c:	103ebe26 	beq	r2,zero,800a038 <__alt_data_end+0xfc00a038>
 800a540:	3445883a 	add	r2,r6,r17
 800a544:	1463803a 	cmpltu	r17,r2,r17
 800a548:	414b883a 	add	r5,r8,r5
 800a54c:	2c4b883a 	add	r5,r5,r17
 800a550:	28c0202c 	andhi	r3,r5,128
 800a554:	1023883a 	mov	r17,r2
 800a558:	183f6326 	beq	r3,zero,800a2e8 <__alt_data_end+0xfc00a2e8>
 800a55c:	00bfe034 	movhi	r2,65408
 800a560:	10bfffc4 	addi	r2,r2,-1
 800a564:	2021883a 	mov	r16,r4
 800a568:	288a703a 	and	r5,r5,r2
 800a56c:	003eb206 	br	800a038 <__alt_data_end+0xfc00a038>
 800a570:	2c44b03a 	or	r2,r5,r17
 800a574:	8000251e 	bne	r16,zero,800a60c <__adddf3+0x650>
 800a578:	10004b1e 	bne	r2,zero,800a6a8 <__adddf3+0x6ec>
 800a57c:	4184b03a 	or	r2,r8,r6
 800a580:	103fe226 	beq	r2,zero,800a50c <__alt_data_end+0xfc00a50c>
 800a584:	400b883a 	mov	r5,r8
 800a588:	3023883a 	mov	r17,r6
 800a58c:	3825883a 	mov	r18,r7
 800a590:	003ea906 	br	800a038 <__alt_data_end+0xfc00a038>
 800a594:	20bff804 	addi	r2,r4,-32
 800a598:	01c00804 	movi	r7,32
 800a59c:	4084d83a 	srl	r2,r8,r2
 800a5a0:	21c07e26 	beq	r4,r7,800a79c <__adddf3+0x7e0>
 800a5a4:	01c01004 	movi	r7,64
 800a5a8:	3909c83a 	sub	r4,r7,r4
 800a5ac:	4110983a 	sll	r8,r8,r4
 800a5b0:	418cb03a 	or	r6,r8,r6
 800a5b4:	300cc03a 	cmpne	r6,r6,zero
 800a5b8:	308cb03a 	or	r6,r6,r2
 800a5bc:	0011883a 	mov	r8,zero
 800a5c0:	003f1b06 	br	800a230 <__alt_data_end+0xfc00a230>
 800a5c4:	0101ffc4 	movi	r4,2047
 800a5c8:	113fa41e 	bne	r2,r4,800a45c <__alt_data_end+0xfc00a45c>
 800a5cc:	400b883a 	mov	r5,r8
 800a5d0:	3023883a 	mov	r17,r6
 800a5d4:	1021883a 	mov	r16,r2
 800a5d8:	3825883a 	mov	r18,r7
 800a5dc:	003e9606 	br	800a038 <__alt_data_end+0xfc00a038>
 800a5e0:	80001a1e 	bne	r16,zero,800a64c <__adddf3+0x690>
 800a5e4:	2c4eb03a 	or	r7,r5,r17
 800a5e8:	38005526 	beq	r7,zero,800a740 <__adddf3+0x784>
 800a5ec:	0108303a 	nor	r4,zero,r4
 800a5f0:	2000511e 	bne	r4,zero,800a738 <__adddf3+0x77c>
 800a5f4:	89a3883a 	add	r17,r17,r6
 800a5f8:	414b883a 	add	r5,r8,r5
 800a5fc:	898d803a 	cmpltu	r6,r17,r6
 800a600:	298b883a 	add	r5,r5,r6
 800a604:	1021883a 	mov	r16,r2
 800a608:	003f0e06 	br	800a244 <__alt_data_end+0xfc00a244>
 800a60c:	1000341e 	bne	r2,zero,800a6e0 <__adddf3+0x724>
 800a610:	4184b03a 	or	r2,r8,r6
 800a614:	10006f26 	beq	r2,zero,800a7d4 <__adddf3+0x818>
 800a618:	400b883a 	mov	r5,r8
 800a61c:	3023883a 	mov	r17,r6
 800a620:	3825883a 	mov	r18,r7
 800a624:	0401ffc4 	movi	r16,2047
 800a628:	003e8306 	br	800a038 <__alt_data_end+0xfc00a038>
 800a62c:	2c62b03a 	or	r17,r5,r17
 800a630:	8822c03a 	cmpne	r17,r17,zero
 800a634:	0007883a 	mov	r3,zero
 800a638:	003f9506 	br	800a490 <__alt_data_end+0xfc00a490>
 800a63c:	1021883a 	mov	r16,r2
 800a640:	000b883a 	mov	r5,zero
 800a644:	0023883a 	mov	r17,zero
 800a648:	003edb06 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a64c:	01c1ffc4 	movi	r7,2047
 800a650:	11c03b26 	beq	r2,r7,800a740 <__adddf3+0x784>
 800a654:	0109c83a 	sub	r4,zero,r4
 800a658:	29402034 	orhi	r5,r5,128
 800a65c:	01c00e04 	movi	r7,56
 800a660:	39006216 	blt	r7,r4,800a7ec <__adddf3+0x830>
 800a664:	01c007c4 	movi	r7,31
 800a668:	39006b16 	blt	r7,r4,800a818 <__adddf3+0x85c>
 800a66c:	01c00804 	movi	r7,32
 800a670:	390fc83a 	sub	r7,r7,r4
 800a674:	29d4983a 	sll	r10,r5,r7
 800a678:	8912d83a 	srl	r9,r17,r4
 800a67c:	89ce983a 	sll	r7,r17,r7
 800a680:	2908d83a 	srl	r4,r5,r4
 800a684:	5262b03a 	or	r17,r10,r9
 800a688:	380ac03a 	cmpne	r5,r7,zero
 800a68c:	8962b03a 	or	r17,r17,r5
 800a690:	89a3883a 	add	r17,r17,r6
 800a694:	2211883a 	add	r8,r4,r8
 800a698:	898d803a 	cmpltu	r6,r17,r6
 800a69c:	418b883a 	add	r5,r8,r6
 800a6a0:	1021883a 	mov	r16,r2
 800a6a4:	003ee706 	br	800a244 <__alt_data_end+0xfc00a244>
 800a6a8:	4184b03a 	or	r2,r8,r6
 800a6ac:	103e6226 	beq	r2,zero,800a038 <__alt_data_end+0xfc00a038>
 800a6b0:	8987c83a 	sub	r3,r17,r6
 800a6b4:	88c9803a 	cmpltu	r4,r17,r3
 800a6b8:	2a05c83a 	sub	r2,r5,r8
 800a6bc:	1105c83a 	sub	r2,r2,r4
 800a6c0:	1100202c 	andhi	r4,r2,128
 800a6c4:	203f0426 	beq	r4,zero,800a2d8 <__alt_data_end+0xfc00a2d8>
 800a6c8:	3463c83a 	sub	r17,r6,r17
 800a6cc:	414bc83a 	sub	r5,r8,r5
 800a6d0:	344d803a 	cmpltu	r6,r6,r17
 800a6d4:	298bc83a 	sub	r5,r5,r6
 800a6d8:	3825883a 	mov	r18,r7
 800a6dc:	003e5606 	br	800a038 <__alt_data_end+0xfc00a038>
 800a6e0:	4184b03a 	or	r2,r8,r6
 800a6e4:	10002b26 	beq	r2,zero,800a794 <__adddf3+0x7d8>
 800a6e8:	2804d0fa 	srli	r2,r5,3
 800a6ec:	8822d0fa 	srli	r17,r17,3
 800a6f0:	280a977a 	slli	r5,r5,29
 800a6f4:	10c0022c 	andhi	r3,r2,8
 800a6f8:	2c62b03a 	or	r17,r5,r17
 800a6fc:	18000826 	beq	r3,zero,800a720 <__adddf3+0x764>
 800a700:	4008d0fa 	srli	r4,r8,3
 800a704:	20c0022c 	andhi	r3,r4,8
 800a708:	1800051e 	bne	r3,zero,800a720 <__adddf3+0x764>
 800a70c:	300cd0fa 	srli	r6,r6,3
 800a710:	4010977a 	slli	r8,r8,29
 800a714:	2005883a 	mov	r2,r4
 800a718:	3825883a 	mov	r18,r7
 800a71c:	41a2b03a 	or	r17,r8,r6
 800a720:	880ad77a 	srli	r5,r17,29
 800a724:	100490fa 	slli	r2,r2,3
 800a728:	882290fa 	slli	r17,r17,3
 800a72c:	0401ffc4 	movi	r16,2047
 800a730:	288ab03a 	or	r5,r5,r2
 800a734:	003e4006 	br	800a038 <__alt_data_end+0xfc00a038>
 800a738:	01c1ffc4 	movi	r7,2047
 800a73c:	11ffc71e 	bne	r2,r7,800a65c <__alt_data_end+0xfc00a65c>
 800a740:	400b883a 	mov	r5,r8
 800a744:	3023883a 	mov	r17,r6
 800a748:	1021883a 	mov	r16,r2
 800a74c:	003e3a06 	br	800a038 <__alt_data_end+0xfc00a038>
 800a750:	10002d26 	beq	r2,zero,800a808 <__adddf3+0x84c>
 800a754:	4184b03a 	or	r2,r8,r6
 800a758:	10000e26 	beq	r2,zero,800a794 <__adddf3+0x7d8>
 800a75c:	2804d0fa 	srli	r2,r5,3
 800a760:	8822d0fa 	srli	r17,r17,3
 800a764:	280a977a 	slli	r5,r5,29
 800a768:	10c0022c 	andhi	r3,r2,8
 800a76c:	2c62b03a 	or	r17,r5,r17
 800a770:	183feb26 	beq	r3,zero,800a720 <__alt_data_end+0xfc00a720>
 800a774:	4008d0fa 	srli	r4,r8,3
 800a778:	20c0022c 	andhi	r3,r4,8
 800a77c:	183fe81e 	bne	r3,zero,800a720 <__alt_data_end+0xfc00a720>
 800a780:	300cd0fa 	srli	r6,r6,3
 800a784:	4010977a 	slli	r8,r8,29
 800a788:	2005883a 	mov	r2,r4
 800a78c:	41a2b03a 	or	r17,r8,r6
 800a790:	003fe306 	br	800a720 <__alt_data_end+0xfc00a720>
 800a794:	0401ffc4 	movi	r16,2047
 800a798:	003e2706 	br	800a038 <__alt_data_end+0xfc00a038>
 800a79c:	0011883a 	mov	r8,zero
 800a7a0:	003f8306 	br	800a5b0 <__alt_data_end+0xfc00a5b0>
 800a7a4:	193ff804 	addi	r4,r3,-32
 800a7a8:	02400804 	movi	r9,32
 800a7ac:	2908d83a 	srl	r4,r5,r4
 800a7b0:	1a402526 	beq	r3,r9,800a848 <__adddf3+0x88c>
 800a7b4:	02401004 	movi	r9,64
 800a7b8:	48c7c83a 	sub	r3,r9,r3
 800a7bc:	28ca983a 	sll	r5,r5,r3
 800a7c0:	2c62b03a 	or	r17,r5,r17
 800a7c4:	8822c03a 	cmpne	r17,r17,zero
 800a7c8:	8922b03a 	or	r17,r17,r4
 800a7cc:	0007883a 	mov	r3,zero
 800a7d0:	003f2f06 	br	800a490 <__alt_data_end+0xfc00a490>
 800a7d4:	01402034 	movhi	r5,128
 800a7d8:	0007883a 	mov	r3,zero
 800a7dc:	297fffc4 	addi	r5,r5,-1
 800a7e0:	047ffe04 	movi	r17,-8
 800a7e4:	0401ffc4 	movi	r16,2047
 800a7e8:	003e7306 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a7ec:	2c62b03a 	or	r17,r5,r17
 800a7f0:	8822c03a 	cmpne	r17,r17,zero
 800a7f4:	0009883a 	mov	r4,zero
 800a7f8:	003fa506 	br	800a690 <__alt_data_end+0xfc00a690>
 800a7fc:	400b883a 	mov	r5,r8
 800a800:	3023883a 	mov	r17,r6
 800a804:	003e0c06 	br	800a038 <__alt_data_end+0xfc00a038>
 800a808:	400b883a 	mov	r5,r8
 800a80c:	3023883a 	mov	r17,r6
 800a810:	0401ffc4 	movi	r16,2047
 800a814:	003e0806 	br	800a038 <__alt_data_end+0xfc00a038>
 800a818:	21fff804 	addi	r7,r4,-32
 800a81c:	02400804 	movi	r9,32
 800a820:	29ced83a 	srl	r7,r5,r7
 800a824:	22400a26 	beq	r4,r9,800a850 <__adddf3+0x894>
 800a828:	02401004 	movi	r9,64
 800a82c:	4909c83a 	sub	r4,r9,r4
 800a830:	290a983a 	sll	r5,r5,r4
 800a834:	2c62b03a 	or	r17,r5,r17
 800a838:	8822c03a 	cmpne	r17,r17,zero
 800a83c:	89e2b03a 	or	r17,r17,r7
 800a840:	0009883a 	mov	r4,zero
 800a844:	003f9206 	br	800a690 <__alt_data_end+0xfc00a690>
 800a848:	000b883a 	mov	r5,zero
 800a84c:	003fdc06 	br	800a7c0 <__alt_data_end+0xfc00a7c0>
 800a850:	000b883a 	mov	r5,zero
 800a854:	003ff706 	br	800a834 <__alt_data_end+0xfc00a834>

0800a858 <__divdf3>:
 800a858:	defff204 	addi	sp,sp,-56
 800a85c:	dd000815 	stw	r20,32(sp)
 800a860:	2828d53a 	srli	r20,r5,20
 800a864:	dd800a15 	stw	r22,40(sp)
 800a868:	282cd7fa 	srli	r22,r5,31
 800a86c:	dc000415 	stw	r16,16(sp)
 800a870:	04000434 	movhi	r16,16
 800a874:	df000c15 	stw	fp,48(sp)
 800a878:	dcc00715 	stw	r19,28(sp)
 800a87c:	dc800615 	stw	r18,24(sp)
 800a880:	dc400515 	stw	r17,20(sp)
 800a884:	843fffc4 	addi	r16,r16,-1
 800a888:	dfc00d15 	stw	ra,52(sp)
 800a88c:	ddc00b15 	stw	r23,44(sp)
 800a890:	dd400915 	stw	r21,36(sp)
 800a894:	a501ffcc 	andi	r20,r20,2047
 800a898:	2025883a 	mov	r18,r4
 800a89c:	2027883a 	mov	r19,r4
 800a8a0:	2c22703a 	and	r17,r5,r16
 800a8a4:	b7003fcc 	andi	fp,r22,255
 800a8a8:	a0005e26 	beq	r20,zero,800aa24 <__divdf3+0x1cc>
 800a8ac:	0081ffc4 	movi	r2,2047
 800a8b0:	a0803526 	beq	r20,r2,800a988 <__divdf3+0x130>
 800a8b4:	8c000434 	orhi	r16,r17,16
 800a8b8:	2004d77a 	srli	r2,r4,29
 800a8bc:	802090fa 	slli	r16,r16,3
 800a8c0:	202690fa 	slli	r19,r4,3
 800a8c4:	a53f0044 	addi	r20,r20,-1023
 800a8c8:	80a2b03a 	or	r17,r16,r2
 800a8cc:	0025883a 	mov	r18,zero
 800a8d0:	0011883a 	mov	r8,zero
 800a8d4:	380ad53a 	srli	r5,r7,20
 800a8d8:	382ed7fa 	srli	r23,r7,31
 800a8dc:	04000434 	movhi	r16,16
 800a8e0:	843fffc4 	addi	r16,r16,-1
 800a8e4:	2941ffcc 	andi	r5,r5,2047
 800a8e8:	302b883a 	mov	r21,r6
 800a8ec:	3c20703a 	and	r16,r7,r16
 800a8f0:	ba403fcc 	andi	r9,r23,255
 800a8f4:	28006726 	beq	r5,zero,800aa94 <__divdf3+0x23c>
 800a8f8:	0081ffc4 	movi	r2,2047
 800a8fc:	28805f26 	beq	r5,r2,800aa7c <__divdf3+0x224>
 800a900:	84000434 	orhi	r16,r16,16
 800a904:	3004d77a 	srli	r2,r6,29
 800a908:	802090fa 	slli	r16,r16,3
 800a90c:	302a90fa 	slli	r21,r6,3
 800a910:	297f0044 	addi	r5,r5,-1023
 800a914:	80a0b03a 	or	r16,r16,r2
 800a918:	000f883a 	mov	r7,zero
 800a91c:	3c86b03a 	or	r3,r7,r18
 800a920:	180690ba 	slli	r3,r3,2
 800a924:	00820074 	movhi	r2,2049
 800a928:	10aa5204 	addi	r2,r2,-22200
 800a92c:	1887883a 	add	r3,r3,r2
 800a930:	18c00017 	ldw	r3,0(r3)
 800a934:	b5c8f03a 	xor	r4,r22,r23
 800a938:	200d883a 	mov	r6,r4
 800a93c:	24803fcc 	andi	r18,r4,255
 800a940:	a169c83a 	sub	r20,r20,r5
 800a944:	1800683a 	jmp	r3
 800a948:	0800ab90 	cmplti	zero,at,686
 800a94c:	0800a9c0 	call	800a9c <__reset-0x77ff564>
 800a950:	0800ab54 	ori	zero,at,685
 800a954:	0800a9a4 	muli	zero,at,678
 800a958:	0800ab54 	ori	zero,at,685
 800a95c:	0800ab28 	cmpgeui	zero,at,684
 800a960:	0800ab54 	ori	zero,at,685
 800a964:	0800a9a4 	muli	zero,at,678
 800a968:	0800a9c0 	call	800a9c <__reset-0x77ff564>
 800a96c:	0800a9c0 	call	800a9c <__reset-0x77ff564>
 800a970:	0800ab28 	cmpgeui	zero,at,684
 800a974:	0800a9a4 	muli	zero,at,678
 800a978:	0800a9b4 	orhi	zero,at,678
 800a97c:	0800a9b4 	orhi	zero,at,678
 800a980:	0800a9b4 	orhi	zero,at,678
 800a984:	0800ab64 	muli	zero,at,685
 800a988:	8904b03a 	or	r2,r17,r4
 800a98c:	1000631e 	bne	r2,zero,800ab1c <__divdf3+0x2c4>
 800a990:	04800204 	movi	r18,8
 800a994:	0023883a 	mov	r17,zero
 800a998:	0027883a 	mov	r19,zero
 800a99c:	02000084 	movi	r8,2
 800a9a0:	003fcc06 	br	800a8d4 <__alt_data_end+0xfc00a8d4>
 800a9a4:	8023883a 	mov	r17,r16
 800a9a8:	a827883a 	mov	r19,r21
 800a9ac:	4839883a 	mov	fp,r9
 800a9b0:	3811883a 	mov	r8,r7
 800a9b4:	00800084 	movi	r2,2
 800a9b8:	40812a1e 	bne	r8,r2,800ae64 <__divdf3+0x60c>
 800a9bc:	e025883a 	mov	r18,fp
 800a9c0:	9180004c 	andi	r6,r18,1
 800a9c4:	0101ffc4 	movi	r4,2047
 800a9c8:	000b883a 	mov	r5,zero
 800a9cc:	0027883a 	mov	r19,zero
 800a9d0:	2008953a 	slli	r4,r4,20
 800a9d4:	30c03fcc 	andi	r3,r6,255
 800a9d8:	04000434 	movhi	r16,16
 800a9dc:	180697fa 	slli	r3,r3,31
 800a9e0:	843fffc4 	addi	r16,r16,-1
 800a9e4:	2c20703a 	and	r16,r5,r16
 800a9e8:	8120b03a 	or	r16,r16,r4
 800a9ec:	80c6b03a 	or	r3,r16,r3
 800a9f0:	9805883a 	mov	r2,r19
 800a9f4:	dfc00d17 	ldw	ra,52(sp)
 800a9f8:	df000c17 	ldw	fp,48(sp)
 800a9fc:	ddc00b17 	ldw	r23,44(sp)
 800aa00:	dd800a17 	ldw	r22,40(sp)
 800aa04:	dd400917 	ldw	r21,36(sp)
 800aa08:	dd000817 	ldw	r20,32(sp)
 800aa0c:	dcc00717 	ldw	r19,28(sp)
 800aa10:	dc800617 	ldw	r18,24(sp)
 800aa14:	dc400517 	ldw	r17,20(sp)
 800aa18:	dc000417 	ldw	r16,16(sp)
 800aa1c:	dec00e04 	addi	sp,sp,56
 800aa20:	f800283a 	ret
 800aa24:	8904b03a 	or	r2,r17,r4
 800aa28:	10003726 	beq	r2,zero,800ab08 <__divdf3+0x2b0>
 800aa2c:	88011c26 	beq	r17,zero,800aea0 <__divdf3+0x648>
 800aa30:	8809883a 	mov	r4,r17
 800aa34:	d9800315 	stw	r6,12(sp)
 800aa38:	d9c00115 	stw	r7,4(sp)
 800aa3c:	800c5580 	call	800c558 <__clzsi2>
 800aa40:	d9800317 	ldw	r6,12(sp)
 800aa44:	d9c00117 	ldw	r7,4(sp)
 800aa48:	1007883a 	mov	r3,r2
 800aa4c:	01000a04 	movi	r4,40
 800aa50:	1cfffe04 	addi	r19,r3,-8
 800aa54:	20c9c83a 	sub	r4,r4,r3
 800aa58:	8cca983a 	sll	r5,r17,r19
 800aa5c:	9108d83a 	srl	r4,r18,r4
 800aa60:	94e6983a 	sll	r19,r18,r19
 800aa64:	2162b03a 	or	r17,r4,r5
 800aa68:	053f0344 	movi	r20,-1011
 800aa6c:	a0e9c83a 	sub	r20,r20,r3
 800aa70:	0025883a 	mov	r18,zero
 800aa74:	0011883a 	mov	r8,zero
 800aa78:	003f9606 	br	800a8d4 <__alt_data_end+0xfc00a8d4>
 800aa7c:	8184b03a 	or	r2,r16,r6
 800aa80:	10001f1e 	bne	r2,zero,800ab00 <__divdf3+0x2a8>
 800aa84:	0021883a 	mov	r16,zero
 800aa88:	002b883a 	mov	r21,zero
 800aa8c:	01c00084 	movi	r7,2
 800aa90:	003fa206 	br	800a91c <__alt_data_end+0xfc00a91c>
 800aa94:	8184b03a 	or	r2,r16,r6
 800aa98:	10001526 	beq	r2,zero,800aaf0 <__divdf3+0x298>
 800aa9c:	80010c26 	beq	r16,zero,800aed0 <__divdf3+0x678>
 800aaa0:	8009883a 	mov	r4,r16
 800aaa4:	d9800315 	stw	r6,12(sp)
 800aaa8:	da000215 	stw	r8,8(sp)
 800aaac:	da400015 	stw	r9,0(sp)
 800aab0:	800c5580 	call	800c558 <__clzsi2>
 800aab4:	d9800317 	ldw	r6,12(sp)
 800aab8:	da000217 	ldw	r8,8(sp)
 800aabc:	da400017 	ldw	r9,0(sp)
 800aac0:	1007883a 	mov	r3,r2
 800aac4:	01000a04 	movi	r4,40
 800aac8:	1d7ffe04 	addi	r21,r3,-8
 800aacc:	20c9c83a 	sub	r4,r4,r3
 800aad0:	8560983a 	sll	r16,r16,r21
 800aad4:	3108d83a 	srl	r4,r6,r4
 800aad8:	356a983a 	sll	r21,r6,r21
 800aadc:	2420b03a 	or	r16,r4,r16
 800aae0:	017f0344 	movi	r5,-1011
 800aae4:	28cbc83a 	sub	r5,r5,r3
 800aae8:	000f883a 	mov	r7,zero
 800aaec:	003f8b06 	br	800a91c <__alt_data_end+0xfc00a91c>
 800aaf0:	0021883a 	mov	r16,zero
 800aaf4:	002b883a 	mov	r21,zero
 800aaf8:	01c00044 	movi	r7,1
 800aafc:	003f8706 	br	800a91c <__alt_data_end+0xfc00a91c>
 800ab00:	01c000c4 	movi	r7,3
 800ab04:	003f8506 	br	800a91c <__alt_data_end+0xfc00a91c>
 800ab08:	04800104 	movi	r18,4
 800ab0c:	0023883a 	mov	r17,zero
 800ab10:	0027883a 	mov	r19,zero
 800ab14:	02000044 	movi	r8,1
 800ab18:	003f6e06 	br	800a8d4 <__alt_data_end+0xfc00a8d4>
 800ab1c:	04800304 	movi	r18,12
 800ab20:	020000c4 	movi	r8,3
 800ab24:	003f6b06 	br	800a8d4 <__alt_data_end+0xfc00a8d4>
 800ab28:	01400434 	movhi	r5,16
 800ab2c:	000d883a 	mov	r6,zero
 800ab30:	297fffc4 	addi	r5,r5,-1
 800ab34:	04ffffc4 	movi	r19,-1
 800ab38:	0101ffc4 	movi	r4,2047
 800ab3c:	003fa406 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800ab40:	043f0084 	movi	r16,-1022
 800ab44:	8521c83a 	sub	r16,r16,r20
 800ab48:	00800e04 	movi	r2,56
 800ab4c:	1401200e 	bge	r2,r16,800afd0 <__divdf3+0x778>
 800ab50:	9180004c 	andi	r6,r18,1
 800ab54:	0009883a 	mov	r4,zero
 800ab58:	000b883a 	mov	r5,zero
 800ab5c:	0027883a 	mov	r19,zero
 800ab60:	003f9b06 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800ab64:	8880022c 	andhi	r2,r17,8
 800ab68:	1000c726 	beq	r2,zero,800ae88 <__divdf3+0x630>
 800ab6c:	8080022c 	andhi	r2,r16,8
 800ab70:	1000c51e 	bne	r2,zero,800ae88 <__divdf3+0x630>
 800ab74:	00800434 	movhi	r2,16
 800ab78:	81400234 	orhi	r5,r16,8
 800ab7c:	10bfffc4 	addi	r2,r2,-1
 800ab80:	b80d883a 	mov	r6,r23
 800ab84:	288a703a 	and	r5,r5,r2
 800ab88:	a827883a 	mov	r19,r21
 800ab8c:	003fea06 	br	800ab38 <__alt_data_end+0xfc00ab38>
 800ab90:	8440ea36 	bltu	r16,r17,800af3c <__divdf3+0x6e4>
 800ab94:	8c00e826 	beq	r17,r16,800af38 <__divdf3+0x6e0>
 800ab98:	a53fffc4 	addi	r20,r20,-1
 800ab9c:	882d883a 	mov	r22,r17
 800aba0:	000d883a 	mov	r6,zero
 800aba4:	a804d63a 	srli	r2,r21,24
 800aba8:	8020923a 	slli	r16,r16,8
 800abac:	b009883a 	mov	r4,r22
 800abb0:	d9800315 	stw	r6,12(sp)
 800abb4:	1420b03a 	or	r16,r2,r16
 800abb8:	802ed43a 	srli	r23,r16,16
 800abbc:	873fffcc 	andi	fp,r16,65535
 800abc0:	a82a923a 	slli	r21,r21,8
 800abc4:	b80b883a 	mov	r5,r23
 800abc8:	8009fac0 	call	8009fac <__udivsi3>
 800abcc:	b009883a 	mov	r4,r22
 800abd0:	b80b883a 	mov	r5,r23
 800abd4:	1023883a 	mov	r17,r2
 800abd8:	8009fb40 	call	8009fb4 <__umodsi3>
 800abdc:	1004943a 	slli	r2,r2,16
 800abe0:	9808d43a 	srli	r4,r19,16
 800abe4:	8f2d383a 	mul	r22,r17,fp
 800abe8:	d9800317 	ldw	r6,12(sp)
 800abec:	1106b03a 	or	r3,r2,r4
 800abf0:	1d80062e 	bgeu	r3,r22,800ac0c <__divdf3+0x3b4>
 800abf4:	1c07883a 	add	r3,r3,r16
 800abf8:	88bfffc4 	addi	r2,r17,-1
 800abfc:	1c00dc36 	bltu	r3,r16,800af70 <__divdf3+0x718>
 800ac00:	1d80db2e 	bgeu	r3,r22,800af70 <__divdf3+0x718>
 800ac04:	8c7fff84 	addi	r17,r17,-2
 800ac08:	1c07883a 	add	r3,r3,r16
 800ac0c:	1dadc83a 	sub	r22,r3,r22
 800ac10:	b009883a 	mov	r4,r22
 800ac14:	b80b883a 	mov	r5,r23
 800ac18:	d9800315 	stw	r6,12(sp)
 800ac1c:	8009fac0 	call	8009fac <__udivsi3>
 800ac20:	b009883a 	mov	r4,r22
 800ac24:	b80b883a 	mov	r5,r23
 800ac28:	d8800015 	stw	r2,0(sp)
 800ac2c:	8009fb40 	call	8009fb4 <__umodsi3>
 800ac30:	da400017 	ldw	r9,0(sp)
 800ac34:	1004943a 	slli	r2,r2,16
 800ac38:	9cffffcc 	andi	r19,r19,65535
 800ac3c:	4f07383a 	mul	r3,r9,fp
 800ac40:	14c8b03a 	or	r4,r2,r19
 800ac44:	d9800317 	ldw	r6,12(sp)
 800ac48:	20c0062e 	bgeu	r4,r3,800ac64 <__divdf3+0x40c>
 800ac4c:	2409883a 	add	r4,r4,r16
 800ac50:	48bfffc4 	addi	r2,r9,-1
 800ac54:	2400c436 	bltu	r4,r16,800af68 <__divdf3+0x710>
 800ac58:	20c0c32e 	bgeu	r4,r3,800af68 <__divdf3+0x710>
 800ac5c:	4a7fff84 	addi	r9,r9,-2
 800ac60:	2409883a 	add	r4,r4,r16
 800ac64:	8822943a 	slli	r17,r17,16
 800ac68:	a80ed43a 	srli	r7,r21,16
 800ac6c:	aa3fffcc 	andi	r8,r21,65535
 800ac70:	4c62b03a 	or	r17,r9,r17
 800ac74:	8816d43a 	srli	r11,r17,16
 800ac78:	897fffcc 	andi	r5,r17,65535
 800ac7c:	2a15383a 	mul	r10,r5,r8
 800ac80:	5a19383a 	mul	r12,r11,r8
 800ac84:	29cb383a 	mul	r5,r5,r7
 800ac88:	5012d43a 	srli	r9,r10,16
 800ac8c:	20c5c83a 	sub	r2,r4,r3
 800ac90:	614b883a 	add	r5,r12,r5
 800ac94:	2a4b883a 	add	r5,r5,r9
 800ac98:	59c7383a 	mul	r3,r11,r7
 800ac9c:	2b00022e 	bgeu	r5,r12,800aca8 <__divdf3+0x450>
 800aca0:	01000074 	movhi	r4,1
 800aca4:	1907883a 	add	r3,r3,r4
 800aca8:	2808d43a 	srli	r4,r5,16
 800acac:	280a943a 	slli	r5,r5,16
 800acb0:	54ffffcc 	andi	r19,r10,65535
 800acb4:	1907883a 	add	r3,r3,r4
 800acb8:	2ccb883a 	add	r5,r5,r19
 800acbc:	10c09336 	bltu	r2,r3,800af0c <__divdf3+0x6b4>
 800acc0:	10c0ad26 	beq	r2,r3,800af78 <__divdf3+0x720>
 800acc4:	10c7c83a 	sub	r3,r2,r3
 800acc8:	3167c83a 	sub	r19,r6,r5
 800accc:	34ed803a 	cmpltu	r22,r6,r19
 800acd0:	1dadc83a 	sub	r22,r3,r22
 800acd4:	b400b226 	beq	r22,r16,800afa0 <__divdf3+0x748>
 800acd8:	b009883a 	mov	r4,r22
 800acdc:	b80b883a 	mov	r5,r23
 800ace0:	d9c00115 	stw	r7,4(sp)
 800ace4:	da000215 	stw	r8,8(sp)
 800ace8:	8009fac0 	call	8009fac <__udivsi3>
 800acec:	b009883a 	mov	r4,r22
 800acf0:	b80b883a 	mov	r5,r23
 800acf4:	d8800315 	stw	r2,12(sp)
 800acf8:	8009fb40 	call	8009fb4 <__umodsi3>
 800acfc:	d9800317 	ldw	r6,12(sp)
 800ad00:	1004943a 	slli	r2,r2,16
 800ad04:	9808d43a 	srli	r4,r19,16
 800ad08:	372d383a 	mul	r22,r6,fp
 800ad0c:	d9c00117 	ldw	r7,4(sp)
 800ad10:	1106b03a 	or	r3,r2,r4
 800ad14:	da000217 	ldw	r8,8(sp)
 800ad18:	1d80062e 	bgeu	r3,r22,800ad34 <__divdf3+0x4dc>
 800ad1c:	1c07883a 	add	r3,r3,r16
 800ad20:	30bfffc4 	addi	r2,r6,-1
 800ad24:	1c00a036 	bltu	r3,r16,800afa8 <__divdf3+0x750>
 800ad28:	1d809f2e 	bgeu	r3,r22,800afa8 <__divdf3+0x750>
 800ad2c:	31bfff84 	addi	r6,r6,-2
 800ad30:	1c07883a 	add	r3,r3,r16
 800ad34:	1dadc83a 	sub	r22,r3,r22
 800ad38:	b009883a 	mov	r4,r22
 800ad3c:	b80b883a 	mov	r5,r23
 800ad40:	d9800315 	stw	r6,12(sp)
 800ad44:	d9c00115 	stw	r7,4(sp)
 800ad48:	da000215 	stw	r8,8(sp)
 800ad4c:	8009fac0 	call	8009fac <__udivsi3>
 800ad50:	b009883a 	mov	r4,r22
 800ad54:	b80b883a 	mov	r5,r23
 800ad58:	d8800015 	stw	r2,0(sp)
 800ad5c:	8009fb40 	call	8009fb4 <__umodsi3>
 800ad60:	da400017 	ldw	r9,0(sp)
 800ad64:	1004943a 	slli	r2,r2,16
 800ad68:	993fffcc 	andi	r4,r19,65535
 800ad6c:	4f39383a 	mul	fp,r9,fp
 800ad70:	1106b03a 	or	r3,r2,r4
 800ad74:	d9800317 	ldw	r6,12(sp)
 800ad78:	d9c00117 	ldw	r7,4(sp)
 800ad7c:	da000217 	ldw	r8,8(sp)
 800ad80:	1f00062e 	bgeu	r3,fp,800ad9c <__divdf3+0x544>
 800ad84:	1c07883a 	add	r3,r3,r16
 800ad88:	48bfffc4 	addi	r2,r9,-1
 800ad8c:	1c008836 	bltu	r3,r16,800afb0 <__divdf3+0x758>
 800ad90:	1f00872e 	bgeu	r3,fp,800afb0 <__divdf3+0x758>
 800ad94:	4a7fff84 	addi	r9,r9,-2
 800ad98:	1c07883a 	add	r3,r3,r16
 800ad9c:	3008943a 	slli	r4,r6,16
 800ada0:	1f07c83a 	sub	r3,r3,fp
 800ada4:	4926b03a 	or	r19,r9,r4
 800ada8:	993fffcc 	andi	r4,r19,65535
 800adac:	980cd43a 	srli	r6,r19,16
 800adb0:	220b383a 	mul	r5,r4,r8
 800adb4:	21c5383a 	mul	r2,r4,r7
 800adb8:	3211383a 	mul	r8,r6,r8
 800adbc:	2808d43a 	srli	r4,r5,16
 800adc0:	31cf383a 	mul	r7,r6,r7
 800adc4:	4085883a 	add	r2,r8,r2
 800adc8:	1105883a 	add	r2,r2,r4
 800adcc:	1200022e 	bgeu	r2,r8,800add8 <__divdf3+0x580>
 800add0:	01000074 	movhi	r4,1
 800add4:	390f883a 	add	r7,r7,r4
 800add8:	1008d43a 	srli	r4,r2,16
 800addc:	1004943a 	slli	r2,r2,16
 800ade0:	297fffcc 	andi	r5,r5,65535
 800ade4:	390f883a 	add	r7,r7,r4
 800ade8:	1145883a 	add	r2,r2,r5
 800adec:	19c06536 	bltu	r3,r7,800af84 <__divdf3+0x72c>
 800adf0:	19c09f26 	beq	r3,r7,800b070 <__divdf3+0x818>
 800adf4:	9cc00054 	ori	r19,r19,1
 800adf8:	a100ffc4 	addi	r4,r20,1023
 800adfc:	013f500e 	bge	zero,r4,800ab40 <__alt_data_end+0xfc00ab40>
 800ae00:	988001cc 	andi	r2,r19,7
 800ae04:	10000726 	beq	r2,zero,800ae24 <__divdf3+0x5cc>
 800ae08:	98c003cc 	andi	r3,r19,15
 800ae0c:	00800104 	movi	r2,4
 800ae10:	18800426 	beq	r3,r2,800ae24 <__divdf3+0x5cc>
 800ae14:	9885883a 	add	r2,r19,r2
 800ae18:	14e1803a 	cmpltu	r16,r2,r19
 800ae1c:	8c23883a 	add	r17,r17,r16
 800ae20:	1027883a 	mov	r19,r2
 800ae24:	8880402c 	andhi	r2,r17,256
 800ae28:	10000426 	beq	r2,zero,800ae3c <__divdf3+0x5e4>
 800ae2c:	00bfc034 	movhi	r2,65280
 800ae30:	10bfffc4 	addi	r2,r2,-1
 800ae34:	a1010004 	addi	r4,r20,1024
 800ae38:	88a2703a 	and	r17,r17,r2
 800ae3c:	0081ff84 	movi	r2,2046
 800ae40:	113edf16 	blt	r2,r4,800a9c0 <__alt_data_end+0xfc00a9c0>
 800ae44:	9826d0fa 	srli	r19,r19,3
 800ae48:	8804977a 	slli	r2,r17,29
 800ae4c:	8820927a 	slli	r16,r17,9
 800ae50:	2101ffcc 	andi	r4,r4,2047
 800ae54:	14e6b03a 	or	r19,r2,r19
 800ae58:	800ad33a 	srli	r5,r16,12
 800ae5c:	9180004c 	andi	r6,r18,1
 800ae60:	003edb06 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800ae64:	008000c4 	movi	r2,3
 800ae68:	4080a826 	beq	r8,r2,800b10c <__divdf3+0x8b4>
 800ae6c:	00800044 	movi	r2,1
 800ae70:	4080551e 	bne	r8,r2,800afc8 <__divdf3+0x770>
 800ae74:	e00d883a 	mov	r6,fp
 800ae78:	0009883a 	mov	r4,zero
 800ae7c:	000b883a 	mov	r5,zero
 800ae80:	0027883a 	mov	r19,zero
 800ae84:	003ed206 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800ae88:	00800434 	movhi	r2,16
 800ae8c:	89400234 	orhi	r5,r17,8
 800ae90:	10bfffc4 	addi	r2,r2,-1
 800ae94:	b00d883a 	mov	r6,r22
 800ae98:	288a703a 	and	r5,r5,r2
 800ae9c:	003f2606 	br	800ab38 <__alt_data_end+0xfc00ab38>
 800aea0:	d9800315 	stw	r6,12(sp)
 800aea4:	d9c00115 	stw	r7,4(sp)
 800aea8:	800c5580 	call	800c558 <__clzsi2>
 800aeac:	10c00804 	addi	r3,r2,32
 800aeb0:	010009c4 	movi	r4,39
 800aeb4:	d9800317 	ldw	r6,12(sp)
 800aeb8:	d9c00117 	ldw	r7,4(sp)
 800aebc:	20fee30e 	bge	r4,r3,800aa4c <__alt_data_end+0xfc00aa4c>
 800aec0:	117ffe04 	addi	r5,r2,-8
 800aec4:	9162983a 	sll	r17,r18,r5
 800aec8:	0027883a 	mov	r19,zero
 800aecc:	003ee606 	br	800aa68 <__alt_data_end+0xfc00aa68>
 800aed0:	3009883a 	mov	r4,r6
 800aed4:	d9800315 	stw	r6,12(sp)
 800aed8:	da000215 	stw	r8,8(sp)
 800aedc:	da400015 	stw	r9,0(sp)
 800aee0:	800c5580 	call	800c558 <__clzsi2>
 800aee4:	10c00804 	addi	r3,r2,32
 800aee8:	010009c4 	movi	r4,39
 800aeec:	d9800317 	ldw	r6,12(sp)
 800aef0:	da000217 	ldw	r8,8(sp)
 800aef4:	da400017 	ldw	r9,0(sp)
 800aef8:	20fef20e 	bge	r4,r3,800aac4 <__alt_data_end+0xfc00aac4>
 800aefc:	10bffe04 	addi	r2,r2,-8
 800af00:	a8a0983a 	sll	r16,r21,r2
 800af04:	002b883a 	mov	r21,zero
 800af08:	003ef506 	br	800aae0 <__alt_data_end+0xfc00aae0>
 800af0c:	354d883a 	add	r6,r6,r21
 800af10:	3549803a 	cmpltu	r4,r6,r21
 800af14:	2409883a 	add	r4,r4,r16
 800af18:	2089883a 	add	r4,r4,r2
 800af1c:	88bfffc4 	addi	r2,r17,-1
 800af20:	81000c2e 	bgeu	r16,r4,800af54 <__divdf3+0x6fc>
 800af24:	20c04436 	bltu	r4,r3,800b038 <__divdf3+0x7e0>
 800af28:	19006f26 	beq	r3,r4,800b0e8 <__divdf3+0x890>
 800af2c:	20c7c83a 	sub	r3,r4,r3
 800af30:	1023883a 	mov	r17,r2
 800af34:	003f6406 	br	800acc8 <__alt_data_end+0xfc00acc8>
 800af38:	9d7f1736 	bltu	r19,r21,800ab98 <__alt_data_end+0xfc00ab98>
 800af3c:	9806d07a 	srli	r3,r19,1
 800af40:	880497fa 	slli	r2,r17,31
 800af44:	980c97fa 	slli	r6,r19,31
 800af48:	882cd07a 	srli	r22,r17,1
 800af4c:	18a6b03a 	or	r19,r3,r2
 800af50:	003f1406 	br	800aba4 <__alt_data_end+0xfc00aba4>
 800af54:	243ff51e 	bne	r4,r16,800af2c <__alt_data_end+0xfc00af2c>
 800af58:	357ff22e 	bgeu	r6,r21,800af24 <__alt_data_end+0xfc00af24>
 800af5c:	80c7c83a 	sub	r3,r16,r3
 800af60:	1023883a 	mov	r17,r2
 800af64:	003f5806 	br	800acc8 <__alt_data_end+0xfc00acc8>
 800af68:	1013883a 	mov	r9,r2
 800af6c:	003f3d06 	br	800ac64 <__alt_data_end+0xfc00ac64>
 800af70:	1023883a 	mov	r17,r2
 800af74:	003f2506 	br	800ac0c <__alt_data_end+0xfc00ac0c>
 800af78:	317fe436 	bltu	r6,r5,800af0c <__alt_data_end+0xfc00af0c>
 800af7c:	0007883a 	mov	r3,zero
 800af80:	003f5106 	br	800acc8 <__alt_data_end+0xfc00acc8>
 800af84:	1c07883a 	add	r3,r3,r16
 800af88:	993fffc4 	addi	r4,r19,-1
 800af8c:	1c000a2e 	bgeu	r3,r16,800afb8 <__divdf3+0x760>
 800af90:	2027883a 	mov	r19,r4
 800af94:	19ff971e 	bne	r3,r7,800adf4 <__alt_data_end+0xfc00adf4>
 800af98:	a8bf961e 	bne	r21,r2,800adf4 <__alt_data_end+0xfc00adf4>
 800af9c:	003f9606 	br	800adf8 <__alt_data_end+0xfc00adf8>
 800afa0:	04ffffc4 	movi	r19,-1
 800afa4:	003f9406 	br	800adf8 <__alt_data_end+0xfc00adf8>
 800afa8:	100d883a 	mov	r6,r2
 800afac:	003f6106 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800afb0:	1013883a 	mov	r9,r2
 800afb4:	003f7906 	br	800ad9c <__alt_data_end+0xfc00ad9c>
 800afb8:	19c02636 	bltu	r3,r7,800b054 <__divdf3+0x7fc>
 800afbc:	38c04d26 	beq	r7,r3,800b0f4 <__divdf3+0x89c>
 800afc0:	2027883a 	mov	r19,r4
 800afc4:	003f8b06 	br	800adf4 <__alt_data_end+0xfc00adf4>
 800afc8:	e025883a 	mov	r18,fp
 800afcc:	003f8a06 	br	800adf8 <__alt_data_end+0xfc00adf8>
 800afd0:	008007c4 	movi	r2,31
 800afd4:	14002a16 	blt	r2,r16,800b080 <__divdf3+0x828>
 800afd8:	a5010784 	addi	r20,r20,1054
 800afdc:	8d04983a 	sll	r2,r17,r20
 800afe0:	9c06d83a 	srl	r3,r19,r16
 800afe4:	9d28983a 	sll	r20,r19,r20
 800afe8:	8c20d83a 	srl	r16,r17,r16
 800afec:	1886b03a 	or	r3,r3,r2
 800aff0:	a004c03a 	cmpne	r2,r20,zero
 800aff4:	1884b03a 	or	r2,r3,r2
 800aff8:	10c001cc 	andi	r3,r2,7
 800affc:	18000726 	beq	r3,zero,800b01c <__divdf3+0x7c4>
 800b000:	110003cc 	andi	r4,r2,15
 800b004:	00c00104 	movi	r3,4
 800b008:	20c00426 	beq	r4,r3,800b01c <__divdf3+0x7c4>
 800b00c:	10c00104 	addi	r3,r2,4
 800b010:	1885803a 	cmpltu	r2,r3,r2
 800b014:	80a1883a 	add	r16,r16,r2
 800b018:	1805883a 	mov	r2,r3
 800b01c:	80c0202c 	andhi	r3,r16,128
 800b020:	18002d26 	beq	r3,zero,800b0d8 <__divdf3+0x880>
 800b024:	9180004c 	andi	r6,r18,1
 800b028:	01000044 	movi	r4,1
 800b02c:	000b883a 	mov	r5,zero
 800b030:	0027883a 	mov	r19,zero
 800b034:	003e6606 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800b038:	354d883a 	add	r6,r6,r21
 800b03c:	356d803a 	cmpltu	r22,r6,r21
 800b040:	b42d883a 	add	r22,r22,r16
 800b044:	b12d883a 	add	r22,r22,r4
 800b048:	8c7fff84 	addi	r17,r17,-2
 800b04c:	b0c7c83a 	sub	r3,r22,r3
 800b050:	003f1d06 	br	800acc8 <__alt_data_end+0xfc00acc8>
 800b054:	ad4b883a 	add	r5,r21,r21
 800b058:	2d6b803a 	cmpltu	r21,r5,r21
 800b05c:	ac2b883a 	add	r21,r21,r16
 800b060:	1d47883a 	add	r3,r3,r21
 800b064:	993fff84 	addi	r4,r19,-2
 800b068:	282b883a 	mov	r21,r5
 800b06c:	003fc806 	br	800af90 <__alt_data_end+0xfc00af90>
 800b070:	103fc41e 	bne	r2,zero,800af84 <__alt_data_end+0xfc00af84>
 800b074:	002b883a 	mov	r21,zero
 800b078:	a8bf5e1e 	bne	r21,r2,800adf4 <__alt_data_end+0xfc00adf4>
 800b07c:	003f5e06 	br	800adf8 <__alt_data_end+0xfc00adf8>
 800b080:	00bef884 	movi	r2,-1054
 800b084:	1505c83a 	sub	r2,r2,r20
 800b088:	00c00804 	movi	r3,32
 800b08c:	8884d83a 	srl	r2,r17,r2
 800b090:	80c01c26 	beq	r16,r3,800b104 <__divdf3+0x8ac>
 800b094:	a0c10f84 	addi	r3,r20,1086
 800b098:	88c6983a 	sll	r3,r17,r3
 800b09c:	1cc6b03a 	or	r3,r3,r19
 800b0a0:	1806c03a 	cmpne	r3,r3,zero
 800b0a4:	1884b03a 	or	r2,r3,r2
 800b0a8:	140001cc 	andi	r16,r2,7
 800b0ac:	8000061e 	bne	r16,zero,800b0c8 <__divdf3+0x870>
 800b0b0:	000b883a 	mov	r5,zero
 800b0b4:	1004d0fa 	srli	r2,r2,3
 800b0b8:	9180004c 	andi	r6,r18,1
 800b0bc:	0009883a 	mov	r4,zero
 800b0c0:	1426b03a 	or	r19,r2,r16
 800b0c4:	003e4206 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800b0c8:	110003cc 	andi	r4,r2,15
 800b0cc:	00c00104 	movi	r3,4
 800b0d0:	0021883a 	mov	r16,zero
 800b0d4:	20ffcd1e 	bne	r4,r3,800b00c <__alt_data_end+0xfc00b00c>
 800b0d8:	800a927a 	slli	r5,r16,9
 800b0dc:	8020977a 	slli	r16,r16,29
 800b0e0:	280ad33a 	srli	r5,r5,12
 800b0e4:	003ff306 	br	800b0b4 <__alt_data_end+0xfc00b0b4>
 800b0e8:	317fd336 	bltu	r6,r5,800b038 <__alt_data_end+0xfc00b038>
 800b0ec:	1023883a 	mov	r17,r2
 800b0f0:	003fa206 	br	800af7c <__alt_data_end+0xfc00af7c>
 800b0f4:	a8bfd736 	bltu	r21,r2,800b054 <__alt_data_end+0xfc00b054>
 800b0f8:	2027883a 	mov	r19,r4
 800b0fc:	a8bf3d1e 	bne	r21,r2,800adf4 <__alt_data_end+0xfc00adf4>
 800b100:	003f3d06 	br	800adf8 <__alt_data_end+0xfc00adf8>
 800b104:	0007883a 	mov	r3,zero
 800b108:	003fe406 	br	800b09c <__alt_data_end+0xfc00b09c>
 800b10c:	00800434 	movhi	r2,16
 800b110:	89400234 	orhi	r5,r17,8
 800b114:	10bfffc4 	addi	r2,r2,-1
 800b118:	e00d883a 	mov	r6,fp
 800b11c:	288a703a 	and	r5,r5,r2
 800b120:	003e8506 	br	800ab38 <__alt_data_end+0xfc00ab38>

0800b124 <__eqdf2>:
 800b124:	2804d53a 	srli	r2,r5,20
 800b128:	3806d53a 	srli	r3,r7,20
 800b12c:	02000434 	movhi	r8,16
 800b130:	423fffc4 	addi	r8,r8,-1
 800b134:	1081ffcc 	andi	r2,r2,2047
 800b138:	0241ffc4 	movi	r9,2047
 800b13c:	2a14703a 	and	r10,r5,r8
 800b140:	18c1ffcc 	andi	r3,r3,2047
 800b144:	3a10703a 	and	r8,r7,r8
 800b148:	280ad7fa 	srli	r5,r5,31
 800b14c:	380ed7fa 	srli	r7,r7,31
 800b150:	12400f26 	beq	r2,r9,800b190 <__eqdf2+0x6c>
 800b154:	0241ffc4 	movi	r9,2047
 800b158:	1a400326 	beq	r3,r9,800b168 <__eqdf2+0x44>
 800b15c:	10c00526 	beq	r2,r3,800b174 <__eqdf2+0x50>
 800b160:	00800044 	movi	r2,1
 800b164:	f800283a 	ret
 800b168:	4192b03a 	or	r9,r8,r6
 800b16c:	483ffc1e 	bne	r9,zero,800b160 <__alt_data_end+0xfc00b160>
 800b170:	10fffb1e 	bne	r2,r3,800b160 <__alt_data_end+0xfc00b160>
 800b174:	523ffa1e 	bne	r10,r8,800b160 <__alt_data_end+0xfc00b160>
 800b178:	21bff91e 	bne	r4,r6,800b160 <__alt_data_end+0xfc00b160>
 800b17c:	29c00826 	beq	r5,r7,800b1a0 <__eqdf2+0x7c>
 800b180:	103ff71e 	bne	r2,zero,800b160 <__alt_data_end+0xfc00b160>
 800b184:	5104b03a 	or	r2,r10,r4
 800b188:	1004c03a 	cmpne	r2,r2,zero
 800b18c:	f800283a 	ret
 800b190:	5112b03a 	or	r9,r10,r4
 800b194:	483fef26 	beq	r9,zero,800b154 <__alt_data_end+0xfc00b154>
 800b198:	00800044 	movi	r2,1
 800b19c:	f800283a 	ret
 800b1a0:	0005883a 	mov	r2,zero
 800b1a4:	f800283a 	ret

0800b1a8 <__gedf2>:
 800b1a8:	2804d53a 	srli	r2,r5,20
 800b1ac:	3806d53a 	srli	r3,r7,20
 800b1b0:	02000434 	movhi	r8,16
 800b1b4:	423fffc4 	addi	r8,r8,-1
 800b1b8:	0241ffc4 	movi	r9,2047
 800b1bc:	1081ffcc 	andi	r2,r2,2047
 800b1c0:	2a14703a 	and	r10,r5,r8
 800b1c4:	1a46703a 	and	r3,r3,r9
 800b1c8:	3a10703a 	and	r8,r7,r8
 800b1cc:	280ad7fa 	srli	r5,r5,31
 800b1d0:	380ed7fa 	srli	r7,r7,31
 800b1d4:	12400b26 	beq	r2,r9,800b204 <__gedf2+0x5c>
 800b1d8:	1a401626 	beq	r3,r9,800b234 <__gedf2+0x8c>
 800b1dc:	10000c1e 	bne	r2,zero,800b210 <__gedf2+0x68>
 800b1e0:	5112b03a 	or	r9,r10,r4
 800b1e4:	4813003a 	cmpeq	r9,r9,zero
 800b1e8:	4817883a 	mov	r11,r9
 800b1ec:	18000c1e 	bne	r3,zero,800b220 <__gedf2+0x78>
 800b1f0:	4198b03a 	or	r12,r8,r6
 800b1f4:	60000a1e 	bne	r12,zero,800b220 <__gedf2+0x78>
 800b1f8:	48001326 	beq	r9,zero,800b248 <__gedf2+0xa0>
 800b1fc:	0005883a 	mov	r2,zero
 800b200:	f800283a 	ret
 800b204:	5112b03a 	or	r9,r10,r4
 800b208:	4800191e 	bne	r9,zero,800b270 <__gedf2+0xc8>
 800b20c:	18800926 	beq	r3,r2,800b234 <__gedf2+0x8c>
 800b210:	18000b1e 	bne	r3,zero,800b240 <__gedf2+0x98>
 800b214:	4192b03a 	or	r9,r8,r6
 800b218:	0017883a 	mov	r11,zero
 800b21c:	48000a26 	beq	r9,zero,800b248 <__gedf2+0xa0>
 800b220:	39c03fcc 	andi	r7,r7,255
 800b224:	58000726 	beq	r11,zero,800b244 <__gedf2+0x9c>
 800b228:	3800081e 	bne	r7,zero,800b24c <__gedf2+0xa4>
 800b22c:	00bfffc4 	movi	r2,-1
 800b230:	f800283a 	ret
 800b234:	4192b03a 	or	r9,r8,r6
 800b238:	48000d1e 	bne	r9,zero,800b270 <__gedf2+0xc8>
 800b23c:	103fe826 	beq	r2,zero,800b1e0 <__alt_data_end+0xfc00b1e0>
 800b240:	39c03fcc 	andi	r7,r7,255
 800b244:	29c00326 	beq	r5,r7,800b254 <__gedf2+0xac>
 800b248:	283ff81e 	bne	r5,zero,800b22c <__alt_data_end+0xfc00b22c>
 800b24c:	00800044 	movi	r2,1
 800b250:	f800283a 	ret
 800b254:	18bffc16 	blt	r3,r2,800b248 <__alt_data_end+0xfc00b248>
 800b258:	10c00316 	blt	r2,r3,800b268 <__gedf2+0xc0>
 800b25c:	42bffa36 	bltu	r8,r10,800b248 <__alt_data_end+0xfc00b248>
 800b260:	52000526 	beq	r10,r8,800b278 <__gedf2+0xd0>
 800b264:	523fe52e 	bgeu	r10,r8,800b1fc <__alt_data_end+0xfc00b1fc>
 800b268:	283ff026 	beq	r5,zero,800b22c <__alt_data_end+0xfc00b22c>
 800b26c:	003ff706 	br	800b24c <__alt_data_end+0xfc00b24c>
 800b270:	00bfff84 	movi	r2,-2
 800b274:	f800283a 	ret
 800b278:	313ff336 	bltu	r6,r4,800b248 <__alt_data_end+0xfc00b248>
 800b27c:	21bfdf2e 	bgeu	r4,r6,800b1fc <__alt_data_end+0xfc00b1fc>
 800b280:	283fea26 	beq	r5,zero,800b22c <__alt_data_end+0xfc00b22c>
 800b284:	003ff106 	br	800b24c <__alt_data_end+0xfc00b24c>

0800b288 <__ledf2>:
 800b288:	2804d53a 	srli	r2,r5,20
 800b28c:	3810d53a 	srli	r8,r7,20
 800b290:	00c00434 	movhi	r3,16
 800b294:	18ffffc4 	addi	r3,r3,-1
 800b298:	0241ffc4 	movi	r9,2047
 800b29c:	1081ffcc 	andi	r2,r2,2047
 800b2a0:	28d4703a 	and	r10,r5,r3
 800b2a4:	4250703a 	and	r8,r8,r9
 800b2a8:	38c6703a 	and	r3,r7,r3
 800b2ac:	280ad7fa 	srli	r5,r5,31
 800b2b0:	380ed7fa 	srli	r7,r7,31
 800b2b4:	12400b26 	beq	r2,r9,800b2e4 <__ledf2+0x5c>
 800b2b8:	42401926 	beq	r8,r9,800b320 <__ledf2+0x98>
 800b2bc:	10000c1e 	bne	r2,zero,800b2f0 <__ledf2+0x68>
 800b2c0:	5112b03a 	or	r9,r10,r4
 800b2c4:	4813003a 	cmpeq	r9,r9,zero
 800b2c8:	4817883a 	mov	r11,r9
 800b2cc:	40000f26 	beq	r8,zero,800b30c <__ledf2+0x84>
 800b2d0:	39c03fcc 	andi	r7,r7,255
 800b2d4:	58001826 	beq	r11,zero,800b338 <__ledf2+0xb0>
 800b2d8:	38000a1e 	bne	r7,zero,800b304 <__ledf2+0x7c>
 800b2dc:	00bfffc4 	movi	r2,-1
 800b2e0:	f800283a 	ret
 800b2e4:	5112b03a 	or	r9,r10,r4
 800b2e8:	48000f1e 	bne	r9,zero,800b328 <__ledf2+0xa0>
 800b2ec:	40800c26 	beq	r8,r2,800b320 <__ledf2+0x98>
 800b2f0:	4000101e 	bne	r8,zero,800b334 <__ledf2+0xac>
 800b2f4:	1992b03a 	or	r9,r3,r6
 800b2f8:	0017883a 	mov	r11,zero
 800b2fc:	483ff41e 	bne	r9,zero,800b2d0 <__alt_data_end+0xfc00b2d0>
 800b300:	283ff61e 	bne	r5,zero,800b2dc <__alt_data_end+0xfc00b2dc>
 800b304:	00800044 	movi	r2,1
 800b308:	f800283a 	ret
 800b30c:	1998b03a 	or	r12,r3,r6
 800b310:	603fef1e 	bne	r12,zero,800b2d0 <__alt_data_end+0xfc00b2d0>
 800b314:	483ffa26 	beq	r9,zero,800b300 <__alt_data_end+0xfc00b300>
 800b318:	0005883a 	mov	r2,zero
 800b31c:	f800283a 	ret
 800b320:	1992b03a 	or	r9,r3,r6
 800b324:	48000226 	beq	r9,zero,800b330 <__ledf2+0xa8>
 800b328:	00800084 	movi	r2,2
 800b32c:	f800283a 	ret
 800b330:	103fe326 	beq	r2,zero,800b2c0 <__alt_data_end+0xfc00b2c0>
 800b334:	39c03fcc 	andi	r7,r7,255
 800b338:	29fff11e 	bne	r5,r7,800b300 <__alt_data_end+0xfc00b300>
 800b33c:	40bff016 	blt	r8,r2,800b300 <__alt_data_end+0xfc00b300>
 800b340:	12000316 	blt	r2,r8,800b350 <__ledf2+0xc8>
 800b344:	1abfee36 	bltu	r3,r10,800b300 <__alt_data_end+0xfc00b300>
 800b348:	50c00326 	beq	r10,r3,800b358 <__ledf2+0xd0>
 800b34c:	50fff22e 	bgeu	r10,r3,800b318 <__alt_data_end+0xfc00b318>
 800b350:	283fe226 	beq	r5,zero,800b2dc <__alt_data_end+0xfc00b2dc>
 800b354:	003feb06 	br	800b304 <__alt_data_end+0xfc00b304>
 800b358:	313fe936 	bltu	r6,r4,800b300 <__alt_data_end+0xfc00b300>
 800b35c:	21bfee2e 	bgeu	r4,r6,800b318 <__alt_data_end+0xfc00b318>
 800b360:	283fde26 	beq	r5,zero,800b2dc <__alt_data_end+0xfc00b2dc>
 800b364:	003fe706 	br	800b304 <__alt_data_end+0xfc00b304>

0800b368 <__muldf3>:
 800b368:	defff204 	addi	sp,sp,-56
 800b36c:	2804d53a 	srli	r2,r5,20
 800b370:	dd800a15 	stw	r22,40(sp)
 800b374:	282cd7fa 	srli	r22,r5,31
 800b378:	dc000415 	stw	r16,16(sp)
 800b37c:	04000434 	movhi	r16,16
 800b380:	df000c15 	stw	fp,48(sp)
 800b384:	dd000815 	stw	r20,32(sp)
 800b388:	dcc00715 	stw	r19,28(sp)
 800b38c:	dc800615 	stw	r18,24(sp)
 800b390:	dc400515 	stw	r17,20(sp)
 800b394:	843fffc4 	addi	r16,r16,-1
 800b398:	dfc00d15 	stw	ra,52(sp)
 800b39c:	ddc00b15 	stw	r23,44(sp)
 800b3a0:	dd400915 	stw	r21,36(sp)
 800b3a4:	1501ffcc 	andi	r20,r2,2047
 800b3a8:	2023883a 	mov	r17,r4
 800b3ac:	2025883a 	mov	r18,r4
 800b3b0:	2c20703a 	and	r16,r5,r16
 800b3b4:	b027883a 	mov	r19,r22
 800b3b8:	b7003fcc 	andi	fp,r22,255
 800b3bc:	a0005926 	beq	r20,zero,800b524 <__muldf3+0x1bc>
 800b3c0:	0081ffc4 	movi	r2,2047
 800b3c4:	a0803426 	beq	r20,r2,800b498 <__muldf3+0x130>
 800b3c8:	84000434 	orhi	r16,r16,16
 800b3cc:	2004d77a 	srli	r2,r4,29
 800b3d0:	802090fa 	slli	r16,r16,3
 800b3d4:	202490fa 	slli	r18,r4,3
 800b3d8:	a53f0044 	addi	r20,r20,-1023
 800b3dc:	80a0b03a 	or	r16,r16,r2
 800b3e0:	002b883a 	mov	r21,zero
 800b3e4:	0015883a 	mov	r10,zero
 800b3e8:	3812d53a 	srli	r9,r7,20
 800b3ec:	3806d7fa 	srli	r3,r7,31
 800b3f0:	02000434 	movhi	r8,16
 800b3f4:	423fffc4 	addi	r8,r8,-1
 800b3f8:	4941ffcc 	andi	r5,r9,2047
 800b3fc:	302f883a 	mov	r23,r6
 800b400:	3a22703a 	and	r17,r7,r8
 800b404:	1ac03fcc 	andi	r11,r3,255
 800b408:	28006226 	beq	r5,zero,800b594 <__muldf3+0x22c>
 800b40c:	0081ffc4 	movi	r2,2047
 800b410:	28805a26 	beq	r5,r2,800b57c <__muldf3+0x214>
 800b414:	8a000434 	orhi	r8,r17,16
 800b418:	3004d77a 	srli	r2,r6,29
 800b41c:	401090fa 	slli	r8,r8,3
 800b420:	302e90fa 	slli	r23,r6,3
 800b424:	297f0044 	addi	r5,r5,-1023
 800b428:	40a2b03a 	or	r17,r8,r2
 800b42c:	0013883a 	mov	r9,zero
 800b430:	4d4cb03a 	or	r6,r9,r21
 800b434:	300c90ba 	slli	r6,r6,2
 800b438:	02020074 	movhi	r8,2049
 800b43c:	422d1604 	addi	r8,r8,-19368
 800b440:	320d883a 	add	r6,r6,r8
 800b444:	31800017 	ldw	r6,0(r6)
 800b448:	a14b883a 	add	r5,r20,r5
 800b44c:	1dacf03a 	xor	r22,r3,r22
 800b450:	2b000044 	addi	r12,r5,1
 800b454:	3000683a 	jmp	r6
 800b458:	0800b694 	ori	zero,at,730
 800b45c:	0800b680 	call	800b68 <__reset-0x77ff498>
 800b460:	0800b680 	call	800b68 <__reset-0x77ff498>
 800b464:	0800b66c 	andhi	zero,at,729
 800b468:	0800b4b4 	orhi	zero,at,722
 800b46c:	0800b4b4 	orhi	zero,at,722
 800b470:	0800b654 	ori	zero,at,729
 800b474:	0800b66c 	andhi	zero,at,729
 800b478:	0800b4b4 	orhi	zero,at,722
 800b47c:	0800b654 	ori	zero,at,729
 800b480:	0800b4b4 	orhi	zero,at,722
 800b484:	0800b66c 	andhi	zero,at,729
 800b488:	0800b4b8 	rdprs	zero,at,722
 800b48c:	0800b4b8 	rdprs	zero,at,722
 800b490:	0800b4b8 	rdprs	zero,at,722
 800b494:	0800b890 	cmplti	zero,at,738
 800b498:	8104b03a 	or	r2,r16,r4
 800b49c:	10006a1e 	bne	r2,zero,800b648 <__muldf3+0x2e0>
 800b4a0:	05400204 	movi	r21,8
 800b4a4:	0021883a 	mov	r16,zero
 800b4a8:	0025883a 	mov	r18,zero
 800b4ac:	02800084 	movi	r10,2
 800b4b0:	003fcd06 	br	800b3e8 <__alt_data_end+0xfc00b3e8>
 800b4b4:	b039883a 	mov	fp,r22
 800b4b8:	00800084 	movi	r2,2
 800b4bc:	50804e1e 	bne	r10,r2,800b5f8 <__muldf3+0x290>
 800b4c0:	e4c0004c 	andi	r19,fp,1
 800b4c4:	0101ffc4 	movi	r4,2047
 800b4c8:	0021883a 	mov	r16,zero
 800b4cc:	0025883a 	mov	r18,zero
 800b4d0:	2008953a 	slli	r4,r4,20
 800b4d4:	98c03fcc 	andi	r3,r19,255
 800b4d8:	01400434 	movhi	r5,16
 800b4dc:	297fffc4 	addi	r5,r5,-1
 800b4e0:	180697fa 	slli	r3,r3,31
 800b4e4:	8160703a 	and	r16,r16,r5
 800b4e8:	8120b03a 	or	r16,r16,r4
 800b4ec:	80c6b03a 	or	r3,r16,r3
 800b4f0:	9005883a 	mov	r2,r18
 800b4f4:	dfc00d17 	ldw	ra,52(sp)
 800b4f8:	df000c17 	ldw	fp,48(sp)
 800b4fc:	ddc00b17 	ldw	r23,44(sp)
 800b500:	dd800a17 	ldw	r22,40(sp)
 800b504:	dd400917 	ldw	r21,36(sp)
 800b508:	dd000817 	ldw	r20,32(sp)
 800b50c:	dcc00717 	ldw	r19,28(sp)
 800b510:	dc800617 	ldw	r18,24(sp)
 800b514:	dc400517 	ldw	r17,20(sp)
 800b518:	dc000417 	ldw	r16,16(sp)
 800b51c:	dec00e04 	addi	sp,sp,56
 800b520:	f800283a 	ret
 800b524:	8104b03a 	or	r2,r16,r4
 800b528:	10004226 	beq	r2,zero,800b634 <__muldf3+0x2cc>
 800b52c:	8000f926 	beq	r16,zero,800b914 <__muldf3+0x5ac>
 800b530:	8009883a 	mov	r4,r16
 800b534:	d9800315 	stw	r6,12(sp)
 800b538:	d9c00015 	stw	r7,0(sp)
 800b53c:	800c5580 	call	800c558 <__clzsi2>
 800b540:	d9800317 	ldw	r6,12(sp)
 800b544:	d9c00017 	ldw	r7,0(sp)
 800b548:	1007883a 	mov	r3,r2
 800b54c:	01000a04 	movi	r4,40
 800b550:	18bffe04 	addi	r2,r3,-8
 800b554:	20c9c83a 	sub	r4,r4,r3
 800b558:	80a0983a 	sll	r16,r16,r2
 800b55c:	8908d83a 	srl	r4,r17,r4
 800b560:	88a4983a 	sll	r18,r17,r2
 800b564:	2420b03a 	or	r16,r4,r16
 800b568:	017f0344 	movi	r5,-1011
 800b56c:	28e9c83a 	sub	r20,r5,r3
 800b570:	002b883a 	mov	r21,zero
 800b574:	0015883a 	mov	r10,zero
 800b578:	003f9b06 	br	800b3e8 <__alt_data_end+0xfc00b3e8>
 800b57c:	8984b03a 	or	r2,r17,r6
 800b580:	10002a1e 	bne	r2,zero,800b62c <__muldf3+0x2c4>
 800b584:	0023883a 	mov	r17,zero
 800b588:	002f883a 	mov	r23,zero
 800b58c:	02400084 	movi	r9,2
 800b590:	003fa706 	br	800b430 <__alt_data_end+0xfc00b430>
 800b594:	8984b03a 	or	r2,r17,r6
 800b598:	10002026 	beq	r2,zero,800b61c <__muldf3+0x2b4>
 800b59c:	8800cc26 	beq	r17,zero,800b8d0 <__muldf3+0x568>
 800b5a0:	8809883a 	mov	r4,r17
 800b5a4:	d8c00215 	stw	r3,8(sp)
 800b5a8:	d9800315 	stw	r6,12(sp)
 800b5ac:	da800015 	stw	r10,0(sp)
 800b5b0:	dac00115 	stw	r11,4(sp)
 800b5b4:	800c5580 	call	800c558 <__clzsi2>
 800b5b8:	d8c00217 	ldw	r3,8(sp)
 800b5bc:	d9800317 	ldw	r6,12(sp)
 800b5c0:	da800017 	ldw	r10,0(sp)
 800b5c4:	dac00117 	ldw	r11,4(sp)
 800b5c8:	1009883a 	mov	r4,r2
 800b5cc:	01400a04 	movi	r5,40
 800b5d0:	25fffe04 	addi	r23,r4,-8
 800b5d4:	290bc83a 	sub	r5,r5,r4
 800b5d8:	8dd0983a 	sll	r8,r17,r23
 800b5dc:	314ad83a 	srl	r5,r6,r5
 800b5e0:	35ee983a 	sll	r23,r6,r23
 800b5e4:	2a22b03a 	or	r17,r5,r8
 800b5e8:	017f0344 	movi	r5,-1011
 800b5ec:	290bc83a 	sub	r5,r5,r4
 800b5f0:	0013883a 	mov	r9,zero
 800b5f4:	003f8e06 	br	800b430 <__alt_data_end+0xfc00b430>
 800b5f8:	008000c4 	movi	r2,3
 800b5fc:	50811d26 	beq	r10,r2,800ba74 <__muldf3+0x70c>
 800b600:	00800044 	movi	r2,1
 800b604:	5080e01e 	bne	r10,r2,800b988 <__muldf3+0x620>
 800b608:	e0a6703a 	and	r19,fp,r2
 800b60c:	0009883a 	mov	r4,zero
 800b610:	0021883a 	mov	r16,zero
 800b614:	0025883a 	mov	r18,zero
 800b618:	003fad06 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b61c:	0023883a 	mov	r17,zero
 800b620:	002f883a 	mov	r23,zero
 800b624:	02400044 	movi	r9,1
 800b628:	003f8106 	br	800b430 <__alt_data_end+0xfc00b430>
 800b62c:	024000c4 	movi	r9,3
 800b630:	003f7f06 	br	800b430 <__alt_data_end+0xfc00b430>
 800b634:	05400104 	movi	r21,4
 800b638:	0021883a 	mov	r16,zero
 800b63c:	0025883a 	mov	r18,zero
 800b640:	02800044 	movi	r10,1
 800b644:	003f6806 	br	800b3e8 <__alt_data_end+0xfc00b3e8>
 800b648:	05400304 	movi	r21,12
 800b64c:	028000c4 	movi	r10,3
 800b650:	003f6506 	br	800b3e8 <__alt_data_end+0xfc00b3e8>
 800b654:	04000434 	movhi	r16,16
 800b658:	0027883a 	mov	r19,zero
 800b65c:	843fffc4 	addi	r16,r16,-1
 800b660:	04bfffc4 	movi	r18,-1
 800b664:	0101ffc4 	movi	r4,2047
 800b668:	003f9906 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b66c:	8821883a 	mov	r16,r17
 800b670:	b825883a 	mov	r18,r23
 800b674:	5839883a 	mov	fp,r11
 800b678:	4815883a 	mov	r10,r9
 800b67c:	003f8e06 	br	800b4b8 <__alt_data_end+0xfc00b4b8>
 800b680:	8821883a 	mov	r16,r17
 800b684:	b825883a 	mov	r18,r23
 800b688:	b039883a 	mov	fp,r22
 800b68c:	4815883a 	mov	r10,r9
 800b690:	003f8906 	br	800b4b8 <__alt_data_end+0xfc00b4b8>
 800b694:	b80cd43a 	srli	r6,r23,16
 800b698:	9006d43a 	srli	r3,r18,16
 800b69c:	90bfffcc 	andi	r2,r18,65535
 800b6a0:	bdffffcc 	andi	r23,r23,65535
 800b6a4:	b891383a 	mul	r8,r23,r2
 800b6a8:	b8c9383a 	mul	r4,r23,r3
 800b6ac:	309b383a 	mul	r13,r6,r2
 800b6b0:	400ed43a 	srli	r7,r8,16
 800b6b4:	30df383a 	mul	r15,r6,r3
 800b6b8:	235b883a 	add	r13,r4,r13
 800b6bc:	69db883a 	add	r13,r13,r7
 800b6c0:	6900022e 	bgeu	r13,r4,800b6cc <__muldf3+0x364>
 800b6c4:	01000074 	movhi	r4,1
 800b6c8:	791f883a 	add	r15,r15,r4
 800b6cc:	8828d43a 	srli	r20,r17,16
 800b6d0:	8c7fffcc 	andi	r17,r17,65535
 800b6d4:	888f383a 	mul	r7,r17,r2
 800b6d8:	88d3383a 	mul	r9,r17,r3
 800b6dc:	a0a5383a 	mul	r18,r20,r2
 800b6e0:	3816d43a 	srli	r11,r7,16
 800b6e4:	6814943a 	slli	r10,r13,16
 800b6e8:	4ca5883a 	add	r18,r9,r18
 800b6ec:	423fffcc 	andi	r8,r8,65535
 800b6f0:	92e5883a 	add	r18,r18,r11
 800b6f4:	6808d43a 	srli	r4,r13,16
 800b6f8:	5215883a 	add	r10,r10,r8
 800b6fc:	a0c7383a 	mul	r3,r20,r3
 800b700:	9240022e 	bgeu	r18,r9,800b70c <__muldf3+0x3a4>
 800b704:	00800074 	movhi	r2,1
 800b708:	1887883a 	add	r3,r3,r2
 800b70c:	802ad43a 	srli	r21,r16,16
 800b710:	80bfffcc 	andi	r2,r16,65535
 800b714:	b893383a 	mul	r9,r23,r2
 800b718:	3091383a 	mul	r8,r6,r2
 800b71c:	bd6f383a 	mul	r23,r23,r21
 800b720:	9026943a 	slli	r19,r18,16
 800b724:	481ad43a 	srli	r13,r9,16
 800b728:	9024d43a 	srli	r18,r18,16
 800b72c:	39ffffcc 	andi	r7,r7,65535
 800b730:	ba11883a 	add	r8,r23,r8
 800b734:	99e7883a 	add	r19,r19,r7
 800b738:	4351883a 	add	r8,r8,r13
 800b73c:	1c97883a 	add	r11,r3,r18
 800b740:	354d383a 	mul	r6,r6,r21
 800b744:	9925883a 	add	r18,r19,r4
 800b748:	45c0022e 	bgeu	r8,r23,800b754 <__muldf3+0x3ec>
 800b74c:	00c00074 	movhi	r3,1
 800b750:	30cd883a 	add	r6,r6,r3
 800b754:	8889383a 	mul	r4,r17,r2
 800b758:	8d63383a 	mul	r17,r17,r21
 800b75c:	a085383a 	mul	r2,r20,r2
 800b760:	200ed43a 	srli	r7,r4,16
 800b764:	401cd43a 	srli	r14,r8,16
 800b768:	401a943a 	slli	r13,r8,16
 800b76c:	8885883a 	add	r2,r17,r2
 800b770:	4a3fffcc 	andi	r8,r9,65535
 800b774:	11c5883a 	add	r2,r2,r7
 800b778:	339d883a 	add	r14,r6,r14
 800b77c:	6a11883a 	add	r8,r13,r8
 800b780:	a561383a 	mul	r16,r20,r21
 800b784:	1440022e 	bgeu	r2,r17,800b790 <__muldf3+0x428>
 800b788:	00c00074 	movhi	r3,1
 800b78c:	80e1883a 	add	r16,r16,r3
 800b790:	1006943a 	slli	r3,r2,16
 800b794:	213fffcc 	andi	r4,r4,65535
 800b798:	93db883a 	add	r13,r18,r15
 800b79c:	1909883a 	add	r4,r3,r4
 800b7a0:	22c7883a 	add	r3,r4,r11
 800b7a4:	6cd3803a 	cmpltu	r9,r13,r19
 800b7a8:	6a09883a 	add	r4,r13,r8
 800b7ac:	1a5b883a 	add	r13,r3,r9
 800b7b0:	2211803a 	cmpltu	r8,r4,r8
 800b7b4:	734d883a 	add	r6,r14,r13
 800b7b8:	100ed43a 	srli	r7,r2,16
 800b7bc:	6a53803a 	cmpltu	r9,r13,r9
 800b7c0:	3205883a 	add	r2,r6,r8
 800b7c4:	1ac7803a 	cmpltu	r3,r3,r11
 800b7c8:	1211803a 	cmpltu	r8,r2,r8
 800b7cc:	48c6b03a 	or	r3,r9,r3
 800b7d0:	338d803a 	cmpltu	r6,r6,r14
 800b7d4:	19c7883a 	add	r3,r3,r7
 800b7d8:	418cb03a 	or	r6,r8,r6
 800b7dc:	1987883a 	add	r3,r3,r6
 800b7e0:	2024927a 	slli	r18,r4,9
 800b7e4:	1c07883a 	add	r3,r3,r16
 800b7e8:	1806927a 	slli	r3,r3,9
 800b7ec:	1020d5fa 	srli	r16,r2,23
 800b7f0:	2008d5fa 	srli	r4,r4,23
 800b7f4:	9294b03a 	or	r10,r18,r10
 800b7f8:	1004927a 	slli	r2,r2,9
 800b7fc:	5024c03a 	cmpne	r18,r10,zero
 800b800:	1c20b03a 	or	r16,r3,r16
 800b804:	9108b03a 	or	r4,r18,r4
 800b808:	80c0402c 	andhi	r3,r16,256
 800b80c:	20a4b03a 	or	r18,r4,r2
 800b810:	18000726 	beq	r3,zero,800b830 <__muldf3+0x4c8>
 800b814:	9006d07a 	srli	r3,r18,1
 800b818:	800897fa 	slli	r4,r16,31
 800b81c:	9080004c 	andi	r2,r18,1
 800b820:	8020d07a 	srli	r16,r16,1
 800b824:	10c4b03a 	or	r2,r2,r3
 800b828:	1124b03a 	or	r18,r2,r4
 800b82c:	600b883a 	mov	r5,r12
 800b830:	2900ffc4 	addi	r4,r5,1023
 800b834:	01004b0e 	bge	zero,r4,800b964 <__muldf3+0x5fc>
 800b838:	908001cc 	andi	r2,r18,7
 800b83c:	10000726 	beq	r2,zero,800b85c <__muldf3+0x4f4>
 800b840:	90c003cc 	andi	r3,r18,15
 800b844:	00800104 	movi	r2,4
 800b848:	18800426 	beq	r3,r2,800b85c <__muldf3+0x4f4>
 800b84c:	9087883a 	add	r3,r18,r2
 800b850:	1c85803a 	cmpltu	r2,r3,r18
 800b854:	80a1883a 	add	r16,r16,r2
 800b858:	1825883a 	mov	r18,r3
 800b85c:	8080402c 	andhi	r2,r16,256
 800b860:	10000426 	beq	r2,zero,800b874 <__muldf3+0x50c>
 800b864:	00bfc034 	movhi	r2,65280
 800b868:	10bfffc4 	addi	r2,r2,-1
 800b86c:	29010004 	addi	r4,r5,1024
 800b870:	80a0703a 	and	r16,r16,r2
 800b874:	0081ff84 	movi	r2,2046
 800b878:	1100320e 	bge	r2,r4,800b944 <__muldf3+0x5dc>
 800b87c:	b4c0004c 	andi	r19,r22,1
 800b880:	0101ffc4 	movi	r4,2047
 800b884:	0021883a 	mov	r16,zero
 800b888:	0025883a 	mov	r18,zero
 800b88c:	003f1006 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b890:	8080022c 	andhi	r2,r16,8
 800b894:	10000926 	beq	r2,zero,800b8bc <__muldf3+0x554>
 800b898:	8880022c 	andhi	r2,r17,8
 800b89c:	1000071e 	bne	r2,zero,800b8bc <__muldf3+0x554>
 800b8a0:	00800434 	movhi	r2,16
 800b8a4:	8c000234 	orhi	r16,r17,8
 800b8a8:	10bfffc4 	addi	r2,r2,-1
 800b8ac:	1827883a 	mov	r19,r3
 800b8b0:	80a0703a 	and	r16,r16,r2
 800b8b4:	b825883a 	mov	r18,r23
 800b8b8:	003f6a06 	br	800b664 <__alt_data_end+0xfc00b664>
 800b8bc:	00800434 	movhi	r2,16
 800b8c0:	84000234 	orhi	r16,r16,8
 800b8c4:	10bfffc4 	addi	r2,r2,-1
 800b8c8:	80a0703a 	and	r16,r16,r2
 800b8cc:	003f6506 	br	800b664 <__alt_data_end+0xfc00b664>
 800b8d0:	3009883a 	mov	r4,r6
 800b8d4:	d8c00215 	stw	r3,8(sp)
 800b8d8:	d9800315 	stw	r6,12(sp)
 800b8dc:	da800015 	stw	r10,0(sp)
 800b8e0:	dac00115 	stw	r11,4(sp)
 800b8e4:	800c5580 	call	800c558 <__clzsi2>
 800b8e8:	11000804 	addi	r4,r2,32
 800b8ec:	014009c4 	movi	r5,39
 800b8f0:	d8c00217 	ldw	r3,8(sp)
 800b8f4:	d9800317 	ldw	r6,12(sp)
 800b8f8:	da800017 	ldw	r10,0(sp)
 800b8fc:	dac00117 	ldw	r11,4(sp)
 800b900:	293f320e 	bge	r5,r4,800b5cc <__alt_data_end+0xfc00b5cc>
 800b904:	10bffe04 	addi	r2,r2,-8
 800b908:	b8a2983a 	sll	r17,r23,r2
 800b90c:	002f883a 	mov	r23,zero
 800b910:	003f3506 	br	800b5e8 <__alt_data_end+0xfc00b5e8>
 800b914:	d9800315 	stw	r6,12(sp)
 800b918:	d9c00015 	stw	r7,0(sp)
 800b91c:	800c5580 	call	800c558 <__clzsi2>
 800b920:	10c00804 	addi	r3,r2,32
 800b924:	010009c4 	movi	r4,39
 800b928:	d9800317 	ldw	r6,12(sp)
 800b92c:	d9c00017 	ldw	r7,0(sp)
 800b930:	20ff060e 	bge	r4,r3,800b54c <__alt_data_end+0xfc00b54c>
 800b934:	10bffe04 	addi	r2,r2,-8
 800b938:	88a0983a 	sll	r16,r17,r2
 800b93c:	0025883a 	mov	r18,zero
 800b940:	003f0906 	br	800b568 <__alt_data_end+0xfc00b568>
 800b944:	9004d0fa 	srli	r2,r18,3
 800b948:	8024977a 	slli	r18,r16,29
 800b94c:	8020927a 	slli	r16,r16,9
 800b950:	2101ffcc 	andi	r4,r4,2047
 800b954:	90a4b03a 	or	r18,r18,r2
 800b958:	8020d33a 	srli	r16,r16,12
 800b95c:	b4c0004c 	andi	r19,r22,1
 800b960:	003edb06 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b964:	00ff0084 	movi	r3,-1022
 800b968:	1947c83a 	sub	r3,r3,r5
 800b96c:	00800e04 	movi	r2,56
 800b970:	10c0080e 	bge	r2,r3,800b994 <__muldf3+0x62c>
 800b974:	b4c0004c 	andi	r19,r22,1
 800b978:	0009883a 	mov	r4,zero
 800b97c:	0021883a 	mov	r16,zero
 800b980:	0025883a 	mov	r18,zero
 800b984:	003ed206 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b988:	600b883a 	mov	r5,r12
 800b98c:	e02d883a 	mov	r22,fp
 800b990:	003fa706 	br	800b830 <__alt_data_end+0xfc00b830>
 800b994:	008007c4 	movi	r2,31
 800b998:	10c01816 	blt	r2,r3,800b9fc <__muldf3+0x694>
 800b99c:	29410784 	addi	r5,r5,1054
 800b9a0:	8144983a 	sll	r2,r16,r5
 800b9a4:	90c8d83a 	srl	r4,r18,r3
 800b9a8:	914a983a 	sll	r5,r18,r5
 800b9ac:	80c6d83a 	srl	r3,r16,r3
 800b9b0:	2088b03a 	or	r4,r4,r2
 800b9b4:	2804c03a 	cmpne	r2,r5,zero
 800b9b8:	2084b03a 	or	r2,r4,r2
 800b9bc:	110001cc 	andi	r4,r2,7
 800b9c0:	20000726 	beq	r4,zero,800b9e0 <__muldf3+0x678>
 800b9c4:	114003cc 	andi	r5,r2,15
 800b9c8:	01000104 	movi	r4,4
 800b9cc:	29000426 	beq	r5,r4,800b9e0 <__muldf3+0x678>
 800b9d0:	11000104 	addi	r4,r2,4
 800b9d4:	2085803a 	cmpltu	r2,r4,r2
 800b9d8:	1887883a 	add	r3,r3,r2
 800b9dc:	2005883a 	mov	r2,r4
 800b9e0:	1900202c 	andhi	r4,r3,128
 800b9e4:	20001826 	beq	r4,zero,800ba48 <__muldf3+0x6e0>
 800b9e8:	b4c0004c 	andi	r19,r22,1
 800b9ec:	01000044 	movi	r4,1
 800b9f0:	0021883a 	mov	r16,zero
 800b9f4:	0025883a 	mov	r18,zero
 800b9f8:	003eb506 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b9fc:	00bef884 	movi	r2,-1054
 800ba00:	1145c83a 	sub	r2,r2,r5
 800ba04:	8088d83a 	srl	r4,r16,r2
 800ba08:	00800804 	movi	r2,32
 800ba0c:	18801726 	beq	r3,r2,800ba6c <__muldf3+0x704>
 800ba10:	28810f84 	addi	r2,r5,1086
 800ba14:	8084983a 	sll	r2,r16,r2
 800ba18:	1484b03a 	or	r2,r2,r18
 800ba1c:	1004c03a 	cmpne	r2,r2,zero
 800ba20:	1104b03a 	or	r2,r2,r4
 800ba24:	10c001cc 	andi	r3,r2,7
 800ba28:	18000b1e 	bne	r3,zero,800ba58 <__muldf3+0x6f0>
 800ba2c:	0021883a 	mov	r16,zero
 800ba30:	1004d0fa 	srli	r2,r2,3
 800ba34:	b4c0004c 	andi	r19,r22,1
 800ba38:	0009883a 	mov	r4,zero
 800ba3c:	10e4b03a 	or	r18,r2,r3
 800ba40:	003ea306 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800ba44:	0007883a 	mov	r3,zero
 800ba48:	1820927a 	slli	r16,r3,9
 800ba4c:	1806977a 	slli	r3,r3,29
 800ba50:	8020d33a 	srli	r16,r16,12
 800ba54:	003ff606 	br	800ba30 <__alt_data_end+0xfc00ba30>
 800ba58:	110003cc 	andi	r4,r2,15
 800ba5c:	00c00104 	movi	r3,4
 800ba60:	20fff826 	beq	r4,r3,800ba44 <__alt_data_end+0xfc00ba44>
 800ba64:	0007883a 	mov	r3,zero
 800ba68:	003fd906 	br	800b9d0 <__alt_data_end+0xfc00b9d0>
 800ba6c:	0005883a 	mov	r2,zero
 800ba70:	003fe906 	br	800ba18 <__alt_data_end+0xfc00ba18>
 800ba74:	00800434 	movhi	r2,16
 800ba78:	84000234 	orhi	r16,r16,8
 800ba7c:	10bfffc4 	addi	r2,r2,-1
 800ba80:	e4c0004c 	andi	r19,fp,1
 800ba84:	80a0703a 	and	r16,r16,r2
 800ba88:	003ef606 	br	800b664 <__alt_data_end+0xfc00b664>

0800ba8c <__subdf3>:
 800ba8c:	00c00434 	movhi	r3,16
 800ba90:	18ffffc4 	addi	r3,r3,-1
 800ba94:	defffb04 	addi	sp,sp,-20
 800ba98:	28d2703a 	and	r9,r5,r3
 800ba9c:	3814d53a 	srli	r10,r7,20
 800baa0:	38c6703a 	and	r3,r7,r3
 800baa4:	3004d77a 	srli	r2,r6,29
 800baa8:	dc800215 	stw	r18,8(sp)
 800baac:	dc000015 	stw	r16,0(sp)
 800bab0:	2824d7fa 	srli	r18,r5,31
 800bab4:	2820d53a 	srli	r16,r5,20
 800bab8:	481290fa 	slli	r9,r9,3
 800babc:	200ad77a 	srli	r5,r4,29
 800bac0:	180690fa 	slli	r3,r3,3
 800bac4:	dc400115 	stw	r17,4(sp)
 800bac8:	dfc00415 	stw	ra,16(sp)
 800bacc:	202290fa 	slli	r17,r4,3
 800bad0:	dcc00315 	stw	r19,12(sp)
 800bad4:	5281ffcc 	andi	r10,r10,2047
 800bad8:	0101ffc4 	movi	r4,2047
 800badc:	9011883a 	mov	r8,r18
 800bae0:	8401ffcc 	andi	r16,r16,2047
 800bae4:	94803fcc 	andi	r18,r18,255
 800bae8:	494ab03a 	or	r5,r9,r5
 800baec:	380ed7fa 	srli	r7,r7,31
 800baf0:	1886b03a 	or	r3,r3,r2
 800baf4:	300c90fa 	slli	r6,r6,3
 800baf8:	51009026 	beq	r10,r4,800bd3c <__subdf3+0x2b0>
 800bafc:	39c0005c 	xori	r7,r7,1
 800bb00:	8285c83a 	sub	r2,r16,r10
 800bb04:	91c06f26 	beq	r18,r7,800bcc4 <__subdf3+0x238>
 800bb08:	0080b10e 	bge	zero,r2,800bdd0 <__subdf3+0x344>
 800bb0c:	50002a1e 	bne	r10,zero,800bbb8 <__subdf3+0x12c>
 800bb10:	1988b03a 	or	r4,r3,r6
 800bb14:	2000941e 	bne	r4,zero,800bd68 <__subdf3+0x2dc>
 800bb18:	888001cc 	andi	r2,r17,7
 800bb1c:	10005b26 	beq	r2,zero,800bc8c <__subdf3+0x200>
 800bb20:	88c003cc 	andi	r3,r17,15
 800bb24:	00800104 	movi	r2,4
 800bb28:	18805826 	beq	r3,r2,800bc8c <__subdf3+0x200>
 800bb2c:	88c00104 	addi	r3,r17,4
 800bb30:	1c63803a 	cmpltu	r17,r3,r17
 800bb34:	2c4b883a 	add	r5,r5,r17
 800bb38:	2880202c 	andhi	r2,r5,128
 800bb3c:	9200004c 	andi	r8,r18,1
 800bb40:	1823883a 	mov	r17,r3
 800bb44:	10005426 	beq	r2,zero,800bc98 <__subdf3+0x20c>
 800bb48:	84000044 	addi	r16,r16,1
 800bb4c:	0081ffc4 	movi	r2,2047
 800bb50:	8080bf26 	beq	r16,r2,800be50 <__subdf3+0x3c4>
 800bb54:	013fe034 	movhi	r4,65408
 800bb58:	213fffc4 	addi	r4,r4,-1
 800bb5c:	290a703a 	and	r5,r5,r4
 800bb60:	2804977a 	slli	r2,r5,29
 800bb64:	280a927a 	slli	r5,r5,9
 800bb68:	8822d0fa 	srli	r17,r17,3
 800bb6c:	8401ffcc 	andi	r16,r16,2047
 800bb70:	2808d33a 	srli	r4,r5,12
 800bb74:	1444b03a 	or	r2,r2,r17
 800bb78:	8401ffcc 	andi	r16,r16,2047
 800bb7c:	800a953a 	slli	r5,r16,20
 800bb80:	40c03fcc 	andi	r3,r8,255
 800bb84:	04000434 	movhi	r16,16
 800bb88:	180697fa 	slli	r3,r3,31
 800bb8c:	843fffc4 	addi	r16,r16,-1
 800bb90:	2420703a 	and	r16,r4,r16
 800bb94:	8160b03a 	or	r16,r16,r5
 800bb98:	80c6b03a 	or	r3,r16,r3
 800bb9c:	dfc00417 	ldw	ra,16(sp)
 800bba0:	dcc00317 	ldw	r19,12(sp)
 800bba4:	dc800217 	ldw	r18,8(sp)
 800bba8:	dc400117 	ldw	r17,4(sp)
 800bbac:	dc000017 	ldw	r16,0(sp)
 800bbb0:	dec00504 	addi	sp,sp,20
 800bbb4:	f800283a 	ret
 800bbb8:	0101ffc4 	movi	r4,2047
 800bbbc:	813fd626 	beq	r16,r4,800bb18 <__alt_data_end+0xfc00bb18>
 800bbc0:	18c02034 	orhi	r3,r3,128
 800bbc4:	01000e04 	movi	r4,56
 800bbc8:	2080a416 	blt	r4,r2,800be5c <__subdf3+0x3d0>
 800bbcc:	010007c4 	movi	r4,31
 800bbd0:	2080c716 	blt	r4,r2,800bef0 <__subdf3+0x464>
 800bbd4:	01000804 	movi	r4,32
 800bbd8:	2089c83a 	sub	r4,r4,r2
 800bbdc:	1910983a 	sll	r8,r3,r4
 800bbe0:	308ed83a 	srl	r7,r6,r2
 800bbe4:	3108983a 	sll	r4,r6,r4
 800bbe8:	1884d83a 	srl	r2,r3,r2
 800bbec:	41ccb03a 	or	r6,r8,r7
 800bbf0:	2008c03a 	cmpne	r4,r4,zero
 800bbf4:	310cb03a 	or	r6,r6,r4
 800bbf8:	898dc83a 	sub	r6,r17,r6
 800bbfc:	89a3803a 	cmpltu	r17,r17,r6
 800bc00:	288bc83a 	sub	r5,r5,r2
 800bc04:	2c4bc83a 	sub	r5,r5,r17
 800bc08:	3023883a 	mov	r17,r6
 800bc0c:	2880202c 	andhi	r2,r5,128
 800bc10:	10006b26 	beq	r2,zero,800bdc0 <__subdf3+0x334>
 800bc14:	04c02034 	movhi	r19,128
 800bc18:	9cffffc4 	addi	r19,r19,-1
 800bc1c:	2ce6703a 	and	r19,r5,r19
 800bc20:	98007c26 	beq	r19,zero,800be14 <__subdf3+0x388>
 800bc24:	9809883a 	mov	r4,r19
 800bc28:	800c5580 	call	800c558 <__clzsi2>
 800bc2c:	10fffe04 	addi	r3,r2,-8
 800bc30:	010007c4 	movi	r4,31
 800bc34:	20c07d16 	blt	r4,r3,800be2c <__subdf3+0x3a0>
 800bc38:	01400a04 	movi	r5,40
 800bc3c:	2885c83a 	sub	r2,r5,r2
 800bc40:	888ad83a 	srl	r5,r17,r2
 800bc44:	98e6983a 	sll	r19,r19,r3
 800bc48:	88e2983a 	sll	r17,r17,r3
 800bc4c:	2ce6b03a 	or	r19,r5,r19
 800bc50:	1c007a16 	blt	r3,r16,800be3c <__subdf3+0x3b0>
 800bc54:	1c21c83a 	sub	r16,r3,r16
 800bc58:	81400044 	addi	r5,r16,1
 800bc5c:	00c007c4 	movi	r3,31
 800bc60:	19409616 	blt	r3,r5,800bebc <__subdf3+0x430>
 800bc64:	1c21c83a 	sub	r16,r3,r16
 800bc68:	8c08983a 	sll	r4,r17,r16
 800bc6c:	8946d83a 	srl	r3,r17,r5
 800bc70:	9c20983a 	sll	r16,r19,r16
 800bc74:	2008c03a 	cmpne	r4,r4,zero
 800bc78:	994ad83a 	srl	r5,r19,r5
 800bc7c:	1c06b03a 	or	r3,r3,r16
 800bc80:	1922b03a 	or	r17,r3,r4
 800bc84:	0021883a 	mov	r16,zero
 800bc88:	003fa306 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bc8c:	2880202c 	andhi	r2,r5,128
 800bc90:	9200004c 	andi	r8,r18,1
 800bc94:	103fac1e 	bne	r2,zero,800bb48 <__alt_data_end+0xfc00bb48>
 800bc98:	2804977a 	slli	r2,r5,29
 800bc9c:	8822d0fa 	srli	r17,r17,3
 800bca0:	00c1ffc4 	movi	r3,2047
 800bca4:	280ad0fa 	srli	r5,r5,3
 800bca8:	1444b03a 	or	r2,r2,r17
 800bcac:	80c02726 	beq	r16,r3,800bd4c <__subdf3+0x2c0>
 800bcb0:	01000434 	movhi	r4,16
 800bcb4:	213fffc4 	addi	r4,r4,-1
 800bcb8:	80e0703a 	and	r16,r16,r3
 800bcbc:	2908703a 	and	r4,r5,r4
 800bcc0:	003fad06 	br	800bb78 <__alt_data_end+0xfc00bb78>
 800bcc4:	0080690e 	bge	zero,r2,800be6c <__subdf3+0x3e0>
 800bcc8:	50002f26 	beq	r10,zero,800bd88 <__subdf3+0x2fc>
 800bccc:	0101ffc4 	movi	r4,2047
 800bcd0:	813f9126 	beq	r16,r4,800bb18 <__alt_data_end+0xfc00bb18>
 800bcd4:	18c02034 	orhi	r3,r3,128
 800bcd8:	01000e04 	movi	r4,56
 800bcdc:	2080b00e 	bge	r4,r2,800bfa0 <__subdf3+0x514>
 800bce0:	198cb03a 	or	r6,r3,r6
 800bce4:	300ec03a 	cmpne	r7,r6,zero
 800bce8:	0005883a 	mov	r2,zero
 800bcec:	3c4f883a 	add	r7,r7,r17
 800bcf0:	3c63803a 	cmpltu	r17,r7,r17
 800bcf4:	114b883a 	add	r5,r2,r5
 800bcf8:	2c4b883a 	add	r5,r5,r17
 800bcfc:	3823883a 	mov	r17,r7
 800bd00:	2880202c 	andhi	r2,r5,128
 800bd04:	10002e26 	beq	r2,zero,800bdc0 <__subdf3+0x334>
 800bd08:	84000044 	addi	r16,r16,1
 800bd0c:	0081ffc4 	movi	r2,2047
 800bd10:	8080de26 	beq	r16,r2,800c08c <__subdf3+0x600>
 800bd14:	00bfe034 	movhi	r2,65408
 800bd18:	10bfffc4 	addi	r2,r2,-1
 800bd1c:	288a703a 	and	r5,r5,r2
 800bd20:	880cd07a 	srli	r6,r17,1
 800bd24:	280897fa 	slli	r4,r5,31
 800bd28:	88c0004c 	andi	r3,r17,1
 800bd2c:	30e2b03a 	or	r17,r6,r3
 800bd30:	280ad07a 	srli	r5,r5,1
 800bd34:	8922b03a 	or	r17,r17,r4
 800bd38:	003f7706 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bd3c:	1984b03a 	or	r2,r3,r6
 800bd40:	103f6e26 	beq	r2,zero,800bafc <__alt_data_end+0xfc00bafc>
 800bd44:	39c03fcc 	andi	r7,r7,255
 800bd48:	003f6d06 	br	800bb00 <__alt_data_end+0xfc00bb00>
 800bd4c:	1146b03a 	or	r3,r2,r5
 800bd50:	18003f26 	beq	r3,zero,800be50 <__subdf3+0x3c4>
 800bd54:	00c00434 	movhi	r3,16
 800bd58:	29000234 	orhi	r4,r5,8
 800bd5c:	18ffffc4 	addi	r3,r3,-1
 800bd60:	20c8703a 	and	r4,r4,r3
 800bd64:	003f8406 	br	800bb78 <__alt_data_end+0xfc00bb78>
 800bd68:	10bfffc4 	addi	r2,r2,-1
 800bd6c:	1000501e 	bne	r2,zero,800beb0 <__subdf3+0x424>
 800bd70:	898fc83a 	sub	r7,r17,r6
 800bd74:	89e3803a 	cmpltu	r17,r17,r7
 800bd78:	28cbc83a 	sub	r5,r5,r3
 800bd7c:	2c4bc83a 	sub	r5,r5,r17
 800bd80:	3823883a 	mov	r17,r7
 800bd84:	003fa106 	br	800bc0c <__alt_data_end+0xfc00bc0c>
 800bd88:	1988b03a 	or	r4,r3,r6
 800bd8c:	203f6226 	beq	r4,zero,800bb18 <__alt_data_end+0xfc00bb18>
 800bd90:	10bfffc4 	addi	r2,r2,-1
 800bd94:	10009b1e 	bne	r2,zero,800c004 <__subdf3+0x578>
 800bd98:	344d883a 	add	r6,r6,r17
 800bd9c:	3463803a 	cmpltu	r17,r6,r17
 800bda0:	194b883a 	add	r5,r3,r5
 800bda4:	2c4b883a 	add	r5,r5,r17
 800bda8:	3023883a 	mov	r17,r6
 800bdac:	003fd406 	br	800bd00 <__alt_data_end+0xfc00bd00>
 800bdb0:	1106b03a 	or	r3,r2,r4
 800bdb4:	1800b426 	beq	r3,zero,800c088 <__subdf3+0x5fc>
 800bdb8:	100b883a 	mov	r5,r2
 800bdbc:	2023883a 	mov	r17,r4
 800bdc0:	888001cc 	andi	r2,r17,7
 800bdc4:	103f561e 	bne	r2,zero,800bb20 <__alt_data_end+0xfc00bb20>
 800bdc8:	9200004c 	andi	r8,r18,1
 800bdcc:	003fb206 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800bdd0:	1000531e 	bne	r2,zero,800bf20 <__subdf3+0x494>
 800bdd4:	80800044 	addi	r2,r16,1
 800bdd8:	1081ffcc 	andi	r2,r2,2047
 800bddc:	01000044 	movi	r4,1
 800bde0:	2080a00e 	bge	r4,r2,800c064 <__subdf3+0x5d8>
 800bde4:	8985c83a 	sub	r2,r17,r6
 800bde8:	8889803a 	cmpltu	r4,r17,r2
 800bdec:	28e7c83a 	sub	r19,r5,r3
 800bdf0:	9927c83a 	sub	r19,r19,r4
 800bdf4:	9900202c 	andhi	r4,r19,128
 800bdf8:	20006226 	beq	r4,zero,800bf84 <__subdf3+0x4f8>
 800bdfc:	3463c83a 	sub	r17,r6,r17
 800be00:	194bc83a 	sub	r5,r3,r5
 800be04:	344d803a 	cmpltu	r6,r6,r17
 800be08:	29a7c83a 	sub	r19,r5,r6
 800be0c:	3825883a 	mov	r18,r7
 800be10:	983f841e 	bne	r19,zero,800bc24 <__alt_data_end+0xfc00bc24>
 800be14:	8809883a 	mov	r4,r17
 800be18:	800c5580 	call	800c558 <__clzsi2>
 800be1c:	10800804 	addi	r2,r2,32
 800be20:	10fffe04 	addi	r3,r2,-8
 800be24:	010007c4 	movi	r4,31
 800be28:	20ff830e 	bge	r4,r3,800bc38 <__alt_data_end+0xfc00bc38>
 800be2c:	14fff604 	addi	r19,r2,-40
 800be30:	8ce6983a 	sll	r19,r17,r19
 800be34:	0023883a 	mov	r17,zero
 800be38:	1c3f860e 	bge	r3,r16,800bc54 <__alt_data_end+0xfc00bc54>
 800be3c:	017fe034 	movhi	r5,65408
 800be40:	297fffc4 	addi	r5,r5,-1
 800be44:	80e1c83a 	sub	r16,r16,r3
 800be48:	994a703a 	and	r5,r19,r5
 800be4c:	003f3206 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800be50:	0009883a 	mov	r4,zero
 800be54:	0005883a 	mov	r2,zero
 800be58:	003f4706 	br	800bb78 <__alt_data_end+0xfc00bb78>
 800be5c:	198cb03a 	or	r6,r3,r6
 800be60:	300cc03a 	cmpne	r6,r6,zero
 800be64:	0005883a 	mov	r2,zero
 800be68:	003f6306 	br	800bbf8 <__alt_data_end+0xfc00bbf8>
 800be6c:	10009d1e 	bne	r2,zero,800c0e4 <__subdf3+0x658>
 800be70:	81c00044 	addi	r7,r16,1
 800be74:	3881ffcc 	andi	r2,r7,2047
 800be78:	02400044 	movi	r9,1
 800be7c:	4880680e 	bge	r9,r2,800c020 <__subdf3+0x594>
 800be80:	0081ffc4 	movi	r2,2047
 800be84:	3880ae26 	beq	r7,r2,800c140 <__subdf3+0x6b4>
 800be88:	344d883a 	add	r6,r6,r17
 800be8c:	3463803a 	cmpltu	r17,r6,r17
 800be90:	194b883a 	add	r5,r3,r5
 800be94:	2c4b883a 	add	r5,r5,r17
 800be98:	282297fa 	slli	r17,r5,31
 800be9c:	300cd07a 	srli	r6,r6,1
 800bea0:	280ad07a 	srli	r5,r5,1
 800bea4:	3821883a 	mov	r16,r7
 800bea8:	89a2b03a 	or	r17,r17,r6
 800beac:	003f1a06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800beb0:	0101ffc4 	movi	r4,2047
 800beb4:	813f431e 	bne	r16,r4,800bbc4 <__alt_data_end+0xfc00bbc4>
 800beb8:	003f1706 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bebc:	80bff844 	addi	r2,r16,-31
 800bec0:	00c00804 	movi	r3,32
 800bec4:	9884d83a 	srl	r2,r19,r2
 800bec8:	28c05126 	beq	r5,r3,800c010 <__subdf3+0x584>
 800becc:	00c00fc4 	movi	r3,63
 800bed0:	1c21c83a 	sub	r16,r3,r16
 800bed4:	9c26983a 	sll	r19,r19,r16
 800bed8:	9c62b03a 	or	r17,r19,r17
 800bedc:	8822c03a 	cmpne	r17,r17,zero
 800bee0:	88a2b03a 	or	r17,r17,r2
 800bee4:	000b883a 	mov	r5,zero
 800bee8:	0021883a 	mov	r16,zero
 800beec:	003fb406 	br	800bdc0 <__alt_data_end+0xfc00bdc0>
 800bef0:	113ff804 	addi	r4,r2,-32
 800bef4:	01c00804 	movi	r7,32
 800bef8:	1908d83a 	srl	r4,r3,r4
 800befc:	11c04626 	beq	r2,r7,800c018 <__subdf3+0x58c>
 800bf00:	01c01004 	movi	r7,64
 800bf04:	3885c83a 	sub	r2,r7,r2
 800bf08:	1884983a 	sll	r2,r3,r2
 800bf0c:	118cb03a 	or	r6,r2,r6
 800bf10:	300cc03a 	cmpne	r6,r6,zero
 800bf14:	310cb03a 	or	r6,r6,r4
 800bf18:	0005883a 	mov	r2,zero
 800bf1c:	003f3606 	br	800bbf8 <__alt_data_end+0xfc00bbf8>
 800bf20:	80002b26 	beq	r16,zero,800bfd0 <__subdf3+0x544>
 800bf24:	0101ffc4 	movi	r4,2047
 800bf28:	51006926 	beq	r10,r4,800c0d0 <__subdf3+0x644>
 800bf2c:	0085c83a 	sub	r2,zero,r2
 800bf30:	29402034 	orhi	r5,r5,128
 800bf34:	01000e04 	movi	r4,56
 800bf38:	20807d16 	blt	r4,r2,800c130 <__subdf3+0x6a4>
 800bf3c:	010007c4 	movi	r4,31
 800bf40:	2080d916 	blt	r4,r2,800c2a8 <__subdf3+0x81c>
 800bf44:	01000804 	movi	r4,32
 800bf48:	2089c83a 	sub	r4,r4,r2
 800bf4c:	2912983a 	sll	r9,r5,r4
 800bf50:	8890d83a 	srl	r8,r17,r2
 800bf54:	8908983a 	sll	r4,r17,r4
 800bf58:	2884d83a 	srl	r2,r5,r2
 800bf5c:	4a22b03a 	or	r17,r9,r8
 800bf60:	2008c03a 	cmpne	r4,r4,zero
 800bf64:	8922b03a 	or	r17,r17,r4
 800bf68:	3463c83a 	sub	r17,r6,r17
 800bf6c:	1885c83a 	sub	r2,r3,r2
 800bf70:	344d803a 	cmpltu	r6,r6,r17
 800bf74:	118bc83a 	sub	r5,r2,r6
 800bf78:	5021883a 	mov	r16,r10
 800bf7c:	3825883a 	mov	r18,r7
 800bf80:	003f2206 	br	800bc0c <__alt_data_end+0xfc00bc0c>
 800bf84:	9886b03a 	or	r3,r19,r2
 800bf88:	18001c1e 	bne	r3,zero,800bffc <__subdf3+0x570>
 800bf8c:	0011883a 	mov	r8,zero
 800bf90:	000b883a 	mov	r5,zero
 800bf94:	0023883a 	mov	r17,zero
 800bf98:	0021883a 	mov	r16,zero
 800bf9c:	003f3e06 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800bfa0:	010007c4 	movi	r4,31
 800bfa4:	20803c16 	blt	r4,r2,800c098 <__subdf3+0x60c>
 800bfa8:	01000804 	movi	r4,32
 800bfac:	2089c83a 	sub	r4,r4,r2
 800bfb0:	1912983a 	sll	r9,r3,r4
 800bfb4:	308ed83a 	srl	r7,r6,r2
 800bfb8:	3108983a 	sll	r4,r6,r4
 800bfbc:	1884d83a 	srl	r2,r3,r2
 800bfc0:	49ceb03a 	or	r7,r9,r7
 800bfc4:	2008c03a 	cmpne	r4,r4,zero
 800bfc8:	390eb03a 	or	r7,r7,r4
 800bfcc:	003f4706 	br	800bcec <__alt_data_end+0xfc00bcec>
 800bfd0:	2c48b03a 	or	r4,r5,r17
 800bfd4:	20003e26 	beq	r4,zero,800c0d0 <__subdf3+0x644>
 800bfd8:	0084303a 	nor	r2,zero,r2
 800bfdc:	10003a1e 	bne	r2,zero,800c0c8 <__subdf3+0x63c>
 800bfe0:	3463c83a 	sub	r17,r6,r17
 800bfe4:	194bc83a 	sub	r5,r3,r5
 800bfe8:	344d803a 	cmpltu	r6,r6,r17
 800bfec:	298bc83a 	sub	r5,r5,r6
 800bff0:	5021883a 	mov	r16,r10
 800bff4:	3825883a 	mov	r18,r7
 800bff8:	003f0406 	br	800bc0c <__alt_data_end+0xfc00bc0c>
 800bffc:	1023883a 	mov	r17,r2
 800c000:	003f0706 	br	800bc20 <__alt_data_end+0xfc00bc20>
 800c004:	0101ffc4 	movi	r4,2047
 800c008:	813f331e 	bne	r16,r4,800bcd8 <__alt_data_end+0xfc00bcd8>
 800c00c:	003ec206 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c010:	0027883a 	mov	r19,zero
 800c014:	003fb006 	br	800bed8 <__alt_data_end+0xfc00bed8>
 800c018:	0005883a 	mov	r2,zero
 800c01c:	003fbb06 	br	800bf0c <__alt_data_end+0xfc00bf0c>
 800c020:	2c44b03a 	or	r2,r5,r17
 800c024:	80008b1e 	bne	r16,zero,800c254 <__subdf3+0x7c8>
 800c028:	1000b526 	beq	r2,zero,800c300 <__subdf3+0x874>
 800c02c:	1984b03a 	or	r2,r3,r6
 800c030:	103eb926 	beq	r2,zero,800bb18 <__alt_data_end+0xfc00bb18>
 800c034:	3449883a 	add	r4,r6,r17
 800c038:	2463803a 	cmpltu	r17,r4,r17
 800c03c:	194b883a 	add	r5,r3,r5
 800c040:	2c4b883a 	add	r5,r5,r17
 800c044:	2880202c 	andhi	r2,r5,128
 800c048:	2023883a 	mov	r17,r4
 800c04c:	103f5c26 	beq	r2,zero,800bdc0 <__alt_data_end+0xfc00bdc0>
 800c050:	00bfe034 	movhi	r2,65408
 800c054:	10bfffc4 	addi	r2,r2,-1
 800c058:	4821883a 	mov	r16,r9
 800c05c:	288a703a 	and	r5,r5,r2
 800c060:	003ead06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c064:	2c44b03a 	or	r2,r5,r17
 800c068:	8000291e 	bne	r16,zero,800c110 <__subdf3+0x684>
 800c06c:	10004f1e 	bne	r2,zero,800c1ac <__subdf3+0x720>
 800c070:	1984b03a 	or	r2,r3,r6
 800c074:	10000426 	beq	r2,zero,800c088 <__subdf3+0x5fc>
 800c078:	180b883a 	mov	r5,r3
 800c07c:	3023883a 	mov	r17,r6
 800c080:	3825883a 	mov	r18,r7
 800c084:	003ea406 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c088:	0011883a 	mov	r8,zero
 800c08c:	000b883a 	mov	r5,zero
 800c090:	0023883a 	mov	r17,zero
 800c094:	003f0006 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800c098:	11fff804 	addi	r7,r2,-32
 800c09c:	19c8d83a 	srl	r4,r3,r7
 800c0a0:	01c00804 	movi	r7,32
 800c0a4:	11c07e26 	beq	r2,r7,800c2a0 <__subdf3+0x814>
 800c0a8:	01c01004 	movi	r7,64
 800c0ac:	3885c83a 	sub	r2,r7,r2
 800c0b0:	1884983a 	sll	r2,r3,r2
 800c0b4:	118cb03a 	or	r6,r2,r6
 800c0b8:	300ec03a 	cmpne	r7,r6,zero
 800c0bc:	390eb03a 	or	r7,r7,r4
 800c0c0:	0005883a 	mov	r2,zero
 800c0c4:	003f0906 	br	800bcec <__alt_data_end+0xfc00bcec>
 800c0c8:	0101ffc4 	movi	r4,2047
 800c0cc:	513f991e 	bne	r10,r4,800bf34 <__alt_data_end+0xfc00bf34>
 800c0d0:	180b883a 	mov	r5,r3
 800c0d4:	3023883a 	mov	r17,r6
 800c0d8:	5021883a 	mov	r16,r10
 800c0dc:	3825883a 	mov	r18,r7
 800c0e0:	003e8d06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c0e4:	80001a1e 	bne	r16,zero,800c150 <__subdf3+0x6c4>
 800c0e8:	2c48b03a 	or	r4,r5,r17
 800c0ec:	20005526 	beq	r4,zero,800c244 <__subdf3+0x7b8>
 800c0f0:	0084303a 	nor	r2,zero,r2
 800c0f4:	1000511e 	bne	r2,zero,800c23c <__subdf3+0x7b0>
 800c0f8:	89a3883a 	add	r17,r17,r6
 800c0fc:	194b883a 	add	r5,r3,r5
 800c100:	898d803a 	cmpltu	r6,r17,r6
 800c104:	298b883a 	add	r5,r5,r6
 800c108:	5021883a 	mov	r16,r10
 800c10c:	003efc06 	br	800bd00 <__alt_data_end+0xfc00bd00>
 800c110:	1000341e 	bne	r2,zero,800c1e4 <__subdf3+0x758>
 800c114:	1984b03a 	or	r2,r3,r6
 800c118:	10006f26 	beq	r2,zero,800c2d8 <__subdf3+0x84c>
 800c11c:	180b883a 	mov	r5,r3
 800c120:	3023883a 	mov	r17,r6
 800c124:	3825883a 	mov	r18,r7
 800c128:	0401ffc4 	movi	r16,2047
 800c12c:	003e7a06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c130:	2c62b03a 	or	r17,r5,r17
 800c134:	8822c03a 	cmpne	r17,r17,zero
 800c138:	0005883a 	mov	r2,zero
 800c13c:	003f8a06 	br	800bf68 <__alt_data_end+0xfc00bf68>
 800c140:	3821883a 	mov	r16,r7
 800c144:	000b883a 	mov	r5,zero
 800c148:	0023883a 	mov	r17,zero
 800c14c:	003ed206 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800c150:	0101ffc4 	movi	r4,2047
 800c154:	51003b26 	beq	r10,r4,800c244 <__subdf3+0x7b8>
 800c158:	0085c83a 	sub	r2,zero,r2
 800c15c:	29402034 	orhi	r5,r5,128
 800c160:	01000e04 	movi	r4,56
 800c164:	20806216 	blt	r4,r2,800c2f0 <__subdf3+0x864>
 800c168:	010007c4 	movi	r4,31
 800c16c:	20806b16 	blt	r4,r2,800c31c <__subdf3+0x890>
 800c170:	01000804 	movi	r4,32
 800c174:	2089c83a 	sub	r4,r4,r2
 800c178:	2912983a 	sll	r9,r5,r4
 800c17c:	888ed83a 	srl	r7,r17,r2
 800c180:	8908983a 	sll	r4,r17,r4
 800c184:	2884d83a 	srl	r2,r5,r2
 800c188:	49e2b03a 	or	r17,r9,r7
 800c18c:	2008c03a 	cmpne	r4,r4,zero
 800c190:	8922b03a 	or	r17,r17,r4
 800c194:	89a3883a 	add	r17,r17,r6
 800c198:	10c5883a 	add	r2,r2,r3
 800c19c:	898d803a 	cmpltu	r6,r17,r6
 800c1a0:	118b883a 	add	r5,r2,r6
 800c1a4:	5021883a 	mov	r16,r10
 800c1a8:	003ed506 	br	800bd00 <__alt_data_end+0xfc00bd00>
 800c1ac:	1984b03a 	or	r2,r3,r6
 800c1b0:	103e5926 	beq	r2,zero,800bb18 <__alt_data_end+0xfc00bb18>
 800c1b4:	8989c83a 	sub	r4,r17,r6
 800c1b8:	8911803a 	cmpltu	r8,r17,r4
 800c1bc:	28c5c83a 	sub	r2,r5,r3
 800c1c0:	1205c83a 	sub	r2,r2,r8
 800c1c4:	1200202c 	andhi	r8,r2,128
 800c1c8:	403ef926 	beq	r8,zero,800bdb0 <__alt_data_end+0xfc00bdb0>
 800c1cc:	3463c83a 	sub	r17,r6,r17
 800c1d0:	194bc83a 	sub	r5,r3,r5
 800c1d4:	344d803a 	cmpltu	r6,r6,r17
 800c1d8:	298bc83a 	sub	r5,r5,r6
 800c1dc:	3825883a 	mov	r18,r7
 800c1e0:	003e4d06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c1e4:	1984b03a 	or	r2,r3,r6
 800c1e8:	10002b26 	beq	r2,zero,800c298 <__subdf3+0x80c>
 800c1ec:	2808d0fa 	srli	r4,r5,3
 800c1f0:	8822d0fa 	srli	r17,r17,3
 800c1f4:	280a977a 	slli	r5,r5,29
 800c1f8:	2080022c 	andhi	r2,r4,8
 800c1fc:	2c62b03a 	or	r17,r5,r17
 800c200:	10000826 	beq	r2,zero,800c224 <__subdf3+0x798>
 800c204:	1810d0fa 	srli	r8,r3,3
 800c208:	4080022c 	andhi	r2,r8,8
 800c20c:	1000051e 	bne	r2,zero,800c224 <__subdf3+0x798>
 800c210:	300cd0fa 	srli	r6,r6,3
 800c214:	1804977a 	slli	r2,r3,29
 800c218:	4009883a 	mov	r4,r8
 800c21c:	3825883a 	mov	r18,r7
 800c220:	11a2b03a 	or	r17,r2,r6
 800c224:	880ad77a 	srli	r5,r17,29
 800c228:	200890fa 	slli	r4,r4,3
 800c22c:	882290fa 	slli	r17,r17,3
 800c230:	0401ffc4 	movi	r16,2047
 800c234:	290ab03a 	or	r5,r5,r4
 800c238:	003e3706 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c23c:	0101ffc4 	movi	r4,2047
 800c240:	513fc71e 	bne	r10,r4,800c160 <__alt_data_end+0xfc00c160>
 800c244:	180b883a 	mov	r5,r3
 800c248:	3023883a 	mov	r17,r6
 800c24c:	5021883a 	mov	r16,r10
 800c250:	003e3106 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c254:	10002d26 	beq	r2,zero,800c30c <__subdf3+0x880>
 800c258:	1984b03a 	or	r2,r3,r6
 800c25c:	10000e26 	beq	r2,zero,800c298 <__subdf3+0x80c>
 800c260:	2808d0fa 	srli	r4,r5,3
 800c264:	8822d0fa 	srli	r17,r17,3
 800c268:	280a977a 	slli	r5,r5,29
 800c26c:	2080022c 	andhi	r2,r4,8
 800c270:	2c62b03a 	or	r17,r5,r17
 800c274:	103feb26 	beq	r2,zero,800c224 <__alt_data_end+0xfc00c224>
 800c278:	180ed0fa 	srli	r7,r3,3
 800c27c:	3880022c 	andhi	r2,r7,8
 800c280:	103fe81e 	bne	r2,zero,800c224 <__alt_data_end+0xfc00c224>
 800c284:	300cd0fa 	srli	r6,r6,3
 800c288:	1804977a 	slli	r2,r3,29
 800c28c:	3809883a 	mov	r4,r7
 800c290:	11a2b03a 	or	r17,r2,r6
 800c294:	003fe306 	br	800c224 <__alt_data_end+0xfc00c224>
 800c298:	0401ffc4 	movi	r16,2047
 800c29c:	003e1e06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c2a0:	0005883a 	mov	r2,zero
 800c2a4:	003f8306 	br	800c0b4 <__alt_data_end+0xfc00c0b4>
 800c2a8:	113ff804 	addi	r4,r2,-32
 800c2ac:	02000804 	movi	r8,32
 800c2b0:	2908d83a 	srl	r4,r5,r4
 800c2b4:	12002526 	beq	r2,r8,800c34c <__subdf3+0x8c0>
 800c2b8:	02001004 	movi	r8,64
 800c2bc:	4085c83a 	sub	r2,r8,r2
 800c2c0:	288a983a 	sll	r5,r5,r2
 800c2c4:	2c62b03a 	or	r17,r5,r17
 800c2c8:	8822c03a 	cmpne	r17,r17,zero
 800c2cc:	8922b03a 	or	r17,r17,r4
 800c2d0:	0005883a 	mov	r2,zero
 800c2d4:	003f2406 	br	800bf68 <__alt_data_end+0xfc00bf68>
 800c2d8:	01402034 	movhi	r5,128
 800c2dc:	0011883a 	mov	r8,zero
 800c2e0:	297fffc4 	addi	r5,r5,-1
 800c2e4:	047ffe04 	movi	r17,-8
 800c2e8:	0401ffc4 	movi	r16,2047
 800c2ec:	003e6a06 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800c2f0:	2c62b03a 	or	r17,r5,r17
 800c2f4:	8822c03a 	cmpne	r17,r17,zero
 800c2f8:	0005883a 	mov	r2,zero
 800c2fc:	003fa506 	br	800c194 <__alt_data_end+0xfc00c194>
 800c300:	180b883a 	mov	r5,r3
 800c304:	3023883a 	mov	r17,r6
 800c308:	003e0306 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c30c:	180b883a 	mov	r5,r3
 800c310:	3023883a 	mov	r17,r6
 800c314:	0401ffc4 	movi	r16,2047
 800c318:	003dff06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c31c:	113ff804 	addi	r4,r2,-32
 800c320:	01c00804 	movi	r7,32
 800c324:	2908d83a 	srl	r4,r5,r4
 800c328:	11c00a26 	beq	r2,r7,800c354 <__subdf3+0x8c8>
 800c32c:	01c01004 	movi	r7,64
 800c330:	3885c83a 	sub	r2,r7,r2
 800c334:	288a983a 	sll	r5,r5,r2
 800c338:	2c62b03a 	or	r17,r5,r17
 800c33c:	8822c03a 	cmpne	r17,r17,zero
 800c340:	8922b03a 	or	r17,r17,r4
 800c344:	0005883a 	mov	r2,zero
 800c348:	003f9206 	br	800c194 <__alt_data_end+0xfc00c194>
 800c34c:	000b883a 	mov	r5,zero
 800c350:	003fdc06 	br	800c2c4 <__alt_data_end+0xfc00c2c4>
 800c354:	000b883a 	mov	r5,zero
 800c358:	003ff706 	br	800c338 <__alt_data_end+0xfc00c338>

0800c35c <__fixdfsi>:
 800c35c:	2806d53a 	srli	r3,r5,20
 800c360:	00800434 	movhi	r2,16
 800c364:	10bfffc4 	addi	r2,r2,-1
 800c368:	18c1ffcc 	andi	r3,r3,2047
 800c36c:	0180ff84 	movi	r6,1022
 800c370:	2884703a 	and	r2,r5,r2
 800c374:	280ad7fa 	srli	r5,r5,31
 800c378:	30c0130e 	bge	r6,r3,800c3c8 <__fixdfsi+0x6c>
 800c37c:	01810744 	movi	r6,1053
 800c380:	30c00d16 	blt	r6,r3,800c3b8 <__fixdfsi+0x5c>
 800c384:	01810cc4 	movi	r6,1075
 800c388:	30cdc83a 	sub	r6,r6,r3
 800c38c:	01c007c4 	movi	r7,31
 800c390:	10800434 	orhi	r2,r2,16
 800c394:	39800e0e 	bge	r7,r6,800c3d0 <__fixdfsi+0x74>
 800c398:	010104c4 	movi	r4,1043
 800c39c:	20c7c83a 	sub	r3,r4,r3
 800c3a0:	10c6d83a 	srl	r3,r2,r3
 800c3a4:	29403fcc 	andi	r5,r5,255
 800c3a8:	0145c83a 	sub	r2,zero,r5
 800c3ac:	1884f03a 	xor	r2,r3,r2
 800c3b0:	1145883a 	add	r2,r2,r5
 800c3b4:	f800283a 	ret
 800c3b8:	00a00034 	movhi	r2,32768
 800c3bc:	10bfffc4 	addi	r2,r2,-1
 800c3c0:	2885883a 	add	r2,r5,r2
 800c3c4:	f800283a 	ret
 800c3c8:	0005883a 	mov	r2,zero
 800c3cc:	f800283a 	ret
 800c3d0:	18fefb44 	addi	r3,r3,-1043
 800c3d4:	2188d83a 	srl	r4,r4,r6
 800c3d8:	10c6983a 	sll	r3,r2,r3
 800c3dc:	20c6b03a 	or	r3,r4,r3
 800c3e0:	003ff006 	br	800c3a4 <__alt_data_end+0xfc00c3a4>

0800c3e4 <__floatsidf>:
 800c3e4:	defffd04 	addi	sp,sp,-12
 800c3e8:	dc400115 	stw	r17,4(sp)
 800c3ec:	dfc00215 	stw	ra,8(sp)
 800c3f0:	dc000015 	stw	r16,0(sp)
 800c3f4:	2023883a 	mov	r17,r4
 800c3f8:	20001426 	beq	r4,zero,800c44c <__floatsidf+0x68>
 800c3fc:	2020d7fa 	srli	r16,r4,31
 800c400:	80000126 	beq	r16,zero,800c408 <__floatsidf+0x24>
 800c404:	0123c83a 	sub	r17,zero,r4
 800c408:	8809883a 	mov	r4,r17
 800c40c:	800c5580 	call	800c558 <__clzsi2>
 800c410:	01410784 	movi	r5,1054
 800c414:	00c00284 	movi	r3,10
 800c418:	288bc83a 	sub	r5,r5,r2
 800c41c:	18801c16 	blt	r3,r2,800c490 <__floatsidf+0xac>
 800c420:	00c002c4 	movi	r3,11
 800c424:	1887c83a 	sub	r3,r3,r2
 800c428:	88c8d83a 	srl	r4,r17,r3
 800c42c:	00c00434 	movhi	r3,16
 800c430:	18ffffc4 	addi	r3,r3,-1
 800c434:	10800544 	addi	r2,r2,21
 800c438:	20c8703a 	and	r4,r4,r3
 800c43c:	8884983a 	sll	r2,r17,r2
 800c440:	28c1ffcc 	andi	r3,r5,2047
 800c444:	800d883a 	mov	r6,r16
 800c448:	00000406 	br	800c45c <__floatsidf+0x78>
 800c44c:	000d883a 	mov	r6,zero
 800c450:	0007883a 	mov	r3,zero
 800c454:	0009883a 	mov	r4,zero
 800c458:	0005883a 	mov	r2,zero
 800c45c:	180a953a 	slli	r5,r3,20
 800c460:	31803fcc 	andi	r6,r6,255
 800c464:	00c00434 	movhi	r3,16
 800c468:	300c97fa 	slli	r6,r6,31
 800c46c:	18ffffc4 	addi	r3,r3,-1
 800c470:	20c6703a 	and	r3,r4,r3
 800c474:	1946b03a 	or	r3,r3,r5
 800c478:	1986b03a 	or	r3,r3,r6
 800c47c:	dfc00217 	ldw	ra,8(sp)
 800c480:	dc400117 	ldw	r17,4(sp)
 800c484:	dc000017 	ldw	r16,0(sp)
 800c488:	dec00304 	addi	sp,sp,12
 800c48c:	f800283a 	ret
 800c490:	10fffd44 	addi	r3,r2,-11
 800c494:	88c8983a 	sll	r4,r17,r3
 800c498:	00800434 	movhi	r2,16
 800c49c:	10bfffc4 	addi	r2,r2,-1
 800c4a0:	2088703a 	and	r4,r4,r2
 800c4a4:	28c1ffcc 	andi	r3,r5,2047
 800c4a8:	800d883a 	mov	r6,r16
 800c4ac:	0005883a 	mov	r2,zero
 800c4b0:	003fea06 	br	800c45c <__alt_data_end+0xfc00c45c>

0800c4b4 <__floatunsidf>:
 800c4b4:	defffe04 	addi	sp,sp,-8
 800c4b8:	dc000015 	stw	r16,0(sp)
 800c4bc:	dfc00115 	stw	ra,4(sp)
 800c4c0:	2021883a 	mov	r16,r4
 800c4c4:	20001026 	beq	r4,zero,800c508 <__floatunsidf+0x54>
 800c4c8:	800c5580 	call	800c558 <__clzsi2>
 800c4cc:	01410784 	movi	r5,1054
 800c4d0:	100d883a 	mov	r6,r2
 800c4d4:	288bc83a 	sub	r5,r5,r2
 800c4d8:	00800284 	movi	r2,10
 800c4dc:	11801616 	blt	r2,r6,800c538 <__floatunsidf+0x84>
 800c4e0:	008002c4 	movi	r2,11
 800c4e4:	1185c83a 	sub	r2,r2,r6
 800c4e8:	8084d83a 	srl	r2,r16,r2
 800c4ec:	00c00434 	movhi	r3,16
 800c4f0:	31c00544 	addi	r7,r6,21
 800c4f4:	18ffffc4 	addi	r3,r3,-1
 800c4f8:	81e0983a 	sll	r16,r16,r7
 800c4fc:	10cc703a 	and	r6,r2,r3
 800c500:	2941ffcc 	andi	r5,r5,2047
 800c504:	00000206 	br	800c510 <__floatunsidf+0x5c>
 800c508:	000b883a 	mov	r5,zero
 800c50c:	000d883a 	mov	r6,zero
 800c510:	280a953a 	slli	r5,r5,20
 800c514:	00c00434 	movhi	r3,16
 800c518:	18ffffc4 	addi	r3,r3,-1
 800c51c:	30c6703a 	and	r3,r6,r3
 800c520:	8005883a 	mov	r2,r16
 800c524:	1946b03a 	or	r3,r3,r5
 800c528:	dfc00117 	ldw	ra,4(sp)
 800c52c:	dc000017 	ldw	r16,0(sp)
 800c530:	dec00204 	addi	sp,sp,8
 800c534:	f800283a 	ret
 800c538:	31bffd44 	addi	r6,r6,-11
 800c53c:	818c983a 	sll	r6,r16,r6
 800c540:	00800434 	movhi	r2,16
 800c544:	10bfffc4 	addi	r2,r2,-1
 800c548:	2941ffcc 	andi	r5,r5,2047
 800c54c:	0021883a 	mov	r16,zero
 800c550:	308c703a 	and	r6,r6,r2
 800c554:	003fee06 	br	800c510 <__alt_data_end+0xfc00c510>

0800c558 <__clzsi2>:
 800c558:	00bfffd4 	movui	r2,65535
 800c55c:	11000b36 	bltu	r2,r4,800c58c <__clzsi2+0x34>
 800c560:	00803fc4 	movi	r2,255
 800c564:	1100122e 	bgeu	r2,r4,800c5b0 <__clzsi2+0x58>
 800c568:	00c00204 	movi	r3,8
 800c56c:	01400604 	movi	r5,24
 800c570:	20c8d83a 	srl	r4,r4,r3
 800c574:	00820074 	movhi	r2,2049
 800c578:	10bd0804 	addi	r2,r2,-3040
 800c57c:	1109883a 	add	r4,r2,r4
 800c580:	20800003 	ldbu	r2,0(r4)
 800c584:	2885c83a 	sub	r2,r5,r2
 800c588:	f800283a 	ret
 800c58c:	00804034 	movhi	r2,256
 800c590:	10bfffc4 	addi	r2,r2,-1
 800c594:	11000336 	bltu	r2,r4,800c5a4 <__clzsi2+0x4c>
 800c598:	00c00404 	movi	r3,16
 800c59c:	180b883a 	mov	r5,r3
 800c5a0:	003ff306 	br	800c570 <__alt_data_end+0xfc00c570>
 800c5a4:	00c00604 	movi	r3,24
 800c5a8:	01400204 	movi	r5,8
 800c5ac:	003ff006 	br	800c570 <__alt_data_end+0xfc00c570>
 800c5b0:	0007883a 	mov	r3,zero
 800c5b4:	01400804 	movi	r5,32
 800c5b8:	003fed06 	br	800c570 <__alt_data_end+0xfc00c570>

0800c5bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c5bc:	defffe04 	addi	sp,sp,-8
 800c5c0:	dfc00115 	stw	ra,4(sp)
 800c5c4:	df000015 	stw	fp,0(sp)
 800c5c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c5cc:	00820074 	movhi	r2,2049
 800c5d0:	10841c04 	addi	r2,r2,4208
 800c5d4:	10800017 	ldw	r2,0(r2)
 800c5d8:	10000526 	beq	r2,zero,800c5f0 <alt_get_errno+0x34>
 800c5dc:	00820074 	movhi	r2,2049
 800c5e0:	10841c04 	addi	r2,r2,4208
 800c5e4:	10800017 	ldw	r2,0(r2)
 800c5e8:	103ee83a 	callr	r2
 800c5ec:	00000206 	br	800c5f8 <alt_get_errno+0x3c>
 800c5f0:	00820074 	movhi	r2,2049
 800c5f4:	108aed04 	addi	r2,r2,11188
}
 800c5f8:	e037883a 	mov	sp,fp
 800c5fc:	dfc00117 	ldw	ra,4(sp)
 800c600:	df000017 	ldw	fp,0(sp)
 800c604:	dec00204 	addi	sp,sp,8
 800c608:	f800283a 	ret

0800c60c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800c60c:	defffb04 	addi	sp,sp,-20
 800c610:	dfc00415 	stw	ra,16(sp)
 800c614:	df000315 	stw	fp,12(sp)
 800c618:	df000304 	addi	fp,sp,12
 800c61c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800c620:	e0bfff17 	ldw	r2,-4(fp)
 800c624:	10000616 	blt	r2,zero,800c640 <close+0x34>
 800c628:	e0bfff17 	ldw	r2,-4(fp)
 800c62c:	10c00324 	muli	r3,r2,12
 800c630:	00820074 	movhi	r2,2049
 800c634:	10bf8e04 	addi	r2,r2,-456
 800c638:	1885883a 	add	r2,r3,r2
 800c63c:	00000106 	br	800c644 <close+0x38>
 800c640:	0005883a 	mov	r2,zero
 800c644:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800c648:	e0bffd17 	ldw	r2,-12(fp)
 800c64c:	10001926 	beq	r2,zero,800c6b4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800c650:	e0bffd17 	ldw	r2,-12(fp)
 800c654:	10800017 	ldw	r2,0(r2)
 800c658:	10800417 	ldw	r2,16(r2)
 800c65c:	10000626 	beq	r2,zero,800c678 <close+0x6c>
 800c660:	e0bffd17 	ldw	r2,-12(fp)
 800c664:	10800017 	ldw	r2,0(r2)
 800c668:	10800417 	ldw	r2,16(r2)
 800c66c:	e13ffd17 	ldw	r4,-12(fp)
 800c670:	103ee83a 	callr	r2
 800c674:	00000106 	br	800c67c <close+0x70>
 800c678:	0005883a 	mov	r2,zero
 800c67c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800c680:	e13fff17 	ldw	r4,-4(fp)
 800c684:	800cd080 	call	800cd08 <alt_release_fd>
    if (rval < 0)
 800c688:	e0bffe17 	ldw	r2,-8(fp)
 800c68c:	1000070e 	bge	r2,zero,800c6ac <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800c690:	800c5bc0 	call	800c5bc <alt_get_errno>
 800c694:	1007883a 	mov	r3,r2
 800c698:	e0bffe17 	ldw	r2,-8(fp)
 800c69c:	0085c83a 	sub	r2,zero,r2
 800c6a0:	18800015 	stw	r2,0(r3)
      return -1;
 800c6a4:	00bfffc4 	movi	r2,-1
 800c6a8:	00000706 	br	800c6c8 <close+0xbc>
    }
    return 0;
 800c6ac:	0005883a 	mov	r2,zero
 800c6b0:	00000506 	br	800c6c8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800c6b4:	800c5bc0 	call	800c5bc <alt_get_errno>
 800c6b8:	1007883a 	mov	r3,r2
 800c6bc:	00801444 	movi	r2,81
 800c6c0:	18800015 	stw	r2,0(r3)
    return -1;
 800c6c4:	00bfffc4 	movi	r2,-1
  }
}
 800c6c8:	e037883a 	mov	sp,fp
 800c6cc:	dfc00117 	ldw	ra,4(sp)
 800c6d0:	df000017 	ldw	fp,0(sp)
 800c6d4:	dec00204 	addi	sp,sp,8
 800c6d8:	f800283a 	ret

0800c6dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800c6dc:	defffc04 	addi	sp,sp,-16
 800c6e0:	df000315 	stw	fp,12(sp)
 800c6e4:	df000304 	addi	fp,sp,12
 800c6e8:	e13ffd15 	stw	r4,-12(fp)
 800c6ec:	e17ffe15 	stw	r5,-8(fp)
 800c6f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800c6f4:	e0bfff17 	ldw	r2,-4(fp)
}
 800c6f8:	e037883a 	mov	sp,fp
 800c6fc:	df000017 	ldw	fp,0(sp)
 800c700:	dec00104 	addi	sp,sp,4
 800c704:	f800283a 	ret

0800c708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c708:	defffe04 	addi	sp,sp,-8
 800c70c:	dfc00115 	stw	ra,4(sp)
 800c710:	df000015 	stw	fp,0(sp)
 800c714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c718:	00820074 	movhi	r2,2049
 800c71c:	10841c04 	addi	r2,r2,4208
 800c720:	10800017 	ldw	r2,0(r2)
 800c724:	10000526 	beq	r2,zero,800c73c <alt_get_errno+0x34>
 800c728:	00820074 	movhi	r2,2049
 800c72c:	10841c04 	addi	r2,r2,4208
 800c730:	10800017 	ldw	r2,0(r2)
 800c734:	103ee83a 	callr	r2
 800c738:	00000206 	br	800c744 <alt_get_errno+0x3c>
 800c73c:	00820074 	movhi	r2,2049
 800c740:	108aed04 	addi	r2,r2,11188
}
 800c744:	e037883a 	mov	sp,fp
 800c748:	dfc00117 	ldw	ra,4(sp)
 800c74c:	df000017 	ldw	fp,0(sp)
 800c750:	dec00204 	addi	sp,sp,8
 800c754:	f800283a 	ret

0800c758 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800c758:	defffb04 	addi	sp,sp,-20
 800c75c:	dfc00415 	stw	ra,16(sp)
 800c760:	df000315 	stw	fp,12(sp)
 800c764:	df000304 	addi	fp,sp,12
 800c768:	e13ffe15 	stw	r4,-8(fp)
 800c76c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800c770:	e0bffe17 	ldw	r2,-8(fp)
 800c774:	10000616 	blt	r2,zero,800c790 <fstat+0x38>
 800c778:	e0bffe17 	ldw	r2,-8(fp)
 800c77c:	10c00324 	muli	r3,r2,12
 800c780:	00820074 	movhi	r2,2049
 800c784:	10bf8e04 	addi	r2,r2,-456
 800c788:	1885883a 	add	r2,r3,r2
 800c78c:	00000106 	br	800c794 <fstat+0x3c>
 800c790:	0005883a 	mov	r2,zero
 800c794:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800c798:	e0bffd17 	ldw	r2,-12(fp)
 800c79c:	10001026 	beq	r2,zero,800c7e0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800c7a0:	e0bffd17 	ldw	r2,-12(fp)
 800c7a4:	10800017 	ldw	r2,0(r2)
 800c7a8:	10800817 	ldw	r2,32(r2)
 800c7ac:	10000726 	beq	r2,zero,800c7cc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800c7b0:	e0bffd17 	ldw	r2,-12(fp)
 800c7b4:	10800017 	ldw	r2,0(r2)
 800c7b8:	10800817 	ldw	r2,32(r2)
 800c7bc:	e13ffd17 	ldw	r4,-12(fp)
 800c7c0:	e17fff17 	ldw	r5,-4(fp)
 800c7c4:	103ee83a 	callr	r2
 800c7c8:	00000a06 	br	800c7f4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800c7cc:	e0bfff17 	ldw	r2,-4(fp)
 800c7d0:	00c80004 	movi	r3,8192
 800c7d4:	10c00115 	stw	r3,4(r2)
      return 0;
 800c7d8:	0005883a 	mov	r2,zero
 800c7dc:	00000506 	br	800c7f4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800c7e0:	800c7080 	call	800c708 <alt_get_errno>
 800c7e4:	1007883a 	mov	r3,r2
 800c7e8:	00801444 	movi	r2,81
 800c7ec:	18800015 	stw	r2,0(r3)
    return -1;
 800c7f0:	00bfffc4 	movi	r2,-1
  }
}
 800c7f4:	e037883a 	mov	sp,fp
 800c7f8:	dfc00117 	ldw	ra,4(sp)
 800c7fc:	df000017 	ldw	fp,0(sp)
 800c800:	dec00204 	addi	sp,sp,8
 800c804:	f800283a 	ret

0800c808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c808:	defffe04 	addi	sp,sp,-8
 800c80c:	dfc00115 	stw	ra,4(sp)
 800c810:	df000015 	stw	fp,0(sp)
 800c814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c818:	00820074 	movhi	r2,2049
 800c81c:	10841c04 	addi	r2,r2,4208
 800c820:	10800017 	ldw	r2,0(r2)
 800c824:	10000526 	beq	r2,zero,800c83c <alt_get_errno+0x34>
 800c828:	00820074 	movhi	r2,2049
 800c82c:	10841c04 	addi	r2,r2,4208
 800c830:	10800017 	ldw	r2,0(r2)
 800c834:	103ee83a 	callr	r2
 800c838:	00000206 	br	800c844 <alt_get_errno+0x3c>
 800c83c:	00820074 	movhi	r2,2049
 800c840:	108aed04 	addi	r2,r2,11188
}
 800c844:	e037883a 	mov	sp,fp
 800c848:	dfc00117 	ldw	ra,4(sp)
 800c84c:	df000017 	ldw	fp,0(sp)
 800c850:	dec00204 	addi	sp,sp,8
 800c854:	f800283a 	ret

0800c858 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800c858:	deffed04 	addi	sp,sp,-76
 800c85c:	dfc01215 	stw	ra,72(sp)
 800c860:	df001115 	stw	fp,68(sp)
 800c864:	df001104 	addi	fp,sp,68
 800c868:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800c86c:	e0bfff17 	ldw	r2,-4(fp)
 800c870:	10000616 	blt	r2,zero,800c88c <isatty+0x34>
 800c874:	e0bfff17 	ldw	r2,-4(fp)
 800c878:	10c00324 	muli	r3,r2,12
 800c87c:	00820074 	movhi	r2,2049
 800c880:	10bf8e04 	addi	r2,r2,-456
 800c884:	1885883a 	add	r2,r3,r2
 800c888:	00000106 	br	800c890 <isatty+0x38>
 800c88c:	0005883a 	mov	r2,zero
 800c890:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800c894:	e0bfef17 	ldw	r2,-68(fp)
 800c898:	10000e26 	beq	r2,zero,800c8d4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800c89c:	e0bfef17 	ldw	r2,-68(fp)
 800c8a0:	10800017 	ldw	r2,0(r2)
 800c8a4:	10800817 	ldw	r2,32(r2)
 800c8a8:	1000021e 	bne	r2,zero,800c8b4 <isatty+0x5c>
    {
      return 1;
 800c8ac:	00800044 	movi	r2,1
 800c8b0:	00000d06 	br	800c8e8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800c8b4:	e0bff004 	addi	r2,fp,-64
 800c8b8:	e13fff17 	ldw	r4,-4(fp)
 800c8bc:	100b883a 	mov	r5,r2
 800c8c0:	800c7580 	call	800c758 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800c8c4:	e0bff117 	ldw	r2,-60(fp)
 800c8c8:	10880020 	cmpeqi	r2,r2,8192
 800c8cc:	10803fcc 	andi	r2,r2,255
 800c8d0:	00000506 	br	800c8e8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800c8d4:	800c8080 	call	800c808 <alt_get_errno>
 800c8d8:	1007883a 	mov	r3,r2
 800c8dc:	00801444 	movi	r2,81
 800c8e0:	18800015 	stw	r2,0(r3)
    return 0;
 800c8e4:	0005883a 	mov	r2,zero
  }
}
 800c8e8:	e037883a 	mov	sp,fp
 800c8ec:	dfc00117 	ldw	ra,4(sp)
 800c8f0:	df000017 	ldw	fp,0(sp)
 800c8f4:	dec00204 	addi	sp,sp,8
 800c8f8:	f800283a 	ret

0800c8fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800c8fc:	defffc04 	addi	sp,sp,-16
 800c900:	df000315 	stw	fp,12(sp)
 800c904:	df000304 	addi	fp,sp,12
 800c908:	e13ffd15 	stw	r4,-12(fp)
 800c90c:	e17ffe15 	stw	r5,-8(fp)
 800c910:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800c914:	e0fffe17 	ldw	r3,-8(fp)
 800c918:	e0bffd17 	ldw	r2,-12(fp)
 800c91c:	18800c26 	beq	r3,r2,800c950 <alt_load_section+0x54>
  {
    while( to != end )
 800c920:	00000806 	br	800c944 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800c924:	e0bffe17 	ldw	r2,-8(fp)
 800c928:	10c00104 	addi	r3,r2,4
 800c92c:	e0fffe15 	stw	r3,-8(fp)
 800c930:	e0fffd17 	ldw	r3,-12(fp)
 800c934:	19000104 	addi	r4,r3,4
 800c938:	e13ffd15 	stw	r4,-12(fp)
 800c93c:	18c00017 	ldw	r3,0(r3)
 800c940:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800c944:	e0fffe17 	ldw	r3,-8(fp)
 800c948:	e0bfff17 	ldw	r2,-4(fp)
 800c94c:	18bff51e 	bne	r3,r2,800c924 <__alt_data_end+0xfc00c924>
    {
      *to++ = *from++;
    }
  }
}
 800c950:	e037883a 	mov	sp,fp
 800c954:	df000017 	ldw	fp,0(sp)
 800c958:	dec00104 	addi	sp,sp,4
 800c95c:	f800283a 	ret

0800c960 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800c960:	defffe04 	addi	sp,sp,-8
 800c964:	dfc00115 	stw	ra,4(sp)
 800c968:	df000015 	stw	fp,0(sp)
 800c96c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800c970:	01020074 	movhi	r4,2049
 800c974:	21042104 	addi	r4,r4,4228
 800c978:	01420074 	movhi	r5,2049
 800c97c:	297d5b04 	addi	r5,r5,-2708
 800c980:	01820074 	movhi	r6,2049
 800c984:	31842104 	addi	r6,r6,4228
 800c988:	800c8fc0 	call	800c8fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800c98c:	01020034 	movhi	r4,2048
 800c990:	21000804 	addi	r4,r4,32
 800c994:	01420034 	movhi	r5,2048
 800c998:	29400804 	addi	r5,r5,32
 800c99c:	01820034 	movhi	r6,2048
 800c9a0:	31806f04 	addi	r6,r6,444
 800c9a4:	800c8fc0 	call	800c8fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800c9a8:	01020074 	movhi	r4,2049
 800c9ac:	213c9504 	addi	r4,r4,-3500
 800c9b0:	01420074 	movhi	r5,2049
 800c9b4:	297c9504 	addi	r5,r5,-3500
 800c9b8:	01820074 	movhi	r6,2049
 800c9bc:	31bd5b04 	addi	r6,r6,-2708
 800c9c0:	800c8fc0 	call	800c8fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800c9c4:	800e19c0 	call	800e19c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800c9c8:	800e3f40 	call	800e3f4 <alt_icache_flush_all>
}
 800c9cc:	e037883a 	mov	sp,fp
 800c9d0:	dfc00117 	ldw	ra,4(sp)
 800c9d4:	df000017 	ldw	fp,0(sp)
 800c9d8:	dec00204 	addi	sp,sp,8
 800c9dc:	f800283a 	ret

0800c9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c9e0:	defffe04 	addi	sp,sp,-8
 800c9e4:	dfc00115 	stw	ra,4(sp)
 800c9e8:	df000015 	stw	fp,0(sp)
 800c9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c9f0:	00820074 	movhi	r2,2049
 800c9f4:	10841c04 	addi	r2,r2,4208
 800c9f8:	10800017 	ldw	r2,0(r2)
 800c9fc:	10000526 	beq	r2,zero,800ca14 <alt_get_errno+0x34>
 800ca00:	00820074 	movhi	r2,2049
 800ca04:	10841c04 	addi	r2,r2,4208
 800ca08:	10800017 	ldw	r2,0(r2)
 800ca0c:	103ee83a 	callr	r2
 800ca10:	00000206 	br	800ca1c <alt_get_errno+0x3c>
 800ca14:	00820074 	movhi	r2,2049
 800ca18:	108aed04 	addi	r2,r2,11188
}
 800ca1c:	e037883a 	mov	sp,fp
 800ca20:	dfc00117 	ldw	ra,4(sp)
 800ca24:	df000017 	ldw	fp,0(sp)
 800ca28:	dec00204 	addi	sp,sp,8
 800ca2c:	f800283a 	ret

0800ca30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800ca30:	defff904 	addi	sp,sp,-28
 800ca34:	dfc00615 	stw	ra,24(sp)
 800ca38:	df000515 	stw	fp,20(sp)
 800ca3c:	df000504 	addi	fp,sp,20
 800ca40:	e13ffd15 	stw	r4,-12(fp)
 800ca44:	e17ffe15 	stw	r5,-8(fp)
 800ca48:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800ca4c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ca50:	e0bffd17 	ldw	r2,-12(fp)
 800ca54:	10000616 	blt	r2,zero,800ca70 <lseek+0x40>
 800ca58:	e0bffd17 	ldw	r2,-12(fp)
 800ca5c:	10c00324 	muli	r3,r2,12
 800ca60:	00820074 	movhi	r2,2049
 800ca64:	10bf8e04 	addi	r2,r2,-456
 800ca68:	1885883a 	add	r2,r3,r2
 800ca6c:	00000106 	br	800ca74 <lseek+0x44>
 800ca70:	0005883a 	mov	r2,zero
 800ca74:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800ca78:	e0bffc17 	ldw	r2,-16(fp)
 800ca7c:	10001026 	beq	r2,zero,800cac0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800ca80:	e0bffc17 	ldw	r2,-16(fp)
 800ca84:	10800017 	ldw	r2,0(r2)
 800ca88:	10800717 	ldw	r2,28(r2)
 800ca8c:	10000926 	beq	r2,zero,800cab4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800ca90:	e0bffc17 	ldw	r2,-16(fp)
 800ca94:	10800017 	ldw	r2,0(r2)
 800ca98:	10800717 	ldw	r2,28(r2)
 800ca9c:	e13ffc17 	ldw	r4,-16(fp)
 800caa0:	e17ffe17 	ldw	r5,-8(fp)
 800caa4:	e1bfff17 	ldw	r6,-4(fp)
 800caa8:	103ee83a 	callr	r2
 800caac:	e0bffb15 	stw	r2,-20(fp)
 800cab0:	00000506 	br	800cac8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800cab4:	00bfde84 	movi	r2,-134
 800cab8:	e0bffb15 	stw	r2,-20(fp)
 800cabc:	00000206 	br	800cac8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800cac0:	00bfebc4 	movi	r2,-81
 800cac4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800cac8:	e0bffb17 	ldw	r2,-20(fp)
 800cacc:	1000070e 	bge	r2,zero,800caec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800cad0:	800c9e00 	call	800c9e0 <alt_get_errno>
 800cad4:	1007883a 	mov	r3,r2
 800cad8:	e0bffb17 	ldw	r2,-20(fp)
 800cadc:	0085c83a 	sub	r2,zero,r2
 800cae0:	18800015 	stw	r2,0(r3)
    rc = -1;
 800cae4:	00bfffc4 	movi	r2,-1
 800cae8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800caec:	e0bffb17 	ldw	r2,-20(fp)
}
 800caf0:	e037883a 	mov	sp,fp
 800caf4:	dfc00117 	ldw	ra,4(sp)
 800caf8:	df000017 	ldw	fp,0(sp)
 800cafc:	dec00204 	addi	sp,sp,8
 800cb00:	f800283a 	ret

0800cb04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800cb04:	defffd04 	addi	sp,sp,-12
 800cb08:	dfc00215 	stw	ra,8(sp)
 800cb0c:	df000115 	stw	fp,4(sp)
 800cb10:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800cb14:	0009883a 	mov	r4,zero
 800cb18:	800cf980 	call	800cf98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800cb1c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800cb20:	800cfcc0 	call	800cfcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800cb24:	01020074 	movhi	r4,2049
 800cb28:	213d4b04 	addi	r4,r4,-2772
 800cb2c:	01420074 	movhi	r5,2049
 800cb30:	297d4b04 	addi	r5,r5,-2772
 800cb34:	01820074 	movhi	r6,2049
 800cb38:	31bd4b04 	addi	r6,r6,-2772
 800cb3c:	800e7b40 	call	800e7b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800cb40:	800e2ac0 	call	800e2ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800cb44:	01020074 	movhi	r4,2049
 800cb48:	2138c204 	addi	r4,r4,-7416
 800cb4c:	800eeb00 	call	800eeb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800cb50:	d126dd17 	ldw	r4,-25740(gp)
 800cb54:	d0e6de17 	ldw	r3,-25736(gp)
 800cb58:	d0a6df17 	ldw	r2,-25732(gp)
 800cb5c:	180b883a 	mov	r5,r3
 800cb60:	100d883a 	mov	r6,r2
 800cb64:	80002f40 	call	80002f4 <main>
 800cb68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800cb6c:	01000044 	movi	r4,1
 800cb70:	800c60c0 	call	800c60c <close>
  exit (result);
 800cb74:	e13fff17 	ldw	r4,-4(fp)
 800cb78:	800eec40 	call	800eec4 <exit>

0800cb7c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800cb7c:	defffe04 	addi	sp,sp,-8
 800cb80:	df000115 	stw	fp,4(sp)
 800cb84:	df000104 	addi	fp,sp,4
 800cb88:	e13fff15 	stw	r4,-4(fp)
}
 800cb8c:	e037883a 	mov	sp,fp
 800cb90:	df000017 	ldw	fp,0(sp)
 800cb94:	dec00104 	addi	sp,sp,4
 800cb98:	f800283a 	ret

0800cb9c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800cb9c:	defffe04 	addi	sp,sp,-8
 800cba0:	df000115 	stw	fp,4(sp)
 800cba4:	df000104 	addi	fp,sp,4
 800cba8:	e13fff15 	stw	r4,-4(fp)
}
 800cbac:	e037883a 	mov	sp,fp
 800cbb0:	df000017 	ldw	fp,0(sp)
 800cbb4:	dec00104 	addi	sp,sp,4
 800cbb8:	f800283a 	ret

0800cbbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cbbc:	defffe04 	addi	sp,sp,-8
 800cbc0:	dfc00115 	stw	ra,4(sp)
 800cbc4:	df000015 	stw	fp,0(sp)
 800cbc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cbcc:	00820074 	movhi	r2,2049
 800cbd0:	10841c04 	addi	r2,r2,4208
 800cbd4:	10800017 	ldw	r2,0(r2)
 800cbd8:	10000526 	beq	r2,zero,800cbf0 <alt_get_errno+0x34>
 800cbdc:	00820074 	movhi	r2,2049
 800cbe0:	10841c04 	addi	r2,r2,4208
 800cbe4:	10800017 	ldw	r2,0(r2)
 800cbe8:	103ee83a 	callr	r2
 800cbec:	00000206 	br	800cbf8 <alt_get_errno+0x3c>
 800cbf0:	00820074 	movhi	r2,2049
 800cbf4:	108aed04 	addi	r2,r2,11188
}
 800cbf8:	e037883a 	mov	sp,fp
 800cbfc:	dfc00117 	ldw	ra,4(sp)
 800cc00:	df000017 	ldw	fp,0(sp)
 800cc04:	dec00204 	addi	sp,sp,8
 800cc08:	f800283a 	ret

0800cc0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800cc0c:	defff904 	addi	sp,sp,-28
 800cc10:	dfc00615 	stw	ra,24(sp)
 800cc14:	df000515 	stw	fp,20(sp)
 800cc18:	df000504 	addi	fp,sp,20
 800cc1c:	e13ffd15 	stw	r4,-12(fp)
 800cc20:	e17ffe15 	stw	r5,-8(fp)
 800cc24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cc28:	e0bffd17 	ldw	r2,-12(fp)
 800cc2c:	10000616 	blt	r2,zero,800cc48 <read+0x3c>
 800cc30:	e0bffd17 	ldw	r2,-12(fp)
 800cc34:	10c00324 	muli	r3,r2,12
 800cc38:	00820074 	movhi	r2,2049
 800cc3c:	10bf8e04 	addi	r2,r2,-456
 800cc40:	1885883a 	add	r2,r3,r2
 800cc44:	00000106 	br	800cc4c <read+0x40>
 800cc48:	0005883a 	mov	r2,zero
 800cc4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800cc50:	e0bffb17 	ldw	r2,-20(fp)
 800cc54:	10002226 	beq	r2,zero,800cce0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800cc58:	e0bffb17 	ldw	r2,-20(fp)
 800cc5c:	10800217 	ldw	r2,8(r2)
 800cc60:	108000cc 	andi	r2,r2,3
 800cc64:	10800060 	cmpeqi	r2,r2,1
 800cc68:	1000181e 	bne	r2,zero,800cccc <read+0xc0>
        (fd->dev->read))
 800cc6c:	e0bffb17 	ldw	r2,-20(fp)
 800cc70:	10800017 	ldw	r2,0(r2)
 800cc74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800cc78:	10001426 	beq	r2,zero,800cccc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800cc7c:	e0bffb17 	ldw	r2,-20(fp)
 800cc80:	10800017 	ldw	r2,0(r2)
 800cc84:	10800517 	ldw	r2,20(r2)
 800cc88:	e0ffff17 	ldw	r3,-4(fp)
 800cc8c:	e13ffb17 	ldw	r4,-20(fp)
 800cc90:	e17ffe17 	ldw	r5,-8(fp)
 800cc94:	180d883a 	mov	r6,r3
 800cc98:	103ee83a 	callr	r2
 800cc9c:	e0bffc15 	stw	r2,-16(fp)
 800cca0:	e0bffc17 	ldw	r2,-16(fp)
 800cca4:	1000070e 	bge	r2,zero,800ccc4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800cca8:	800cbbc0 	call	800cbbc <alt_get_errno>
 800ccac:	1007883a 	mov	r3,r2
 800ccb0:	e0bffc17 	ldw	r2,-16(fp)
 800ccb4:	0085c83a 	sub	r2,zero,r2
 800ccb8:	18800015 	stw	r2,0(r3)
          return -1;
 800ccbc:	00bfffc4 	movi	r2,-1
 800ccc0:	00000c06 	br	800ccf4 <read+0xe8>
        }
        return rval;
 800ccc4:	e0bffc17 	ldw	r2,-16(fp)
 800ccc8:	00000a06 	br	800ccf4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800cccc:	800cbbc0 	call	800cbbc <alt_get_errno>
 800ccd0:	1007883a 	mov	r3,r2
 800ccd4:	00800344 	movi	r2,13
 800ccd8:	18800015 	stw	r2,0(r3)
 800ccdc:	00000406 	br	800ccf0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800cce0:	800cbbc0 	call	800cbbc <alt_get_errno>
 800cce4:	1007883a 	mov	r3,r2
 800cce8:	00801444 	movi	r2,81
 800ccec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ccf0:	00bfffc4 	movi	r2,-1
}
 800ccf4:	e037883a 	mov	sp,fp
 800ccf8:	dfc00117 	ldw	ra,4(sp)
 800ccfc:	df000017 	ldw	fp,0(sp)
 800cd00:	dec00204 	addi	sp,sp,8
 800cd04:	f800283a 	ret

0800cd08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800cd08:	defffe04 	addi	sp,sp,-8
 800cd0c:	df000115 	stw	fp,4(sp)
 800cd10:	df000104 	addi	fp,sp,4
 800cd14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800cd18:	e0bfff17 	ldw	r2,-4(fp)
 800cd1c:	108000d0 	cmplti	r2,r2,3
 800cd20:	10000d1e 	bne	r2,zero,800cd58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800cd24:	00820074 	movhi	r2,2049
 800cd28:	10bf8e04 	addi	r2,r2,-456
 800cd2c:	e0ffff17 	ldw	r3,-4(fp)
 800cd30:	18c00324 	muli	r3,r3,12
 800cd34:	10c5883a 	add	r2,r2,r3
 800cd38:	10800204 	addi	r2,r2,8
 800cd3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800cd40:	00820074 	movhi	r2,2049
 800cd44:	10bf8e04 	addi	r2,r2,-456
 800cd48:	e0ffff17 	ldw	r3,-4(fp)
 800cd4c:	18c00324 	muli	r3,r3,12
 800cd50:	10c5883a 	add	r2,r2,r3
 800cd54:	10000015 	stw	zero,0(r2)
  }
}
 800cd58:	e037883a 	mov	sp,fp
 800cd5c:	df000017 	ldw	fp,0(sp)
 800cd60:	dec00104 	addi	sp,sp,4
 800cd64:	f800283a 	ret

0800cd68 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800cd68:	defff904 	addi	sp,sp,-28
 800cd6c:	df000615 	stw	fp,24(sp)
 800cd70:	df000604 	addi	fp,sp,24
 800cd74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cd78:	0005303a 	rdctl	r2,status
 800cd7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cd80:	e0fffc17 	ldw	r3,-16(fp)
 800cd84:	00bfff84 	movi	r2,-2
 800cd88:	1884703a 	and	r2,r3,r2
 800cd8c:	1001703a 	wrctl	status,r2
  
  return context;
 800cd90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800cd94:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800cd98:	d0a00c17 	ldw	r2,-32720(gp)
 800cd9c:	10c000c4 	addi	r3,r2,3
 800cda0:	00bfff04 	movi	r2,-4
 800cda4:	1884703a 	and	r2,r3,r2
 800cda8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800cdac:	d0e00c17 	ldw	r3,-32720(gp)
 800cdb0:	e0bfff17 	ldw	r2,-4(fp)
 800cdb4:	1887883a 	add	r3,r3,r2
 800cdb8:	00830034 	movhi	r2,3072
 800cdbc:	10800004 	addi	r2,r2,0
 800cdc0:	10c0062e 	bgeu	r2,r3,800cddc <sbrk+0x74>
 800cdc4:	e0bffa17 	ldw	r2,-24(fp)
 800cdc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cdcc:	e0bffd17 	ldw	r2,-12(fp)
 800cdd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800cdd4:	00bfffc4 	movi	r2,-1
 800cdd8:	00000b06 	br	800ce08 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800cddc:	d0a00c17 	ldw	r2,-32720(gp)
 800cde0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800cde4:	d0e00c17 	ldw	r3,-32720(gp)
 800cde8:	e0bfff17 	ldw	r2,-4(fp)
 800cdec:	1885883a 	add	r2,r3,r2
 800cdf0:	d0a00c15 	stw	r2,-32720(gp)
 800cdf4:	e0bffa17 	ldw	r2,-24(fp)
 800cdf8:	e0bffe15 	stw	r2,-8(fp)
 800cdfc:	e0bffe17 	ldw	r2,-8(fp)
 800ce00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ce04:	e0bffb17 	ldw	r2,-20(fp)
} 
 800ce08:	e037883a 	mov	sp,fp
 800ce0c:	df000017 	ldw	fp,0(sp)
 800ce10:	dec00104 	addi	sp,sp,4
 800ce14:	f800283a 	ret

0800ce18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ce18:	defffe04 	addi	sp,sp,-8
 800ce1c:	dfc00115 	stw	ra,4(sp)
 800ce20:	df000015 	stw	fp,0(sp)
 800ce24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ce28:	00820074 	movhi	r2,2049
 800ce2c:	10841c04 	addi	r2,r2,4208
 800ce30:	10800017 	ldw	r2,0(r2)
 800ce34:	10000526 	beq	r2,zero,800ce4c <alt_get_errno+0x34>
 800ce38:	00820074 	movhi	r2,2049
 800ce3c:	10841c04 	addi	r2,r2,4208
 800ce40:	10800017 	ldw	r2,0(r2)
 800ce44:	103ee83a 	callr	r2
 800ce48:	00000206 	br	800ce54 <alt_get_errno+0x3c>
 800ce4c:	00820074 	movhi	r2,2049
 800ce50:	108aed04 	addi	r2,r2,11188
}
 800ce54:	e037883a 	mov	sp,fp
 800ce58:	dfc00117 	ldw	ra,4(sp)
 800ce5c:	df000017 	ldw	fp,0(sp)
 800ce60:	dec00204 	addi	sp,sp,8
 800ce64:	f800283a 	ret

0800ce68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ce68:	defff904 	addi	sp,sp,-28
 800ce6c:	dfc00615 	stw	ra,24(sp)
 800ce70:	df000515 	stw	fp,20(sp)
 800ce74:	df000504 	addi	fp,sp,20
 800ce78:	e13ffd15 	stw	r4,-12(fp)
 800ce7c:	e17ffe15 	stw	r5,-8(fp)
 800ce80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ce84:	e0bffd17 	ldw	r2,-12(fp)
 800ce88:	10000616 	blt	r2,zero,800cea4 <write+0x3c>
 800ce8c:	e0bffd17 	ldw	r2,-12(fp)
 800ce90:	10c00324 	muli	r3,r2,12
 800ce94:	00820074 	movhi	r2,2049
 800ce98:	10bf8e04 	addi	r2,r2,-456
 800ce9c:	1885883a 	add	r2,r3,r2
 800cea0:	00000106 	br	800cea8 <write+0x40>
 800cea4:	0005883a 	mov	r2,zero
 800cea8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ceac:	e0bffb17 	ldw	r2,-20(fp)
 800ceb0:	10002126 	beq	r2,zero,800cf38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800ceb4:	e0bffb17 	ldw	r2,-20(fp)
 800ceb8:	10800217 	ldw	r2,8(r2)
 800cebc:	108000cc 	andi	r2,r2,3
 800cec0:	10001826 	beq	r2,zero,800cf24 <write+0xbc>
 800cec4:	e0bffb17 	ldw	r2,-20(fp)
 800cec8:	10800017 	ldw	r2,0(r2)
 800cecc:	10800617 	ldw	r2,24(r2)
 800ced0:	10001426 	beq	r2,zero,800cf24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ced4:	e0bffb17 	ldw	r2,-20(fp)
 800ced8:	10800017 	ldw	r2,0(r2)
 800cedc:	10800617 	ldw	r2,24(r2)
 800cee0:	e0ffff17 	ldw	r3,-4(fp)
 800cee4:	e13ffb17 	ldw	r4,-20(fp)
 800cee8:	e17ffe17 	ldw	r5,-8(fp)
 800ceec:	180d883a 	mov	r6,r3
 800cef0:	103ee83a 	callr	r2
 800cef4:	e0bffc15 	stw	r2,-16(fp)
 800cef8:	e0bffc17 	ldw	r2,-16(fp)
 800cefc:	1000070e 	bge	r2,zero,800cf1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800cf00:	800ce180 	call	800ce18 <alt_get_errno>
 800cf04:	1007883a 	mov	r3,r2
 800cf08:	e0bffc17 	ldw	r2,-16(fp)
 800cf0c:	0085c83a 	sub	r2,zero,r2
 800cf10:	18800015 	stw	r2,0(r3)
        return -1;
 800cf14:	00bfffc4 	movi	r2,-1
 800cf18:	00000c06 	br	800cf4c <write+0xe4>
      }
      return rval;
 800cf1c:	e0bffc17 	ldw	r2,-16(fp)
 800cf20:	00000a06 	br	800cf4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800cf24:	800ce180 	call	800ce18 <alt_get_errno>
 800cf28:	1007883a 	mov	r3,r2
 800cf2c:	00800344 	movi	r2,13
 800cf30:	18800015 	stw	r2,0(r3)
 800cf34:	00000406 	br	800cf48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800cf38:	800ce180 	call	800ce18 <alt_get_errno>
 800cf3c:	1007883a 	mov	r3,r2
 800cf40:	00801444 	movi	r2,81
 800cf44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800cf48:	00bfffc4 	movi	r2,-1
}
 800cf4c:	e037883a 	mov	sp,fp
 800cf50:	dfc00117 	ldw	ra,4(sp)
 800cf54:	df000017 	ldw	fp,0(sp)
 800cf58:	dec00204 	addi	sp,sp,8
 800cf5c:	f800283a 	ret

0800cf60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800cf60:	defffd04 	addi	sp,sp,-12
 800cf64:	dfc00215 	stw	ra,8(sp)
 800cf68:	df000115 	stw	fp,4(sp)
 800cf6c:	df000104 	addi	fp,sp,4
 800cf70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800cf74:	e13fff17 	ldw	r4,-4(fp)
 800cf78:	01420074 	movhi	r5,2049
 800cf7c:	29441904 	addi	r5,r5,4196
 800cf80:	800e2080 	call	800e208 <alt_dev_llist_insert>
}
 800cf84:	e037883a 	mov	sp,fp
 800cf88:	dfc00117 	ldw	ra,4(sp)
 800cf8c:	df000017 	ldw	fp,0(sp)
 800cf90:	dec00204 	addi	sp,sp,8
 800cf94:	f800283a 	ret

0800cf98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800cf98:	defffd04 	addi	sp,sp,-12
 800cf9c:	dfc00215 	stw	ra,8(sp)
 800cfa0:	df000115 	stw	fp,4(sp)
 800cfa4:	df000104 	addi	fp,sp,4
 800cfa8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800cfac:	800ec3c0 	call	800ec3c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800cfb0:	00800044 	movi	r2,1
 800cfb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800cfb8:	e037883a 	mov	sp,fp
 800cfbc:	dfc00117 	ldw	ra,4(sp)
 800cfc0:	df000017 	ldw	fp,0(sp)
 800cfc4:	dec00204 	addi	sp,sp,8
 800cfc8:	f800283a 	ret

0800cfcc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800cfcc:	defffe04 	addi	sp,sp,-8
 800cfd0:	dfc00115 	stw	ra,4(sp)
 800cfd4:	df000015 	stw	fp,0(sp)
 800cfd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800cfdc:	01082004 	movi	r4,8320
 800cfe0:	000b883a 	mov	r5,zero
 800cfe4:	01800104 	movi	r6,4
 800cfe8:	01c0fa04 	movi	r7,1000
 800cfec:	800dafc0 	call	800dafc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800cff0:	01020074 	movhi	r4,2049
 800cff4:	213ff804 	addi	r4,r4,-32
 800cff8:	000b883a 	mov	r5,zero
 800cffc:	01800144 	movi	r6,5
 800d000:	800d1a00 	call	800d1a0 <altera_avalon_jtag_uart_init>
 800d004:	01020074 	movhi	r4,2049
 800d008:	213fee04 	addi	r4,r4,-72
 800d00c:	800cf600 	call	800cf60 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800d010:	01020074 	movhi	r4,2049
 800d014:	21040604 	addi	r4,r4,4120
 800d018:	800dc340 	call	800dc34 <alt_up_character_lcd_init>
 800d01c:	01020074 	movhi	r4,2049
 800d020:	21040604 	addi	r4,r4,4120
 800d024:	800cf600 	call	800cf60 <alt_dev_reg>
}
 800d028:	e037883a 	mov	sp,fp
 800d02c:	dfc00117 	ldw	ra,4(sp)
 800d030:	df000017 	ldw	fp,0(sp)
 800d034:	dec00204 	addi	sp,sp,8
 800d038:	f800283a 	ret

0800d03c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d03c:	defffa04 	addi	sp,sp,-24
 800d040:	dfc00515 	stw	ra,20(sp)
 800d044:	df000415 	stw	fp,16(sp)
 800d048:	df000404 	addi	fp,sp,16
 800d04c:	e13ffd15 	stw	r4,-12(fp)
 800d050:	e17ffe15 	stw	r5,-8(fp)
 800d054:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d058:	e0bffd17 	ldw	r2,-12(fp)
 800d05c:	10800017 	ldw	r2,0(r2)
 800d060:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800d064:	e0bffc17 	ldw	r2,-16(fp)
 800d068:	10c00a04 	addi	r3,r2,40
 800d06c:	e0bffd17 	ldw	r2,-12(fp)
 800d070:	10800217 	ldw	r2,8(r2)
 800d074:	1809883a 	mov	r4,r3
 800d078:	e17ffe17 	ldw	r5,-8(fp)
 800d07c:	e1bfff17 	ldw	r6,-4(fp)
 800d080:	100f883a 	mov	r7,r2
 800d084:	800d6640 	call	800d664 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800d088:	e037883a 	mov	sp,fp
 800d08c:	dfc00117 	ldw	ra,4(sp)
 800d090:	df000017 	ldw	fp,0(sp)
 800d094:	dec00204 	addi	sp,sp,8
 800d098:	f800283a 	ret

0800d09c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800d09c:	defffa04 	addi	sp,sp,-24
 800d0a0:	dfc00515 	stw	ra,20(sp)
 800d0a4:	df000415 	stw	fp,16(sp)
 800d0a8:	df000404 	addi	fp,sp,16
 800d0ac:	e13ffd15 	stw	r4,-12(fp)
 800d0b0:	e17ffe15 	stw	r5,-8(fp)
 800d0b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d0b8:	e0bffd17 	ldw	r2,-12(fp)
 800d0bc:	10800017 	ldw	r2,0(r2)
 800d0c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800d0c4:	e0bffc17 	ldw	r2,-16(fp)
 800d0c8:	10c00a04 	addi	r3,r2,40
 800d0cc:	e0bffd17 	ldw	r2,-12(fp)
 800d0d0:	10800217 	ldw	r2,8(r2)
 800d0d4:	1809883a 	mov	r4,r3
 800d0d8:	e17ffe17 	ldw	r5,-8(fp)
 800d0dc:	e1bfff17 	ldw	r6,-4(fp)
 800d0e0:	100f883a 	mov	r7,r2
 800d0e4:	800d8700 	call	800d870 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800d0e8:	e037883a 	mov	sp,fp
 800d0ec:	dfc00117 	ldw	ra,4(sp)
 800d0f0:	df000017 	ldw	fp,0(sp)
 800d0f4:	dec00204 	addi	sp,sp,8
 800d0f8:	f800283a 	ret

0800d0fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800d0fc:	defffc04 	addi	sp,sp,-16
 800d100:	dfc00315 	stw	ra,12(sp)
 800d104:	df000215 	stw	fp,8(sp)
 800d108:	df000204 	addi	fp,sp,8
 800d10c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d110:	e0bfff17 	ldw	r2,-4(fp)
 800d114:	10800017 	ldw	r2,0(r2)
 800d118:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800d11c:	e0bffe17 	ldw	r2,-8(fp)
 800d120:	10c00a04 	addi	r3,r2,40
 800d124:	e0bfff17 	ldw	r2,-4(fp)
 800d128:	10800217 	ldw	r2,8(r2)
 800d12c:	1809883a 	mov	r4,r3
 800d130:	100b883a 	mov	r5,r2
 800d134:	800d5100 	call	800d510 <altera_avalon_jtag_uart_close>
}
 800d138:	e037883a 	mov	sp,fp
 800d13c:	dfc00117 	ldw	ra,4(sp)
 800d140:	df000017 	ldw	fp,0(sp)
 800d144:	dec00204 	addi	sp,sp,8
 800d148:	f800283a 	ret

0800d14c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800d14c:	defffa04 	addi	sp,sp,-24
 800d150:	dfc00515 	stw	ra,20(sp)
 800d154:	df000415 	stw	fp,16(sp)
 800d158:	df000404 	addi	fp,sp,16
 800d15c:	e13ffd15 	stw	r4,-12(fp)
 800d160:	e17ffe15 	stw	r5,-8(fp)
 800d164:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800d168:	e0bffd17 	ldw	r2,-12(fp)
 800d16c:	10800017 	ldw	r2,0(r2)
 800d170:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800d174:	e0bffc17 	ldw	r2,-16(fp)
 800d178:	10800a04 	addi	r2,r2,40
 800d17c:	1009883a 	mov	r4,r2
 800d180:	e17ffe17 	ldw	r5,-8(fp)
 800d184:	e1bfff17 	ldw	r6,-4(fp)
 800d188:	800d5780 	call	800d578 <altera_avalon_jtag_uart_ioctl>
}
 800d18c:	e037883a 	mov	sp,fp
 800d190:	dfc00117 	ldw	ra,4(sp)
 800d194:	df000017 	ldw	fp,0(sp)
 800d198:	dec00204 	addi	sp,sp,8
 800d19c:	f800283a 	ret

0800d1a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800d1a0:	defffa04 	addi	sp,sp,-24
 800d1a4:	dfc00515 	stw	ra,20(sp)
 800d1a8:	df000415 	stw	fp,16(sp)
 800d1ac:	df000404 	addi	fp,sp,16
 800d1b0:	e13ffd15 	stw	r4,-12(fp)
 800d1b4:	e17ffe15 	stw	r5,-8(fp)
 800d1b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d1bc:	e0bffd17 	ldw	r2,-12(fp)
 800d1c0:	00c00044 	movi	r3,1
 800d1c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800d1c8:	e0bffd17 	ldw	r2,-12(fp)
 800d1cc:	10800017 	ldw	r2,0(r2)
 800d1d0:	10800104 	addi	r2,r2,4
 800d1d4:	1007883a 	mov	r3,r2
 800d1d8:	e0bffd17 	ldw	r2,-12(fp)
 800d1dc:	10800817 	ldw	r2,32(r2)
 800d1e0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800d1e4:	e0fffe17 	ldw	r3,-8(fp)
 800d1e8:	e0bfff17 	ldw	r2,-4(fp)
 800d1ec:	d8000015 	stw	zero,0(sp)
 800d1f0:	1809883a 	mov	r4,r3
 800d1f4:	100b883a 	mov	r5,r2
 800d1f8:	01820074 	movhi	r6,2049
 800d1fc:	31b49904 	addi	r6,r6,-11676
 800d200:	e1fffd17 	ldw	r7,-12(fp)
 800d204:	800e4240 	call	800e424 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800d208:	e0bffd17 	ldw	r2,-12(fp)
 800d20c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800d210:	e0bffd17 	ldw	r2,-12(fp)
 800d214:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800d218:	00820074 	movhi	r2,2049
 800d21c:	108af204 	addi	r2,r2,11208
 800d220:	10800017 	ldw	r2,0(r2)
 800d224:	1809883a 	mov	r4,r3
 800d228:	100b883a 	mov	r5,r2
 800d22c:	01820074 	movhi	r6,2049
 800d230:	31b51a04 	addi	r6,r6,-11160
 800d234:	e1fffd17 	ldw	r7,-12(fp)
 800d238:	800e05c0 	call	800e05c <alt_alarm_start>
 800d23c:	1000040e 	bge	r2,zero,800d250 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800d240:	e0fffd17 	ldw	r3,-12(fp)
 800d244:	00a00034 	movhi	r2,32768
 800d248:	10bfffc4 	addi	r2,r2,-1
 800d24c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800d250:	e037883a 	mov	sp,fp
 800d254:	dfc00117 	ldw	ra,4(sp)
 800d258:	df000017 	ldw	fp,0(sp)
 800d25c:	dec00204 	addi	sp,sp,8
 800d260:	f800283a 	ret

0800d264 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800d264:	defff804 	addi	sp,sp,-32
 800d268:	df000715 	stw	fp,28(sp)
 800d26c:	df000704 	addi	fp,sp,28
 800d270:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800d274:	e0bfff17 	ldw	r2,-4(fp)
 800d278:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800d27c:	e0bffb17 	ldw	r2,-20(fp)
 800d280:	10800017 	ldw	r2,0(r2)
 800d284:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d288:	e0bffc17 	ldw	r2,-16(fp)
 800d28c:	10800104 	addi	r2,r2,4
 800d290:	10800037 	ldwio	r2,0(r2)
 800d294:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800d298:	e0bffd17 	ldw	r2,-12(fp)
 800d29c:	1080c00c 	andi	r2,r2,768
 800d2a0:	1000011e 	bne	r2,zero,800d2a8 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800d2a4:	00006c06 	br	800d458 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800d2a8:	e0bffd17 	ldw	r2,-12(fp)
 800d2ac:	1080400c 	andi	r2,r2,256
 800d2b0:	10003426 	beq	r2,zero,800d384 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800d2b4:	00800074 	movhi	r2,1
 800d2b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d2bc:	e0bffb17 	ldw	r2,-20(fp)
 800d2c0:	10800a17 	ldw	r2,40(r2)
 800d2c4:	10800044 	addi	r2,r2,1
 800d2c8:	1081ffcc 	andi	r2,r2,2047
 800d2cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800d2d0:	e0bffb17 	ldw	r2,-20(fp)
 800d2d4:	10c00b17 	ldw	r3,44(r2)
 800d2d8:	e0bffe17 	ldw	r2,-8(fp)
 800d2dc:	1880011e 	bne	r3,r2,800d2e4 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800d2e0:	00001606 	br	800d33c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800d2e4:	e0bffc17 	ldw	r2,-16(fp)
 800d2e8:	10800037 	ldwio	r2,0(r2)
 800d2ec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800d2f0:	e0bff917 	ldw	r2,-28(fp)
 800d2f4:	10a0000c 	andi	r2,r2,32768
 800d2f8:	1000011e 	bne	r2,zero,800d300 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800d2fc:	00000f06 	br	800d33c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800d300:	e0bffb17 	ldw	r2,-20(fp)
 800d304:	10800a17 	ldw	r2,40(r2)
 800d308:	e0fff917 	ldw	r3,-28(fp)
 800d30c:	1809883a 	mov	r4,r3
 800d310:	e0fffb17 	ldw	r3,-20(fp)
 800d314:	1885883a 	add	r2,r3,r2
 800d318:	10800e04 	addi	r2,r2,56
 800d31c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d320:	e0bffb17 	ldw	r2,-20(fp)
 800d324:	10800a17 	ldw	r2,40(r2)
 800d328:	10800044 	addi	r2,r2,1
 800d32c:	10c1ffcc 	andi	r3,r2,2047
 800d330:	e0bffb17 	ldw	r2,-20(fp)
 800d334:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800d338:	003fe006 	br	800d2bc <__alt_data_end+0xfc00d2bc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800d33c:	e0bff917 	ldw	r2,-28(fp)
 800d340:	10bfffec 	andhi	r2,r2,65535
 800d344:	10000f26 	beq	r2,zero,800d384 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d348:	e0bffb17 	ldw	r2,-20(fp)
 800d34c:	10c00817 	ldw	r3,32(r2)
 800d350:	00bfff84 	movi	r2,-2
 800d354:	1886703a 	and	r3,r3,r2
 800d358:	e0bffb17 	ldw	r2,-20(fp)
 800d35c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800d360:	e0bffc17 	ldw	r2,-16(fp)
 800d364:	10800104 	addi	r2,r2,4
 800d368:	1007883a 	mov	r3,r2
 800d36c:	e0bffb17 	ldw	r2,-20(fp)
 800d370:	10800817 	ldw	r2,32(r2)
 800d374:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d378:	e0bffc17 	ldw	r2,-16(fp)
 800d37c:	10800104 	addi	r2,r2,4
 800d380:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800d384:	e0bffd17 	ldw	r2,-12(fp)
 800d388:	1080800c 	andi	r2,r2,512
 800d38c:	10003126 	beq	r2,zero,800d454 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800d390:	e0bffd17 	ldw	r2,-12(fp)
 800d394:	1004d43a 	srli	r2,r2,16
 800d398:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d39c:	00001406 	br	800d3f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800d3a0:	e0bffc17 	ldw	r2,-16(fp)
 800d3a4:	e0fffb17 	ldw	r3,-20(fp)
 800d3a8:	18c00d17 	ldw	r3,52(r3)
 800d3ac:	e13ffb17 	ldw	r4,-20(fp)
 800d3b0:	20c7883a 	add	r3,r4,r3
 800d3b4:	18c20e04 	addi	r3,r3,2104
 800d3b8:	18c00003 	ldbu	r3,0(r3)
 800d3bc:	18c03fcc 	andi	r3,r3,255
 800d3c0:	18c0201c 	xori	r3,r3,128
 800d3c4:	18ffe004 	addi	r3,r3,-128
 800d3c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d3cc:	e0bffb17 	ldw	r2,-20(fp)
 800d3d0:	10800d17 	ldw	r2,52(r2)
 800d3d4:	10800044 	addi	r2,r2,1
 800d3d8:	10c1ffcc 	andi	r3,r2,2047
 800d3dc:	e0bffb17 	ldw	r2,-20(fp)
 800d3e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800d3e4:	e0bffa17 	ldw	r2,-24(fp)
 800d3e8:	10bfffc4 	addi	r2,r2,-1
 800d3ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d3f0:	e0bffa17 	ldw	r2,-24(fp)
 800d3f4:	10000526 	beq	r2,zero,800d40c <altera_avalon_jtag_uart_irq+0x1a8>
 800d3f8:	e0bffb17 	ldw	r2,-20(fp)
 800d3fc:	10c00d17 	ldw	r3,52(r2)
 800d400:	e0bffb17 	ldw	r2,-20(fp)
 800d404:	10800c17 	ldw	r2,48(r2)
 800d408:	18bfe51e 	bne	r3,r2,800d3a0 <__alt_data_end+0xfc00d3a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800d40c:	e0bffa17 	ldw	r2,-24(fp)
 800d410:	10001026 	beq	r2,zero,800d454 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800d414:	e0bffb17 	ldw	r2,-20(fp)
 800d418:	10c00817 	ldw	r3,32(r2)
 800d41c:	00bfff44 	movi	r2,-3
 800d420:	1886703a 	and	r3,r3,r2
 800d424:	e0bffb17 	ldw	r2,-20(fp)
 800d428:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d42c:	e0bffb17 	ldw	r2,-20(fp)
 800d430:	10800017 	ldw	r2,0(r2)
 800d434:	10800104 	addi	r2,r2,4
 800d438:	1007883a 	mov	r3,r2
 800d43c:	e0bffb17 	ldw	r2,-20(fp)
 800d440:	10800817 	ldw	r2,32(r2)
 800d444:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d448:	e0bffc17 	ldw	r2,-16(fp)
 800d44c:	10800104 	addi	r2,r2,4
 800d450:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800d454:	003f8c06 	br	800d288 <__alt_data_end+0xfc00d288>
}
 800d458:	e037883a 	mov	sp,fp
 800d45c:	df000017 	ldw	fp,0(sp)
 800d460:	dec00104 	addi	sp,sp,4
 800d464:	f800283a 	ret

0800d468 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800d468:	defff804 	addi	sp,sp,-32
 800d46c:	df000715 	stw	fp,28(sp)
 800d470:	df000704 	addi	fp,sp,28
 800d474:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800d478:	e0bffb17 	ldw	r2,-20(fp)
 800d47c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800d480:	e0bff917 	ldw	r2,-28(fp)
 800d484:	10800017 	ldw	r2,0(r2)
 800d488:	10800104 	addi	r2,r2,4
 800d48c:	10800037 	ldwio	r2,0(r2)
 800d490:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800d494:	e0bffa17 	ldw	r2,-24(fp)
 800d498:	1081000c 	andi	r2,r2,1024
 800d49c:	10000b26 	beq	r2,zero,800d4cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800d4a0:	e0bff917 	ldw	r2,-28(fp)
 800d4a4:	10800017 	ldw	r2,0(r2)
 800d4a8:	10800104 	addi	r2,r2,4
 800d4ac:	1007883a 	mov	r3,r2
 800d4b0:	e0bff917 	ldw	r2,-28(fp)
 800d4b4:	10800817 	ldw	r2,32(r2)
 800d4b8:	10810014 	ori	r2,r2,1024
 800d4bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800d4c0:	e0bff917 	ldw	r2,-28(fp)
 800d4c4:	10000915 	stw	zero,36(r2)
 800d4c8:	00000a06 	br	800d4f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800d4cc:	e0bff917 	ldw	r2,-28(fp)
 800d4d0:	10c00917 	ldw	r3,36(r2)
 800d4d4:	00a00034 	movhi	r2,32768
 800d4d8:	10bfff04 	addi	r2,r2,-4
 800d4dc:	10c00536 	bltu	r2,r3,800d4f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800d4e0:	e0bff917 	ldw	r2,-28(fp)
 800d4e4:	10800917 	ldw	r2,36(r2)
 800d4e8:	10c00044 	addi	r3,r2,1
 800d4ec:	e0bff917 	ldw	r2,-28(fp)
 800d4f0:	10c00915 	stw	r3,36(r2)
 800d4f4:	00820074 	movhi	r2,2049
 800d4f8:	108af204 	addi	r2,r2,11208
 800d4fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800d500:	e037883a 	mov	sp,fp
 800d504:	df000017 	ldw	fp,0(sp)
 800d508:	dec00104 	addi	sp,sp,4
 800d50c:	f800283a 	ret

0800d510 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800d510:	defffd04 	addi	sp,sp,-12
 800d514:	df000215 	stw	fp,8(sp)
 800d518:	df000204 	addi	fp,sp,8
 800d51c:	e13ffe15 	stw	r4,-8(fp)
 800d520:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800d524:	00000506 	br	800d53c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800d528:	e0bfff17 	ldw	r2,-4(fp)
 800d52c:	1090000c 	andi	r2,r2,16384
 800d530:	10000226 	beq	r2,zero,800d53c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800d534:	00bffd44 	movi	r2,-11
 800d538:	00000b06 	br	800d568 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800d53c:	e0bffe17 	ldw	r2,-8(fp)
 800d540:	10c00d17 	ldw	r3,52(r2)
 800d544:	e0bffe17 	ldw	r2,-8(fp)
 800d548:	10800c17 	ldw	r2,48(r2)
 800d54c:	18800526 	beq	r3,r2,800d564 <altera_avalon_jtag_uart_close+0x54>
 800d550:	e0bffe17 	ldw	r2,-8(fp)
 800d554:	10c00917 	ldw	r3,36(r2)
 800d558:	e0bffe17 	ldw	r2,-8(fp)
 800d55c:	10800117 	ldw	r2,4(r2)
 800d560:	18bff136 	bltu	r3,r2,800d528 <__alt_data_end+0xfc00d528>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800d564:	0005883a 	mov	r2,zero
}
 800d568:	e037883a 	mov	sp,fp
 800d56c:	df000017 	ldw	fp,0(sp)
 800d570:	dec00104 	addi	sp,sp,4
 800d574:	f800283a 	ret

0800d578 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800d578:	defffa04 	addi	sp,sp,-24
 800d57c:	df000515 	stw	fp,20(sp)
 800d580:	df000504 	addi	fp,sp,20
 800d584:	e13ffd15 	stw	r4,-12(fp)
 800d588:	e17ffe15 	stw	r5,-8(fp)
 800d58c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800d590:	00bff9c4 	movi	r2,-25
 800d594:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800d598:	e0bffe17 	ldw	r2,-8(fp)
 800d59c:	10da8060 	cmpeqi	r3,r2,27137
 800d5a0:	1800031e 	bne	r3,zero,800d5b0 <altera_avalon_jtag_uart_ioctl+0x38>
 800d5a4:	109a80a0 	cmpeqi	r2,r2,27138
 800d5a8:	1000191e 	bne	r2,zero,800d610 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800d5ac:	00002806 	br	800d650 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800d5b0:	e0bffd17 	ldw	r2,-12(fp)
 800d5b4:	10c00117 	ldw	r3,4(r2)
 800d5b8:	00a00034 	movhi	r2,32768
 800d5bc:	10bfffc4 	addi	r2,r2,-1
 800d5c0:	18801226 	beq	r3,r2,800d60c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800d5c4:	e0bfff17 	ldw	r2,-4(fp)
 800d5c8:	10800017 	ldw	r2,0(r2)
 800d5cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800d5d0:	e0bffc17 	ldw	r2,-16(fp)
 800d5d4:	10800090 	cmplti	r2,r2,2
 800d5d8:	1000061e 	bne	r2,zero,800d5f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d5dc:	e0fffc17 	ldw	r3,-16(fp)
 800d5e0:	00a00034 	movhi	r2,32768
 800d5e4:	10bfffc4 	addi	r2,r2,-1
 800d5e8:	18800226 	beq	r3,r2,800d5f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d5ec:	e0bffc17 	ldw	r2,-16(fp)
 800d5f0:	00000206 	br	800d5fc <altera_avalon_jtag_uart_ioctl+0x84>
 800d5f4:	00a00034 	movhi	r2,32768
 800d5f8:	10bfff84 	addi	r2,r2,-2
 800d5fc:	e0fffd17 	ldw	r3,-12(fp)
 800d600:	18800115 	stw	r2,4(r3)
      rc = 0;
 800d604:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d608:	00001106 	br	800d650 <altera_avalon_jtag_uart_ioctl+0xd8>
 800d60c:	00001006 	br	800d650 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800d610:	e0bffd17 	ldw	r2,-12(fp)
 800d614:	10c00117 	ldw	r3,4(r2)
 800d618:	00a00034 	movhi	r2,32768
 800d61c:	10bfffc4 	addi	r2,r2,-1
 800d620:	18800a26 	beq	r3,r2,800d64c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800d624:	e0bffd17 	ldw	r2,-12(fp)
 800d628:	10c00917 	ldw	r3,36(r2)
 800d62c:	e0bffd17 	ldw	r2,-12(fp)
 800d630:	10800117 	ldw	r2,4(r2)
 800d634:	1885803a 	cmpltu	r2,r3,r2
 800d638:	10c03fcc 	andi	r3,r2,255
 800d63c:	e0bfff17 	ldw	r2,-4(fp)
 800d640:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800d644:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d648:	00000006 	br	800d64c <altera_avalon_jtag_uart_ioctl+0xd4>
 800d64c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800d650:	e0bffb17 	ldw	r2,-20(fp)
}
 800d654:	e037883a 	mov	sp,fp
 800d658:	df000017 	ldw	fp,0(sp)
 800d65c:	dec00104 	addi	sp,sp,4
 800d660:	f800283a 	ret

0800d664 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800d664:	defff304 	addi	sp,sp,-52
 800d668:	dfc00c15 	stw	ra,48(sp)
 800d66c:	df000b15 	stw	fp,44(sp)
 800d670:	df000b04 	addi	fp,sp,44
 800d674:	e13ffc15 	stw	r4,-16(fp)
 800d678:	e17ffd15 	stw	r5,-12(fp)
 800d67c:	e1bffe15 	stw	r6,-8(fp)
 800d680:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800d684:	e0bffd17 	ldw	r2,-12(fp)
 800d688:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d68c:	00004906 	br	800d7b4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800d690:	e0bffc17 	ldw	r2,-16(fp)
 800d694:	10800a17 	ldw	r2,40(r2)
 800d698:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800d69c:	e0bffc17 	ldw	r2,-16(fp)
 800d6a0:	10800b17 	ldw	r2,44(r2)
 800d6a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800d6a8:	e0fff717 	ldw	r3,-36(fp)
 800d6ac:	e0bff817 	ldw	r2,-32(fp)
 800d6b0:	18800536 	bltu	r3,r2,800d6c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800d6b4:	e0fff717 	ldw	r3,-36(fp)
 800d6b8:	e0bff817 	ldw	r2,-32(fp)
 800d6bc:	1885c83a 	sub	r2,r3,r2
 800d6c0:	e0bff615 	stw	r2,-40(fp)
 800d6c4:	00000406 	br	800d6d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800d6c8:	00c20004 	movi	r3,2048
 800d6cc:	e0bff817 	ldw	r2,-32(fp)
 800d6d0:	1885c83a 	sub	r2,r3,r2
 800d6d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800d6d8:	e0bff617 	ldw	r2,-40(fp)
 800d6dc:	1000011e 	bne	r2,zero,800d6e4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800d6e0:	00001d06 	br	800d758 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800d6e4:	e0fffe17 	ldw	r3,-8(fp)
 800d6e8:	e0bff617 	ldw	r2,-40(fp)
 800d6ec:	1880022e 	bgeu	r3,r2,800d6f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800d6f0:	e0bffe17 	ldw	r2,-8(fp)
 800d6f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800d6f8:	e0bff817 	ldw	r2,-32(fp)
 800d6fc:	10800e04 	addi	r2,r2,56
 800d700:	e0fffc17 	ldw	r3,-16(fp)
 800d704:	1885883a 	add	r2,r3,r2
 800d708:	e13ff517 	ldw	r4,-44(fp)
 800d70c:	100b883a 	mov	r5,r2
 800d710:	e1bff617 	ldw	r6,-40(fp)
 800d714:	80054ac0 	call	80054ac <memcpy>
      ptr   += n;
 800d718:	e0fff517 	ldw	r3,-44(fp)
 800d71c:	e0bff617 	ldw	r2,-40(fp)
 800d720:	1885883a 	add	r2,r3,r2
 800d724:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800d728:	e0fffe17 	ldw	r3,-8(fp)
 800d72c:	e0bff617 	ldw	r2,-40(fp)
 800d730:	1885c83a 	sub	r2,r3,r2
 800d734:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d738:	e0fff817 	ldw	r3,-32(fp)
 800d73c:	e0bff617 	ldw	r2,-40(fp)
 800d740:	1885883a 	add	r2,r3,r2
 800d744:	10c1ffcc 	andi	r3,r2,2047
 800d748:	e0bffc17 	ldw	r2,-16(fp)
 800d74c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800d750:	e0bffe17 	ldw	r2,-8(fp)
 800d754:	00bfce16 	blt	zero,r2,800d690 <__alt_data_end+0xfc00d690>

    /* If we read any data then return it */
    if (ptr != buffer)
 800d758:	e0fff517 	ldw	r3,-44(fp)
 800d75c:	e0bffd17 	ldw	r2,-12(fp)
 800d760:	18800126 	beq	r3,r2,800d768 <altera_avalon_jtag_uart_read+0x104>
      break;
 800d764:	00001506 	br	800d7bc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800d768:	e0bfff17 	ldw	r2,-4(fp)
 800d76c:	1090000c 	andi	r2,r2,16384
 800d770:	10000126 	beq	r2,zero,800d778 <altera_avalon_jtag_uart_read+0x114>
      break;
 800d774:	00001106 	br	800d7bc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800d778:	0001883a 	nop
 800d77c:	e0bffc17 	ldw	r2,-16(fp)
 800d780:	10c00a17 	ldw	r3,40(r2)
 800d784:	e0bff717 	ldw	r2,-36(fp)
 800d788:	1880051e 	bne	r3,r2,800d7a0 <altera_avalon_jtag_uart_read+0x13c>
 800d78c:	e0bffc17 	ldw	r2,-16(fp)
 800d790:	10c00917 	ldw	r3,36(r2)
 800d794:	e0bffc17 	ldw	r2,-16(fp)
 800d798:	10800117 	ldw	r2,4(r2)
 800d79c:	18bff736 	bltu	r3,r2,800d77c <__alt_data_end+0xfc00d77c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800d7a0:	e0bffc17 	ldw	r2,-16(fp)
 800d7a4:	10c00a17 	ldw	r3,40(r2)
 800d7a8:	e0bff717 	ldw	r2,-36(fp)
 800d7ac:	1880011e 	bne	r3,r2,800d7b4 <altera_avalon_jtag_uart_read+0x150>
      break;
 800d7b0:	00000206 	br	800d7bc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d7b4:	e0bffe17 	ldw	r2,-8(fp)
 800d7b8:	00bfb516 	blt	zero,r2,800d690 <__alt_data_end+0xfc00d690>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800d7bc:	e0fff517 	ldw	r3,-44(fp)
 800d7c0:	e0bffd17 	ldw	r2,-12(fp)
 800d7c4:	18801826 	beq	r3,r2,800d828 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d7c8:	0005303a 	rdctl	r2,status
 800d7cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d7d0:	e0fffa17 	ldw	r3,-24(fp)
 800d7d4:	00bfff84 	movi	r2,-2
 800d7d8:	1884703a 	and	r2,r3,r2
 800d7dc:	1001703a 	wrctl	status,r2
  
  return context;
 800d7e0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800d7e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d7e8:	e0bffc17 	ldw	r2,-16(fp)
 800d7ec:	10800817 	ldw	r2,32(r2)
 800d7f0:	10c00054 	ori	r3,r2,1
 800d7f4:	e0bffc17 	ldw	r2,-16(fp)
 800d7f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d7fc:	e0bffc17 	ldw	r2,-16(fp)
 800d800:	10800017 	ldw	r2,0(r2)
 800d804:	10800104 	addi	r2,r2,4
 800d808:	1007883a 	mov	r3,r2
 800d80c:	e0bffc17 	ldw	r2,-16(fp)
 800d810:	10800817 	ldw	r2,32(r2)
 800d814:	18800035 	stwio	r2,0(r3)
 800d818:	e0bff917 	ldw	r2,-28(fp)
 800d81c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d820:	e0bffb17 	ldw	r2,-20(fp)
 800d824:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800d828:	e0fff517 	ldw	r3,-44(fp)
 800d82c:	e0bffd17 	ldw	r2,-12(fp)
 800d830:	18800426 	beq	r3,r2,800d844 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800d834:	e0fff517 	ldw	r3,-44(fp)
 800d838:	e0bffd17 	ldw	r2,-12(fp)
 800d83c:	1885c83a 	sub	r2,r3,r2
 800d840:	00000606 	br	800d85c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800d844:	e0bfff17 	ldw	r2,-4(fp)
 800d848:	1090000c 	andi	r2,r2,16384
 800d84c:	10000226 	beq	r2,zero,800d858 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800d850:	00bffd44 	movi	r2,-11
 800d854:	00000106 	br	800d85c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800d858:	00bffec4 	movi	r2,-5
}
 800d85c:	e037883a 	mov	sp,fp
 800d860:	dfc00117 	ldw	ra,4(sp)
 800d864:	df000017 	ldw	fp,0(sp)
 800d868:	dec00204 	addi	sp,sp,8
 800d86c:	f800283a 	ret

0800d870 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800d870:	defff304 	addi	sp,sp,-52
 800d874:	dfc00c15 	stw	ra,48(sp)
 800d878:	df000b15 	stw	fp,44(sp)
 800d87c:	df000b04 	addi	fp,sp,44
 800d880:	e13ffc15 	stw	r4,-16(fp)
 800d884:	e17ffd15 	stw	r5,-12(fp)
 800d888:	e1bffe15 	stw	r6,-8(fp)
 800d88c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800d890:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800d894:	e0bffd17 	ldw	r2,-12(fp)
 800d898:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800d89c:	00003806 	br	800d980 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800d8a0:	e0bffc17 	ldw	r2,-16(fp)
 800d8a4:	10800c17 	ldw	r2,48(r2)
 800d8a8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800d8ac:	e0bffc17 	ldw	r2,-16(fp)
 800d8b0:	10800d17 	ldw	r2,52(r2)
 800d8b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800d8b8:	e0fff817 	ldw	r3,-32(fp)
 800d8bc:	e0bff517 	ldw	r2,-44(fp)
 800d8c0:	1880062e 	bgeu	r3,r2,800d8dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800d8c4:	e0fff517 	ldw	r3,-44(fp)
 800d8c8:	e0bff817 	ldw	r2,-32(fp)
 800d8cc:	1885c83a 	sub	r2,r3,r2
 800d8d0:	10bfffc4 	addi	r2,r2,-1
 800d8d4:	e0bff615 	stw	r2,-40(fp)
 800d8d8:	00000b06 	br	800d908 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800d8dc:	e0bff517 	ldw	r2,-44(fp)
 800d8e0:	10000526 	beq	r2,zero,800d8f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800d8e4:	00c20004 	movi	r3,2048
 800d8e8:	e0bff817 	ldw	r2,-32(fp)
 800d8ec:	1885c83a 	sub	r2,r3,r2
 800d8f0:	e0bff615 	stw	r2,-40(fp)
 800d8f4:	00000406 	br	800d908 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800d8f8:	00c1ffc4 	movi	r3,2047
 800d8fc:	e0bff817 	ldw	r2,-32(fp)
 800d900:	1885c83a 	sub	r2,r3,r2
 800d904:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800d908:	e0bff617 	ldw	r2,-40(fp)
 800d90c:	1000011e 	bne	r2,zero,800d914 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800d910:	00001d06 	br	800d988 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800d914:	e0fffe17 	ldw	r3,-8(fp)
 800d918:	e0bff617 	ldw	r2,-40(fp)
 800d91c:	1880022e 	bgeu	r3,r2,800d928 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800d920:	e0bffe17 	ldw	r2,-8(fp)
 800d924:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800d928:	e0bff817 	ldw	r2,-32(fp)
 800d92c:	10820e04 	addi	r2,r2,2104
 800d930:	e0fffc17 	ldw	r3,-16(fp)
 800d934:	1885883a 	add	r2,r3,r2
 800d938:	1009883a 	mov	r4,r2
 800d93c:	e17ffd17 	ldw	r5,-12(fp)
 800d940:	e1bff617 	ldw	r6,-40(fp)
 800d944:	80054ac0 	call	80054ac <memcpy>
      ptr   += n;
 800d948:	e0fffd17 	ldw	r3,-12(fp)
 800d94c:	e0bff617 	ldw	r2,-40(fp)
 800d950:	1885883a 	add	r2,r3,r2
 800d954:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800d958:	e0fffe17 	ldw	r3,-8(fp)
 800d95c:	e0bff617 	ldw	r2,-40(fp)
 800d960:	1885c83a 	sub	r2,r3,r2
 800d964:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d968:	e0fff817 	ldw	r3,-32(fp)
 800d96c:	e0bff617 	ldw	r2,-40(fp)
 800d970:	1885883a 	add	r2,r3,r2
 800d974:	10c1ffcc 	andi	r3,r2,2047
 800d978:	e0bffc17 	ldw	r2,-16(fp)
 800d97c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800d980:	e0bffe17 	ldw	r2,-8(fp)
 800d984:	00bfc616 	blt	zero,r2,800d8a0 <__alt_data_end+0xfc00d8a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d988:	0005303a 	rdctl	r2,status
 800d98c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d990:	e0fffa17 	ldw	r3,-24(fp)
 800d994:	00bfff84 	movi	r2,-2
 800d998:	1884703a 	and	r2,r3,r2
 800d99c:	1001703a 	wrctl	status,r2
  
  return context;
 800d9a0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800d9a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800d9a8:	e0bffc17 	ldw	r2,-16(fp)
 800d9ac:	10800817 	ldw	r2,32(r2)
 800d9b0:	10c00094 	ori	r3,r2,2
 800d9b4:	e0bffc17 	ldw	r2,-16(fp)
 800d9b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d9bc:	e0bffc17 	ldw	r2,-16(fp)
 800d9c0:	10800017 	ldw	r2,0(r2)
 800d9c4:	10800104 	addi	r2,r2,4
 800d9c8:	1007883a 	mov	r3,r2
 800d9cc:	e0bffc17 	ldw	r2,-16(fp)
 800d9d0:	10800817 	ldw	r2,32(r2)
 800d9d4:	18800035 	stwio	r2,0(r3)
 800d9d8:	e0bff917 	ldw	r2,-28(fp)
 800d9dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d9e0:	e0bffb17 	ldw	r2,-20(fp)
 800d9e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800d9e8:	e0bffe17 	ldw	r2,-8(fp)
 800d9ec:	0080120e 	bge	zero,r2,800da38 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800d9f0:	e0bfff17 	ldw	r2,-4(fp)
 800d9f4:	1090000c 	andi	r2,r2,16384
 800d9f8:	10000126 	beq	r2,zero,800da00 <altera_avalon_jtag_uart_write+0x190>
        break;
 800d9fc:	00001006 	br	800da40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800da00:	0001883a 	nop
 800da04:	e0bffc17 	ldw	r2,-16(fp)
 800da08:	10c00d17 	ldw	r3,52(r2)
 800da0c:	e0bff517 	ldw	r2,-44(fp)
 800da10:	1880051e 	bne	r3,r2,800da28 <altera_avalon_jtag_uart_write+0x1b8>
 800da14:	e0bffc17 	ldw	r2,-16(fp)
 800da18:	10c00917 	ldw	r3,36(r2)
 800da1c:	e0bffc17 	ldw	r2,-16(fp)
 800da20:	10800117 	ldw	r2,4(r2)
 800da24:	18bff736 	bltu	r3,r2,800da04 <__alt_data_end+0xfc00da04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800da28:	e0bffc17 	ldw	r2,-16(fp)
 800da2c:	10800917 	ldw	r2,36(r2)
 800da30:	10000126 	beq	r2,zero,800da38 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800da34:	00000206 	br	800da40 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800da38:	e0bffe17 	ldw	r2,-8(fp)
 800da3c:	00bf9716 	blt	zero,r2,800d89c <__alt_data_end+0xfc00d89c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800da40:	e0fffd17 	ldw	r3,-12(fp)
 800da44:	e0bff717 	ldw	r2,-36(fp)
 800da48:	18800426 	beq	r3,r2,800da5c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800da4c:	e0fffd17 	ldw	r3,-12(fp)
 800da50:	e0bff717 	ldw	r2,-36(fp)
 800da54:	1885c83a 	sub	r2,r3,r2
 800da58:	00000606 	br	800da74 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800da5c:	e0bfff17 	ldw	r2,-4(fp)
 800da60:	1090000c 	andi	r2,r2,16384
 800da64:	10000226 	beq	r2,zero,800da70 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800da68:	00bffd44 	movi	r2,-11
 800da6c:	00000106 	br	800da74 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800da70:	00bffec4 	movi	r2,-5
}
 800da74:	e037883a 	mov	sp,fp
 800da78:	dfc00117 	ldw	ra,4(sp)
 800da7c:	df000017 	ldw	fp,0(sp)
 800da80:	dec00204 	addi	sp,sp,8
 800da84:	f800283a 	ret

0800da88 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800da88:	defffa04 	addi	sp,sp,-24
 800da8c:	dfc00515 	stw	ra,20(sp)
 800da90:	df000415 	stw	fp,16(sp)
 800da94:	df000404 	addi	fp,sp,16
 800da98:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800da9c:	0007883a 	mov	r3,zero
 800daa0:	e0bfff17 	ldw	r2,-4(fp)
 800daa4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800daa8:	e0bfff17 	ldw	r2,-4(fp)
 800daac:	10800104 	addi	r2,r2,4
 800dab0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dab4:	0005303a 	rdctl	r2,status
 800dab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dabc:	e0fffd17 	ldw	r3,-12(fp)
 800dac0:	00bfff84 	movi	r2,-2
 800dac4:	1884703a 	and	r2,r3,r2
 800dac8:	1001703a 	wrctl	status,r2
  
  return context;
 800dacc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800dad0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800dad4:	800eb380 	call	800eb38 <alt_tick>
 800dad8:	e0bffc17 	ldw	r2,-16(fp)
 800dadc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dae0:	e0bffe17 	ldw	r2,-8(fp)
 800dae4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800dae8:	e037883a 	mov	sp,fp
 800daec:	dfc00117 	ldw	ra,4(sp)
 800daf0:	df000017 	ldw	fp,0(sp)
 800daf4:	dec00204 	addi	sp,sp,8
 800daf8:	f800283a 	ret

0800dafc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800dafc:	defff804 	addi	sp,sp,-32
 800db00:	dfc00715 	stw	ra,28(sp)
 800db04:	df000615 	stw	fp,24(sp)
 800db08:	df000604 	addi	fp,sp,24
 800db0c:	e13ffc15 	stw	r4,-16(fp)
 800db10:	e17ffd15 	stw	r5,-12(fp)
 800db14:	e1bffe15 	stw	r6,-8(fp)
 800db18:	e1ffff15 	stw	r7,-4(fp)
 800db1c:	e0bfff17 	ldw	r2,-4(fp)
 800db20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800db24:	00820074 	movhi	r2,2049
 800db28:	108af204 	addi	r2,r2,11208
 800db2c:	10800017 	ldw	r2,0(r2)
 800db30:	1000041e 	bne	r2,zero,800db44 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800db34:	00820074 	movhi	r2,2049
 800db38:	108af204 	addi	r2,r2,11208
 800db3c:	e0fffb17 	ldw	r3,-20(fp)
 800db40:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800db44:	e0bffc17 	ldw	r2,-16(fp)
 800db48:	10800104 	addi	r2,r2,4
 800db4c:	00c001c4 	movi	r3,7
 800db50:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800db54:	d8000015 	stw	zero,0(sp)
 800db58:	e13ffd17 	ldw	r4,-12(fp)
 800db5c:	e17ffe17 	ldw	r5,-8(fp)
 800db60:	01820074 	movhi	r6,2049
 800db64:	31b6a204 	addi	r6,r6,-9592
 800db68:	e1fffc17 	ldw	r7,-16(fp)
 800db6c:	800e4240 	call	800e424 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800db70:	e037883a 	mov	sp,fp
 800db74:	dfc00117 	ldw	ra,4(sp)
 800db78:	df000017 	ldw	fp,0(sp)
 800db7c:	dec00204 	addi	sp,sp,8
 800db80:	f800283a 	ret

0800db84 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800db84:	defffc04 	addi	sp,sp,-16
 800db88:	df000315 	stw	fp,12(sp)
 800db8c:	df000304 	addi	fp,sp,12
 800db90:	e13ffe15 	stw	r4,-8(fp)
 800db94:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800db98:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800db9c:	e0bfff17 	ldw	r2,-4(fp)
 800dba0:	1000061e 	bne	r2,zero,800dbbc <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800dba4:	e0bffe17 	ldw	r2,-8(fp)
 800dba8:	1007883a 	mov	r3,r2
 800dbac:	e0bffd03 	ldbu	r2,-12(fp)
 800dbb0:	1884b03a 	or	r2,r3,r2
 800dbb4:	e0bffd05 	stb	r2,-12(fp)
 800dbb8:	00000806 	br	800dbdc <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800dbbc:	e0bffe17 	ldw	r2,-8(fp)
 800dbc0:	1007883a 	mov	r3,r2
 800dbc4:	e0bffd03 	ldbu	r2,-12(fp)
 800dbc8:	1884b03a 	or	r2,r3,r2
 800dbcc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800dbd0:	e0bffd03 	ldbu	r2,-12(fp)
 800dbd4:	10801014 	ori	r2,r2,64
 800dbd8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800dbdc:	e0fffd03 	ldbu	r3,-12(fp)
 800dbe0:	00bfe004 	movi	r2,-128
 800dbe4:	1884b03a 	or	r2,r3,r2
}
 800dbe8:	e037883a 	mov	sp,fp
 800dbec:	df000017 	ldw	fp,0(sp)
 800dbf0:	dec00104 	addi	sp,sp,4
 800dbf4:	f800283a 	ret

0800dbf8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800dbf8:	defffd04 	addi	sp,sp,-12
 800dbfc:	df000215 	stw	fp,8(sp)
 800dc00:	df000204 	addi	fp,sp,8
 800dc04:	e13ffe15 	stw	r4,-8(fp)
 800dc08:	2805883a 	mov	r2,r5
 800dc0c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800dc10:	e0bffe17 	ldw	r2,-8(fp)
 800dc14:	10800a17 	ldw	r2,40(r2)
 800dc18:	1007883a 	mov	r3,r2
 800dc1c:	e0bfff03 	ldbu	r2,-4(fp)
 800dc20:	18800025 	stbio	r2,0(r3)
}
 800dc24:	e037883a 	mov	sp,fp
 800dc28:	df000017 	ldw	fp,0(sp)
 800dc2c:	dec00104 	addi	sp,sp,4
 800dc30:	f800283a 	ret

0800dc34 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800dc34:	defffe04 	addi	sp,sp,-8
 800dc38:	df000115 	stw	fp,4(sp)
 800dc3c:	df000104 	addi	fp,sp,4
 800dc40:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800dc44:	e0bfff17 	ldw	r2,-4(fp)
 800dc48:	10800a17 	ldw	r2,40(r2)
 800dc4c:	1007883a 	mov	r3,r2
 800dc50:	00800044 	movi	r2,1
 800dc54:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800dc58:	e037883a 	mov	sp,fp
 800dc5c:	df000017 	ldw	fp,0(sp)
 800dc60:	dec00104 	addi	sp,sp,4
 800dc64:	f800283a 	ret

0800dc68 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800dc68:	defffc04 	addi	sp,sp,-16
 800dc6c:	dfc00315 	stw	ra,12(sp)
 800dc70:	df000215 	stw	fp,8(sp)
 800dc74:	df000204 	addi	fp,sp,8
 800dc78:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800dc7c:	e13fff17 	ldw	r4,-4(fp)
 800dc80:	01420074 	movhi	r5,2049
 800dc84:	29441904 	addi	r5,r5,4196
 800dc88:	800e3640 	call	800e364 <alt_find_dev>
 800dc8c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800dc90:	e0bffe17 	ldw	r2,-8(fp)
}
 800dc94:	e037883a 	mov	sp,fp
 800dc98:	dfc00117 	ldw	ra,4(sp)
 800dc9c:	df000017 	ldw	fp,0(sp)
 800dca0:	dec00204 	addi	sp,sp,8
 800dca4:	f800283a 	ret

0800dca8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800dca8:	defffb04 	addi	sp,sp,-20
 800dcac:	df000415 	stw	fp,16(sp)
 800dcb0:	df000404 	addi	fp,sp,16
 800dcb4:	e13ffd15 	stw	r4,-12(fp)
 800dcb8:	e17ffe15 	stw	r5,-8(fp)
 800dcbc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800dcc0:	e03ffc15 	stw	zero,-16(fp)
 800dcc4:	00000f06 	br	800dd04 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800dcc8:	e0bffd17 	ldw	r2,-12(fp)
 800dccc:	10800a17 	ldw	r2,40(r2)
 800dcd0:	10800044 	addi	r2,r2,1
 800dcd4:	1009883a 	mov	r4,r2
 800dcd8:	e0fffe17 	ldw	r3,-8(fp)
 800dcdc:	e0bffc17 	ldw	r2,-16(fp)
 800dce0:	1885883a 	add	r2,r3,r2
 800dce4:	10800003 	ldbu	r2,0(r2)
 800dce8:	10803fcc 	andi	r2,r2,255
 800dcec:	1080201c 	xori	r2,r2,128
 800dcf0:	10bfe004 	addi	r2,r2,-128
 800dcf4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800dcf8:	e0bffc17 	ldw	r2,-16(fp)
 800dcfc:	10800044 	addi	r2,r2,1
 800dd00:	e0bffc15 	stw	r2,-16(fp)
 800dd04:	e0fffc17 	ldw	r3,-16(fp)
 800dd08:	e0bfff17 	ldw	r2,-4(fp)
 800dd0c:	18bfee36 	bltu	r3,r2,800dcc8 <__alt_data_end+0xfc00dcc8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800dd10:	e037883a 	mov	sp,fp
 800dd14:	df000017 	ldw	fp,0(sp)
 800dd18:	dec00104 	addi	sp,sp,4
 800dd1c:	f800283a 	ret

0800dd20 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800dd20:	defffd04 	addi	sp,sp,-12
 800dd24:	df000215 	stw	fp,8(sp)
 800dd28:	df000204 	addi	fp,sp,8
 800dd2c:	e13ffe15 	stw	r4,-8(fp)
 800dd30:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800dd34:	00000d06 	br	800dd6c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800dd38:	e0bffe17 	ldw	r2,-8(fp)
 800dd3c:	10800a17 	ldw	r2,40(r2)
 800dd40:	10800044 	addi	r2,r2,1
 800dd44:	1007883a 	mov	r3,r2
 800dd48:	e0bfff17 	ldw	r2,-4(fp)
 800dd4c:	10800003 	ldbu	r2,0(r2)
 800dd50:	10803fcc 	andi	r2,r2,255
 800dd54:	1080201c 	xori	r2,r2,128
 800dd58:	10bfe004 	addi	r2,r2,-128
 800dd5c:	18800025 	stbio	r2,0(r3)
		++ptr;
 800dd60:	e0bfff17 	ldw	r2,-4(fp)
 800dd64:	10800044 	addi	r2,r2,1
 800dd68:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800dd6c:	e0bfff17 	ldw	r2,-4(fp)
 800dd70:	10800003 	ldbu	r2,0(r2)
 800dd74:	10803fcc 	andi	r2,r2,255
 800dd78:	1080201c 	xori	r2,r2,128
 800dd7c:	10bfe004 	addi	r2,r2,-128
 800dd80:	103fed1e 	bne	r2,zero,800dd38 <__alt_data_end+0xfc00dd38>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800dd84:	e037883a 	mov	sp,fp
 800dd88:	df000017 	ldw	fp,0(sp)
 800dd8c:	dec00104 	addi	sp,sp,4
 800dd90:	f800283a 	ret

0800dd94 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800dd94:	defffb04 	addi	sp,sp,-20
 800dd98:	dfc00415 	stw	ra,16(sp)
 800dd9c:	df000315 	stw	fp,12(sp)
 800dda0:	df000304 	addi	fp,sp,12
 800dda4:	e13ffd15 	stw	r4,-12(fp)
 800dda8:	e17ffe15 	stw	r5,-8(fp)
 800ddac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800ddb0:	e0bffd17 	ldw	r2,-12(fp)
 800ddb4:	10c00017 	ldw	r3,0(r2)
 800ddb8:	e0bfff17 	ldw	r2,-4(fp)
 800ddbc:	1809883a 	mov	r4,r3
 800ddc0:	e17ffe17 	ldw	r5,-8(fp)
 800ddc4:	100d883a 	mov	r6,r2
 800ddc8:	800dca80 	call	800dca8 <alt_up_character_lcd_write>
	return 0;
 800ddcc:	0005883a 	mov	r2,zero
}
 800ddd0:	e037883a 	mov	sp,fp
 800ddd4:	dfc00117 	ldw	ra,4(sp)
 800ddd8:	df000017 	ldw	fp,0(sp)
 800dddc:	dec00204 	addi	sp,sp,8
 800dde0:	f800283a 	ret

0800dde4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800dde4:	defffa04 	addi	sp,sp,-24
 800dde8:	dfc00515 	stw	ra,20(sp)
 800ddec:	df000415 	stw	fp,16(sp)
 800ddf0:	df000404 	addi	fp,sp,16
 800ddf4:	e13ffd15 	stw	r4,-12(fp)
 800ddf8:	e17ffe15 	stw	r5,-8(fp)
 800ddfc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800de00:	e0bffe17 	ldw	r2,-8(fp)
 800de04:	10800a28 	cmpgeui	r2,r2,40
 800de08:	1000031e 	bne	r2,zero,800de18 <alt_up_character_lcd_set_cursor_pos+0x34>
 800de0c:	e0bfff17 	ldw	r2,-4(fp)
 800de10:	108000b0 	cmpltui	r2,r2,2
 800de14:	1000021e 	bne	r2,zero,800de20 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800de18:	00bfffc4 	movi	r2,-1
 800de1c:	00000906 	br	800de44 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800de20:	e13ffe17 	ldw	r4,-8(fp)
 800de24:	e17fff17 	ldw	r5,-4(fp)
 800de28:	800db840 	call	800db84 <get_DDRAM_addr>
 800de2c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800de30:	e0bffc03 	ldbu	r2,-16(fp)
 800de34:	e13ffd17 	ldw	r4,-12(fp)
 800de38:	100b883a 	mov	r5,r2
 800de3c:	800dbf80 	call	800dbf8 <alt_up_character_lcd_send_cmd>
	return 0;
 800de40:	0005883a 	mov	r2,zero
}
 800de44:	e037883a 	mov	sp,fp
 800de48:	dfc00117 	ldw	ra,4(sp)
 800de4c:	df000017 	ldw	fp,0(sp)
 800de50:	dec00204 	addi	sp,sp,8
 800de54:	f800283a 	ret

0800de58 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800de58:	defffb04 	addi	sp,sp,-20
 800de5c:	dfc00415 	stw	ra,16(sp)
 800de60:	df000315 	stw	fp,12(sp)
 800de64:	df000304 	addi	fp,sp,12
 800de68:	e13ffe15 	stw	r4,-8(fp)
 800de6c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800de70:	e0bfff17 	ldw	r2,-4(fp)
 800de74:	1000011e 	bne	r2,zero,800de7c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800de78:	00001406 	br	800decc <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800de7c:	e0bfff17 	ldw	r2,-4(fp)
 800de80:	0080020e 	bge	zero,r2,800de8c <alt_up_character_lcd_shift_cursor+0x34>
 800de84:	00800504 	movi	r2,20
 800de88:	00000106 	br	800de90 <alt_up_character_lcd_shift_cursor+0x38>
 800de8c:	00800404 	movi	r2,16
 800de90:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800de94:	e0bfff17 	ldw	r2,-4(fp)
 800de98:	1000010e 	bge	r2,zero,800dea0 <alt_up_character_lcd_shift_cursor+0x48>
 800de9c:	0085c83a 	sub	r2,zero,r2
 800dea0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800dea4:	00000406 	br	800deb8 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800dea8:	e0bffd43 	ldbu	r2,-11(fp)
 800deac:	e13ffe17 	ldw	r4,-8(fp)
 800deb0:	100b883a 	mov	r5,r2
 800deb4:	800dbf80 	call	800dbf8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800deb8:	e0bffd03 	ldbu	r2,-12(fp)
 800debc:	10ffffc4 	addi	r3,r2,-1
 800dec0:	e0fffd05 	stb	r3,-12(fp)
 800dec4:	10803fcc 	andi	r2,r2,255
 800dec8:	103ff71e 	bne	r2,zero,800dea8 <__alt_data_end+0xfc00dea8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800decc:	e037883a 	mov	sp,fp
 800ded0:	dfc00117 	ldw	ra,4(sp)
 800ded4:	df000017 	ldw	fp,0(sp)
 800ded8:	dec00204 	addi	sp,sp,8
 800dedc:	f800283a 	ret

0800dee0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800dee0:	defffb04 	addi	sp,sp,-20
 800dee4:	dfc00415 	stw	ra,16(sp)
 800dee8:	df000315 	stw	fp,12(sp)
 800deec:	df000304 	addi	fp,sp,12
 800def0:	e13ffe15 	stw	r4,-8(fp)
 800def4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800def8:	e0bfff17 	ldw	r2,-4(fp)
 800defc:	1000011e 	bne	r2,zero,800df04 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800df00:	00001406 	br	800df54 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800df04:	e0bfff17 	ldw	r2,-4(fp)
 800df08:	0080020e 	bge	zero,r2,800df14 <alt_up_character_lcd_shift_display+0x34>
 800df0c:	00800704 	movi	r2,28
 800df10:	00000106 	br	800df18 <alt_up_character_lcd_shift_display+0x38>
 800df14:	00800604 	movi	r2,24
 800df18:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800df1c:	e0bfff17 	ldw	r2,-4(fp)
 800df20:	1000010e 	bge	r2,zero,800df28 <alt_up_character_lcd_shift_display+0x48>
 800df24:	0085c83a 	sub	r2,zero,r2
 800df28:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800df2c:	00000406 	br	800df40 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800df30:	e0bffd43 	ldbu	r2,-11(fp)
 800df34:	e13ffe17 	ldw	r4,-8(fp)
 800df38:	100b883a 	mov	r5,r2
 800df3c:	800dbf80 	call	800dbf8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800df40:	e0bffd03 	ldbu	r2,-12(fp)
 800df44:	10ffffc4 	addi	r3,r2,-1
 800df48:	e0fffd05 	stb	r3,-12(fp)
 800df4c:	10803fcc 	andi	r2,r2,255
 800df50:	103ff71e 	bne	r2,zero,800df30 <__alt_data_end+0xfc00df30>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800df54:	e037883a 	mov	sp,fp
 800df58:	dfc00117 	ldw	ra,4(sp)
 800df5c:	df000017 	ldw	fp,0(sp)
 800df60:	dec00204 	addi	sp,sp,8
 800df64:	f800283a 	ret

0800df68 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800df68:	defffa04 	addi	sp,sp,-24
 800df6c:	dfc00515 	stw	ra,20(sp)
 800df70:	df000415 	stw	fp,16(sp)
 800df74:	df000404 	addi	fp,sp,16
 800df78:	e13ffd15 	stw	r4,-12(fp)
 800df7c:	e17ffe15 	stw	r5,-8(fp)
 800df80:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800df84:	e0bffe17 	ldw	r2,-8(fp)
 800df88:	10800a28 	cmpgeui	r2,r2,40
 800df8c:	1000031e 	bne	r2,zero,800df9c <alt_up_character_lcd_erase_pos+0x34>
 800df90:	e0bfff17 	ldw	r2,-4(fp)
 800df94:	108000b0 	cmpltui	r2,r2,2
 800df98:	1000021e 	bne	r2,zero,800dfa4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800df9c:	00bfffc4 	movi	r2,-1
 800dfa0:	00000f06 	br	800dfe0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800dfa4:	e13ffe17 	ldw	r4,-8(fp)
 800dfa8:	e17fff17 	ldw	r5,-4(fp)
 800dfac:	800db840 	call	800db84 <get_DDRAM_addr>
 800dfb0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800dfb4:	e0bffc03 	ldbu	r2,-16(fp)
 800dfb8:	e13ffd17 	ldw	r4,-12(fp)
 800dfbc:	100b883a 	mov	r5,r2
 800dfc0:	800dbf80 	call	800dbf8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800dfc4:	e0bffd17 	ldw	r2,-12(fp)
 800dfc8:	10800a17 	ldw	r2,40(r2)
 800dfcc:	10800044 	addi	r2,r2,1
 800dfd0:	1007883a 	mov	r3,r2
 800dfd4:	00800084 	movi	r2,2
 800dfd8:	18800025 	stbio	r2,0(r3)
	return 0;
 800dfdc:	0005883a 	mov	r2,zero
}
 800dfe0:	e037883a 	mov	sp,fp
 800dfe4:	dfc00117 	ldw	ra,4(sp)
 800dfe8:	df000017 	ldw	fp,0(sp)
 800dfec:	dec00204 	addi	sp,sp,8
 800dff0:	f800283a 	ret

0800dff4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800dff4:	defffd04 	addi	sp,sp,-12
 800dff8:	dfc00215 	stw	ra,8(sp)
 800dffc:	df000115 	stw	fp,4(sp)
 800e000:	df000104 	addi	fp,sp,4
 800e004:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800e008:	e13fff17 	ldw	r4,-4(fp)
 800e00c:	01400304 	movi	r5,12
 800e010:	800dbf80 	call	800dbf8 <alt_up_character_lcd_send_cmd>
}
 800e014:	e037883a 	mov	sp,fp
 800e018:	dfc00117 	ldw	ra,4(sp)
 800e01c:	df000017 	ldw	fp,0(sp)
 800e020:	dec00204 	addi	sp,sp,8
 800e024:	f800283a 	ret

0800e028 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800e028:	defffd04 	addi	sp,sp,-12
 800e02c:	dfc00215 	stw	ra,8(sp)
 800e030:	df000115 	stw	fp,4(sp)
 800e034:	df000104 	addi	fp,sp,4
 800e038:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800e03c:	e13fff17 	ldw	r4,-4(fp)
 800e040:	014003c4 	movi	r5,15
 800e044:	800dbf80 	call	800dbf8 <alt_up_character_lcd_send_cmd>
}
 800e048:	e037883a 	mov	sp,fp
 800e04c:	dfc00117 	ldw	ra,4(sp)
 800e050:	df000017 	ldw	fp,0(sp)
 800e054:	dec00204 	addi	sp,sp,8
 800e058:	f800283a 	ret

0800e05c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e05c:	defff504 	addi	sp,sp,-44
 800e060:	df000a15 	stw	fp,40(sp)
 800e064:	df000a04 	addi	fp,sp,40
 800e068:	e13ffc15 	stw	r4,-16(fp)
 800e06c:	e17ffd15 	stw	r5,-12(fp)
 800e070:	e1bffe15 	stw	r6,-8(fp)
 800e074:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e078:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e07c:	00820074 	movhi	r2,2049
 800e080:	108af204 	addi	r2,r2,11208
 800e084:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800e088:	10003f26 	beq	r2,zero,800e188 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800e08c:	e0bffc17 	ldw	r2,-16(fp)
 800e090:	10003b26 	beq	r2,zero,800e180 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800e094:	e0bffc17 	ldw	r2,-16(fp)
 800e098:	e0fffe17 	ldw	r3,-8(fp)
 800e09c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800e0a0:	e0bffc17 	ldw	r2,-16(fp)
 800e0a4:	e0ffff17 	ldw	r3,-4(fp)
 800e0a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e0ac:	0005303a 	rdctl	r2,status
 800e0b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e0b4:	e0fff817 	ldw	r3,-32(fp)
 800e0b8:	00bfff84 	movi	r2,-2
 800e0bc:	1884703a 	and	r2,r3,r2
 800e0c0:	1001703a 	wrctl	status,r2
  
  return context;
 800e0c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800e0c8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e0cc:	00820074 	movhi	r2,2049
 800e0d0:	108af304 	addi	r2,r2,11212
 800e0d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800e0d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800e0dc:	e0fffd17 	ldw	r3,-12(fp)
 800e0e0:	e0bff617 	ldw	r2,-40(fp)
 800e0e4:	1885883a 	add	r2,r3,r2
 800e0e8:	10c00044 	addi	r3,r2,1
 800e0ec:	e0bffc17 	ldw	r2,-16(fp)
 800e0f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800e0f4:	e0bffc17 	ldw	r2,-16(fp)
 800e0f8:	10c00217 	ldw	r3,8(r2)
 800e0fc:	e0bff617 	ldw	r2,-40(fp)
 800e100:	1880042e 	bgeu	r3,r2,800e114 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800e104:	e0bffc17 	ldw	r2,-16(fp)
 800e108:	00c00044 	movi	r3,1
 800e10c:	10c00405 	stb	r3,16(r2)
 800e110:	00000206 	br	800e11c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800e114:	e0bffc17 	ldw	r2,-16(fp)
 800e118:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800e11c:	e0fffc17 	ldw	r3,-16(fp)
 800e120:	00820074 	movhi	r2,2049
 800e124:	10841f04 	addi	r2,r2,4220
 800e128:	e0bff915 	stw	r2,-28(fp)
 800e12c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e130:	e0bffa17 	ldw	r2,-24(fp)
 800e134:	e0fff917 	ldw	r3,-28(fp)
 800e138:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e13c:	e0bff917 	ldw	r2,-28(fp)
 800e140:	10c00017 	ldw	r3,0(r2)
 800e144:	e0bffa17 	ldw	r2,-24(fp)
 800e148:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e14c:	e0bff917 	ldw	r2,-28(fp)
 800e150:	10800017 	ldw	r2,0(r2)
 800e154:	e0fffa17 	ldw	r3,-24(fp)
 800e158:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e15c:	e0bff917 	ldw	r2,-28(fp)
 800e160:	e0fffa17 	ldw	r3,-24(fp)
 800e164:	10c00015 	stw	r3,0(r2)
 800e168:	e0bff717 	ldw	r2,-36(fp)
 800e16c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e170:	e0bffb17 	ldw	r2,-20(fp)
 800e174:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800e178:	0005883a 	mov	r2,zero
 800e17c:	00000306 	br	800e18c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800e180:	00bffa84 	movi	r2,-22
 800e184:	00000106 	br	800e18c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800e188:	00bfde84 	movi	r2,-134
  }
}
 800e18c:	e037883a 	mov	sp,fp
 800e190:	df000017 	ldw	fp,0(sp)
 800e194:	dec00104 	addi	sp,sp,4
 800e198:	f800283a 	ret

0800e19c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800e19c:	deffff04 	addi	sp,sp,-4
 800e1a0:	df000015 	stw	fp,0(sp)
 800e1a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800e1a8:	e037883a 	mov	sp,fp
 800e1ac:	df000017 	ldw	fp,0(sp)
 800e1b0:	dec00104 	addi	sp,sp,4
 800e1b4:	f800283a 	ret

0800e1b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e1b8:	defffe04 	addi	sp,sp,-8
 800e1bc:	dfc00115 	stw	ra,4(sp)
 800e1c0:	df000015 	stw	fp,0(sp)
 800e1c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e1c8:	00820074 	movhi	r2,2049
 800e1cc:	10841c04 	addi	r2,r2,4208
 800e1d0:	10800017 	ldw	r2,0(r2)
 800e1d4:	10000526 	beq	r2,zero,800e1ec <alt_get_errno+0x34>
 800e1d8:	00820074 	movhi	r2,2049
 800e1dc:	10841c04 	addi	r2,r2,4208
 800e1e0:	10800017 	ldw	r2,0(r2)
 800e1e4:	103ee83a 	callr	r2
 800e1e8:	00000206 	br	800e1f4 <alt_get_errno+0x3c>
 800e1ec:	00820074 	movhi	r2,2049
 800e1f0:	108aed04 	addi	r2,r2,11188
}
 800e1f4:	e037883a 	mov	sp,fp
 800e1f8:	dfc00117 	ldw	ra,4(sp)
 800e1fc:	df000017 	ldw	fp,0(sp)
 800e200:	dec00204 	addi	sp,sp,8
 800e204:	f800283a 	ret

0800e208 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800e208:	defffa04 	addi	sp,sp,-24
 800e20c:	dfc00515 	stw	ra,20(sp)
 800e210:	df000415 	stw	fp,16(sp)
 800e214:	df000404 	addi	fp,sp,16
 800e218:	e13ffe15 	stw	r4,-8(fp)
 800e21c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800e220:	e0bffe17 	ldw	r2,-8(fp)
 800e224:	10000326 	beq	r2,zero,800e234 <alt_dev_llist_insert+0x2c>
 800e228:	e0bffe17 	ldw	r2,-8(fp)
 800e22c:	10800217 	ldw	r2,8(r2)
 800e230:	1000061e 	bne	r2,zero,800e24c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800e234:	800e1b80 	call	800e1b8 <alt_get_errno>
 800e238:	1007883a 	mov	r3,r2
 800e23c:	00800584 	movi	r2,22
 800e240:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800e244:	00bffa84 	movi	r2,-22
 800e248:	00001306 	br	800e298 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800e24c:	e0bffe17 	ldw	r2,-8(fp)
 800e250:	e0ffff17 	ldw	r3,-4(fp)
 800e254:	e0fffc15 	stw	r3,-16(fp)
 800e258:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e25c:	e0bffd17 	ldw	r2,-12(fp)
 800e260:	e0fffc17 	ldw	r3,-16(fp)
 800e264:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e268:	e0bffc17 	ldw	r2,-16(fp)
 800e26c:	10c00017 	ldw	r3,0(r2)
 800e270:	e0bffd17 	ldw	r2,-12(fp)
 800e274:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e278:	e0bffc17 	ldw	r2,-16(fp)
 800e27c:	10800017 	ldw	r2,0(r2)
 800e280:	e0fffd17 	ldw	r3,-12(fp)
 800e284:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e288:	e0bffc17 	ldw	r2,-16(fp)
 800e28c:	e0fffd17 	ldw	r3,-12(fp)
 800e290:	10c00015 	stw	r3,0(r2)

  return 0;  
 800e294:	0005883a 	mov	r2,zero
}
 800e298:	e037883a 	mov	sp,fp
 800e29c:	dfc00117 	ldw	ra,4(sp)
 800e2a0:	df000017 	ldw	fp,0(sp)
 800e2a4:	dec00204 	addi	sp,sp,8
 800e2a8:	f800283a 	ret

0800e2ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800e2ac:	defffd04 	addi	sp,sp,-12
 800e2b0:	dfc00215 	stw	ra,8(sp)
 800e2b4:	df000115 	stw	fp,4(sp)
 800e2b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e2bc:	00820074 	movhi	r2,2049
 800e2c0:	10bc9404 	addi	r2,r2,-3504
 800e2c4:	e0bfff15 	stw	r2,-4(fp)
 800e2c8:	00000606 	br	800e2e4 <_do_ctors+0x38>
        (*ctor) (); 
 800e2cc:	e0bfff17 	ldw	r2,-4(fp)
 800e2d0:	10800017 	ldw	r2,0(r2)
 800e2d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e2d8:	e0bfff17 	ldw	r2,-4(fp)
 800e2dc:	10bfff04 	addi	r2,r2,-4
 800e2e0:	e0bfff15 	stw	r2,-4(fp)
 800e2e4:	e0ffff17 	ldw	r3,-4(fp)
 800e2e8:	00820074 	movhi	r2,2049
 800e2ec:	10bc9504 	addi	r2,r2,-3500
 800e2f0:	18bff62e 	bgeu	r3,r2,800e2cc <__alt_data_end+0xfc00e2cc>
        (*ctor) (); 
}
 800e2f4:	e037883a 	mov	sp,fp
 800e2f8:	dfc00117 	ldw	ra,4(sp)
 800e2fc:	df000017 	ldw	fp,0(sp)
 800e300:	dec00204 	addi	sp,sp,8
 800e304:	f800283a 	ret

0800e308 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800e308:	defffd04 	addi	sp,sp,-12
 800e30c:	dfc00215 	stw	ra,8(sp)
 800e310:	df000115 	stw	fp,4(sp)
 800e314:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e318:	00820074 	movhi	r2,2049
 800e31c:	10bc9404 	addi	r2,r2,-3504
 800e320:	e0bfff15 	stw	r2,-4(fp)
 800e324:	00000606 	br	800e340 <_do_dtors+0x38>
        (*dtor) (); 
 800e328:	e0bfff17 	ldw	r2,-4(fp)
 800e32c:	10800017 	ldw	r2,0(r2)
 800e330:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e334:	e0bfff17 	ldw	r2,-4(fp)
 800e338:	10bfff04 	addi	r2,r2,-4
 800e33c:	e0bfff15 	stw	r2,-4(fp)
 800e340:	e0ffff17 	ldw	r3,-4(fp)
 800e344:	00820074 	movhi	r2,2049
 800e348:	10bc9504 	addi	r2,r2,-3500
 800e34c:	18bff62e 	bgeu	r3,r2,800e328 <__alt_data_end+0xfc00e328>
        (*dtor) (); 
}
 800e350:	e037883a 	mov	sp,fp
 800e354:	dfc00117 	ldw	ra,4(sp)
 800e358:	df000017 	ldw	fp,0(sp)
 800e35c:	dec00204 	addi	sp,sp,8
 800e360:	f800283a 	ret

0800e364 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800e364:	defffa04 	addi	sp,sp,-24
 800e368:	dfc00515 	stw	ra,20(sp)
 800e36c:	df000415 	stw	fp,16(sp)
 800e370:	df000404 	addi	fp,sp,16
 800e374:	e13ffe15 	stw	r4,-8(fp)
 800e378:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800e37c:	e0bfff17 	ldw	r2,-4(fp)
 800e380:	10800017 	ldw	r2,0(r2)
 800e384:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800e388:	e13ffe17 	ldw	r4,-8(fp)
 800e38c:	800693c0 	call	800693c <strlen>
 800e390:	10800044 	addi	r2,r2,1
 800e394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e398:	00000d06 	br	800e3d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800e39c:	e0bffc17 	ldw	r2,-16(fp)
 800e3a0:	10c00217 	ldw	r3,8(r2)
 800e3a4:	e0bffd17 	ldw	r2,-12(fp)
 800e3a8:	1809883a 	mov	r4,r3
 800e3ac:	e17ffe17 	ldw	r5,-8(fp)
 800e3b0:	100d883a 	mov	r6,r2
 800e3b4:	800eefc0 	call	800eefc <memcmp>
 800e3b8:	1000021e 	bne	r2,zero,800e3c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800e3bc:	e0bffc17 	ldw	r2,-16(fp)
 800e3c0:	00000706 	br	800e3e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800e3c4:	e0bffc17 	ldw	r2,-16(fp)
 800e3c8:	10800017 	ldw	r2,0(r2)
 800e3cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e3d0:	e0fffc17 	ldw	r3,-16(fp)
 800e3d4:	e0bfff17 	ldw	r2,-4(fp)
 800e3d8:	18bff01e 	bne	r3,r2,800e39c <__alt_data_end+0xfc00e39c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800e3dc:	0005883a 	mov	r2,zero
}
 800e3e0:	e037883a 	mov	sp,fp
 800e3e4:	dfc00117 	ldw	ra,4(sp)
 800e3e8:	df000017 	ldw	fp,0(sp)
 800e3ec:	dec00204 	addi	sp,sp,8
 800e3f0:	f800283a 	ret

0800e3f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800e3f4:	defffe04 	addi	sp,sp,-8
 800e3f8:	dfc00115 	stw	ra,4(sp)
 800e3fc:	df000015 	stw	fp,0(sp)
 800e400:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800e404:	0009883a 	mov	r4,zero
 800e408:	01440004 	movi	r5,4096
 800e40c:	800ee240 	call	800ee24 <alt_icache_flush>
#endif
}
 800e410:	e037883a 	mov	sp,fp
 800e414:	dfc00117 	ldw	ra,4(sp)
 800e418:	df000017 	ldw	fp,0(sp)
 800e41c:	dec00204 	addi	sp,sp,8
 800e420:	f800283a 	ret

0800e424 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e424:	defff904 	addi	sp,sp,-28
 800e428:	dfc00615 	stw	ra,24(sp)
 800e42c:	df000515 	stw	fp,20(sp)
 800e430:	df000504 	addi	fp,sp,20
 800e434:	e13ffc15 	stw	r4,-16(fp)
 800e438:	e17ffd15 	stw	r5,-12(fp)
 800e43c:	e1bffe15 	stw	r6,-8(fp)
 800e440:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800e444:	e0800217 	ldw	r2,8(fp)
 800e448:	d8800015 	stw	r2,0(sp)
 800e44c:	e13ffc17 	ldw	r4,-16(fp)
 800e450:	e17ffd17 	ldw	r5,-12(fp)
 800e454:	e1bffe17 	ldw	r6,-8(fp)
 800e458:	e1ffff17 	ldw	r7,-4(fp)
 800e45c:	800e6040 	call	800e604 <alt_iic_isr_register>
}  
 800e460:	e037883a 	mov	sp,fp
 800e464:	dfc00117 	ldw	ra,4(sp)
 800e468:	df000017 	ldw	fp,0(sp)
 800e46c:	dec00204 	addi	sp,sp,8
 800e470:	f800283a 	ret

0800e474 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800e474:	defff904 	addi	sp,sp,-28
 800e478:	df000615 	stw	fp,24(sp)
 800e47c:	df000604 	addi	fp,sp,24
 800e480:	e13ffe15 	stw	r4,-8(fp)
 800e484:	e17fff15 	stw	r5,-4(fp)
 800e488:	e0bfff17 	ldw	r2,-4(fp)
 800e48c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e490:	0005303a 	rdctl	r2,status
 800e494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e498:	e0fffb17 	ldw	r3,-20(fp)
 800e49c:	00bfff84 	movi	r2,-2
 800e4a0:	1884703a 	and	r2,r3,r2
 800e4a4:	1001703a 	wrctl	status,r2
  
  return context;
 800e4a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e4ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800e4b0:	e0bffa17 	ldw	r2,-24(fp)
 800e4b4:	00c00044 	movi	r3,1
 800e4b8:	1884983a 	sll	r2,r3,r2
 800e4bc:	1007883a 	mov	r3,r2
 800e4c0:	00820074 	movhi	r2,2049
 800e4c4:	108af104 	addi	r2,r2,11204
 800e4c8:	10800017 	ldw	r2,0(r2)
 800e4cc:	1886b03a 	or	r3,r3,r2
 800e4d0:	00820074 	movhi	r2,2049
 800e4d4:	108af104 	addi	r2,r2,11204
 800e4d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e4dc:	00820074 	movhi	r2,2049
 800e4e0:	108af104 	addi	r2,r2,11204
 800e4e4:	10800017 	ldw	r2,0(r2)
 800e4e8:	100170fa 	wrctl	ienable,r2
 800e4ec:	e0bffc17 	ldw	r2,-16(fp)
 800e4f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e4f4:	e0bffd17 	ldw	r2,-12(fp)
 800e4f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e4fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800e500:	0001883a 	nop
}
 800e504:	e037883a 	mov	sp,fp
 800e508:	df000017 	ldw	fp,0(sp)
 800e50c:	dec00104 	addi	sp,sp,4
 800e510:	f800283a 	ret

0800e514 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800e514:	defff904 	addi	sp,sp,-28
 800e518:	df000615 	stw	fp,24(sp)
 800e51c:	df000604 	addi	fp,sp,24
 800e520:	e13ffe15 	stw	r4,-8(fp)
 800e524:	e17fff15 	stw	r5,-4(fp)
 800e528:	e0bfff17 	ldw	r2,-4(fp)
 800e52c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e530:	0005303a 	rdctl	r2,status
 800e534:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e538:	e0fffb17 	ldw	r3,-20(fp)
 800e53c:	00bfff84 	movi	r2,-2
 800e540:	1884703a 	and	r2,r3,r2
 800e544:	1001703a 	wrctl	status,r2
  
  return context;
 800e548:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e54c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800e550:	e0bffa17 	ldw	r2,-24(fp)
 800e554:	00c00044 	movi	r3,1
 800e558:	1884983a 	sll	r2,r3,r2
 800e55c:	0084303a 	nor	r2,zero,r2
 800e560:	1007883a 	mov	r3,r2
 800e564:	00820074 	movhi	r2,2049
 800e568:	108af104 	addi	r2,r2,11204
 800e56c:	10800017 	ldw	r2,0(r2)
 800e570:	1886703a 	and	r3,r3,r2
 800e574:	00820074 	movhi	r2,2049
 800e578:	108af104 	addi	r2,r2,11204
 800e57c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e580:	00820074 	movhi	r2,2049
 800e584:	108af104 	addi	r2,r2,11204
 800e588:	10800017 	ldw	r2,0(r2)
 800e58c:	100170fa 	wrctl	ienable,r2
 800e590:	e0bffc17 	ldw	r2,-16(fp)
 800e594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e598:	e0bffd17 	ldw	r2,-12(fp)
 800e59c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e5a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800e5a4:	0001883a 	nop
}
 800e5a8:	e037883a 	mov	sp,fp
 800e5ac:	df000017 	ldw	fp,0(sp)
 800e5b0:	dec00104 	addi	sp,sp,4
 800e5b4:	f800283a 	ret

0800e5b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800e5b8:	defffc04 	addi	sp,sp,-16
 800e5bc:	df000315 	stw	fp,12(sp)
 800e5c0:	df000304 	addi	fp,sp,12
 800e5c4:	e13ffe15 	stw	r4,-8(fp)
 800e5c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800e5cc:	000530fa 	rdctl	r2,ienable
 800e5d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800e5d4:	e0bfff17 	ldw	r2,-4(fp)
 800e5d8:	00c00044 	movi	r3,1
 800e5dc:	1884983a 	sll	r2,r3,r2
 800e5e0:	1007883a 	mov	r3,r2
 800e5e4:	e0bffd17 	ldw	r2,-12(fp)
 800e5e8:	1884703a 	and	r2,r3,r2
 800e5ec:	1004c03a 	cmpne	r2,r2,zero
 800e5f0:	10803fcc 	andi	r2,r2,255
}
 800e5f4:	e037883a 	mov	sp,fp
 800e5f8:	df000017 	ldw	fp,0(sp)
 800e5fc:	dec00104 	addi	sp,sp,4
 800e600:	f800283a 	ret

0800e604 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e604:	defff504 	addi	sp,sp,-44
 800e608:	dfc00a15 	stw	ra,40(sp)
 800e60c:	df000915 	stw	fp,36(sp)
 800e610:	df000904 	addi	fp,sp,36
 800e614:	e13ffc15 	stw	r4,-16(fp)
 800e618:	e17ffd15 	stw	r5,-12(fp)
 800e61c:	e1bffe15 	stw	r6,-8(fp)
 800e620:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800e624:	00bffa84 	movi	r2,-22
 800e628:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800e62c:	e0bffd17 	ldw	r2,-12(fp)
 800e630:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800e634:	e0bff817 	ldw	r2,-32(fp)
 800e638:	10800808 	cmpgei	r2,r2,32
 800e63c:	1000271e 	bne	r2,zero,800e6dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e640:	0005303a 	rdctl	r2,status
 800e644:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e648:	e0fffa17 	ldw	r3,-24(fp)
 800e64c:	00bfff84 	movi	r2,-2
 800e650:	1884703a 	and	r2,r3,r2
 800e654:	1001703a 	wrctl	status,r2
  
  return context;
 800e658:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800e65c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800e660:	00820074 	movhi	r2,2049
 800e664:	108afe04 	addi	r2,r2,11256
 800e668:	e0fff817 	ldw	r3,-32(fp)
 800e66c:	180690fa 	slli	r3,r3,3
 800e670:	10c5883a 	add	r2,r2,r3
 800e674:	e0fffe17 	ldw	r3,-8(fp)
 800e678:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800e67c:	00820074 	movhi	r2,2049
 800e680:	108afe04 	addi	r2,r2,11256
 800e684:	e0fff817 	ldw	r3,-32(fp)
 800e688:	180690fa 	slli	r3,r3,3
 800e68c:	10c5883a 	add	r2,r2,r3
 800e690:	10800104 	addi	r2,r2,4
 800e694:	e0ffff17 	ldw	r3,-4(fp)
 800e698:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800e69c:	e0bffe17 	ldw	r2,-8(fp)
 800e6a0:	10000526 	beq	r2,zero,800e6b8 <alt_iic_isr_register+0xb4>
 800e6a4:	e0bff817 	ldw	r2,-32(fp)
 800e6a8:	e13ffc17 	ldw	r4,-16(fp)
 800e6ac:	100b883a 	mov	r5,r2
 800e6b0:	800e4740 	call	800e474 <alt_ic_irq_enable>
 800e6b4:	00000406 	br	800e6c8 <alt_iic_isr_register+0xc4>
 800e6b8:	e0bff817 	ldw	r2,-32(fp)
 800e6bc:	e13ffc17 	ldw	r4,-16(fp)
 800e6c0:	100b883a 	mov	r5,r2
 800e6c4:	800e5140 	call	800e514 <alt_ic_irq_disable>
 800e6c8:	e0bff715 	stw	r2,-36(fp)
 800e6cc:	e0bff917 	ldw	r2,-28(fp)
 800e6d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e6d4:	e0bffb17 	ldw	r2,-20(fp)
 800e6d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800e6dc:	e0bff717 	ldw	r2,-36(fp)
}
 800e6e0:	e037883a 	mov	sp,fp
 800e6e4:	dfc00117 	ldw	ra,4(sp)
 800e6e8:	df000017 	ldw	fp,0(sp)
 800e6ec:	dec00204 	addi	sp,sp,8
 800e6f0:	f800283a 	ret

0800e6f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800e6f4:	defff904 	addi	sp,sp,-28
 800e6f8:	dfc00615 	stw	ra,24(sp)
 800e6fc:	df000515 	stw	fp,20(sp)
 800e700:	df000504 	addi	fp,sp,20
 800e704:	e13ffc15 	stw	r4,-16(fp)
 800e708:	e17ffd15 	stw	r5,-12(fp)
 800e70c:	e1bffe15 	stw	r6,-8(fp)
 800e710:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800e714:	e13ffd17 	ldw	r4,-12(fp)
 800e718:	e17ffe17 	ldw	r5,-8(fp)
 800e71c:	e1bfff17 	ldw	r6,-4(fp)
 800e720:	800e9480 	call	800e948 <open>
 800e724:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800e728:	e0bffb17 	ldw	r2,-20(fp)
 800e72c:	10001c16 	blt	r2,zero,800e7a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800e730:	00820074 	movhi	r2,2049
 800e734:	10bf8e04 	addi	r2,r2,-456
 800e738:	e0fffb17 	ldw	r3,-20(fp)
 800e73c:	18c00324 	muli	r3,r3,12
 800e740:	10c5883a 	add	r2,r2,r3
 800e744:	10c00017 	ldw	r3,0(r2)
 800e748:	e0bffc17 	ldw	r2,-16(fp)
 800e74c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800e750:	00820074 	movhi	r2,2049
 800e754:	10bf8e04 	addi	r2,r2,-456
 800e758:	e0fffb17 	ldw	r3,-20(fp)
 800e75c:	18c00324 	muli	r3,r3,12
 800e760:	10c5883a 	add	r2,r2,r3
 800e764:	10800104 	addi	r2,r2,4
 800e768:	10c00017 	ldw	r3,0(r2)
 800e76c:	e0bffc17 	ldw	r2,-16(fp)
 800e770:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800e774:	00820074 	movhi	r2,2049
 800e778:	10bf8e04 	addi	r2,r2,-456
 800e77c:	e0fffb17 	ldw	r3,-20(fp)
 800e780:	18c00324 	muli	r3,r3,12
 800e784:	10c5883a 	add	r2,r2,r3
 800e788:	10800204 	addi	r2,r2,8
 800e78c:	10c00017 	ldw	r3,0(r2)
 800e790:	e0bffc17 	ldw	r2,-16(fp)
 800e794:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800e798:	e13ffb17 	ldw	r4,-20(fp)
 800e79c:	800cd080 	call	800cd08 <alt_release_fd>
  }
} 
 800e7a0:	e037883a 	mov	sp,fp
 800e7a4:	dfc00117 	ldw	ra,4(sp)
 800e7a8:	df000017 	ldw	fp,0(sp)
 800e7ac:	dec00204 	addi	sp,sp,8
 800e7b0:	f800283a 	ret

0800e7b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800e7b4:	defffb04 	addi	sp,sp,-20
 800e7b8:	dfc00415 	stw	ra,16(sp)
 800e7bc:	df000315 	stw	fp,12(sp)
 800e7c0:	df000304 	addi	fp,sp,12
 800e7c4:	e13ffd15 	stw	r4,-12(fp)
 800e7c8:	e17ffe15 	stw	r5,-8(fp)
 800e7cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800e7d0:	01020074 	movhi	r4,2049
 800e7d4:	213f9104 	addi	r4,r4,-444
 800e7d8:	e17ffd17 	ldw	r5,-12(fp)
 800e7dc:	01800044 	movi	r6,1
 800e7e0:	01c07fc4 	movi	r7,511
 800e7e4:	800e6f40 	call	800e6f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800e7e8:	01020074 	movhi	r4,2049
 800e7ec:	213f8e04 	addi	r4,r4,-456
 800e7f0:	e17ffe17 	ldw	r5,-8(fp)
 800e7f4:	000d883a 	mov	r6,zero
 800e7f8:	01c07fc4 	movi	r7,511
 800e7fc:	800e6f40 	call	800e6f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800e800:	01020074 	movhi	r4,2049
 800e804:	213f9404 	addi	r4,r4,-432
 800e808:	e17fff17 	ldw	r5,-4(fp)
 800e80c:	01800044 	movi	r6,1
 800e810:	01c07fc4 	movi	r7,511
 800e814:	800e6f40 	call	800e6f4 <alt_open_fd>
}  
 800e818:	e037883a 	mov	sp,fp
 800e81c:	dfc00117 	ldw	ra,4(sp)
 800e820:	df000017 	ldw	fp,0(sp)
 800e824:	dec00204 	addi	sp,sp,8
 800e828:	f800283a 	ret

0800e82c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e82c:	defffe04 	addi	sp,sp,-8
 800e830:	dfc00115 	stw	ra,4(sp)
 800e834:	df000015 	stw	fp,0(sp)
 800e838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e83c:	00820074 	movhi	r2,2049
 800e840:	10841c04 	addi	r2,r2,4208
 800e844:	10800017 	ldw	r2,0(r2)
 800e848:	10000526 	beq	r2,zero,800e860 <alt_get_errno+0x34>
 800e84c:	00820074 	movhi	r2,2049
 800e850:	10841c04 	addi	r2,r2,4208
 800e854:	10800017 	ldw	r2,0(r2)
 800e858:	103ee83a 	callr	r2
 800e85c:	00000206 	br	800e868 <alt_get_errno+0x3c>
 800e860:	00820074 	movhi	r2,2049
 800e864:	108aed04 	addi	r2,r2,11188
}
 800e868:	e037883a 	mov	sp,fp
 800e86c:	dfc00117 	ldw	ra,4(sp)
 800e870:	df000017 	ldw	fp,0(sp)
 800e874:	dec00204 	addi	sp,sp,8
 800e878:	f800283a 	ret

0800e87c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800e87c:	defffd04 	addi	sp,sp,-12
 800e880:	df000215 	stw	fp,8(sp)
 800e884:	df000204 	addi	fp,sp,8
 800e888:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800e88c:	e0bfff17 	ldw	r2,-4(fp)
 800e890:	10800217 	ldw	r2,8(r2)
 800e894:	10d00034 	orhi	r3,r2,16384
 800e898:	e0bfff17 	ldw	r2,-4(fp)
 800e89c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e8a0:	e03ffe15 	stw	zero,-8(fp)
 800e8a4:	00001d06 	br	800e91c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e8a8:	00820074 	movhi	r2,2049
 800e8ac:	10bf8e04 	addi	r2,r2,-456
 800e8b0:	e0fffe17 	ldw	r3,-8(fp)
 800e8b4:	18c00324 	muli	r3,r3,12
 800e8b8:	10c5883a 	add	r2,r2,r3
 800e8bc:	10c00017 	ldw	r3,0(r2)
 800e8c0:	e0bfff17 	ldw	r2,-4(fp)
 800e8c4:	10800017 	ldw	r2,0(r2)
 800e8c8:	1880111e 	bne	r3,r2,800e910 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e8cc:	00820074 	movhi	r2,2049
 800e8d0:	10bf8e04 	addi	r2,r2,-456
 800e8d4:	e0fffe17 	ldw	r3,-8(fp)
 800e8d8:	18c00324 	muli	r3,r3,12
 800e8dc:	10c5883a 	add	r2,r2,r3
 800e8e0:	10800204 	addi	r2,r2,8
 800e8e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e8e8:	1000090e 	bge	r2,zero,800e910 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800e8ec:	e0bffe17 	ldw	r2,-8(fp)
 800e8f0:	10c00324 	muli	r3,r2,12
 800e8f4:	00820074 	movhi	r2,2049
 800e8f8:	10bf8e04 	addi	r2,r2,-456
 800e8fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e900:	e0bfff17 	ldw	r2,-4(fp)
 800e904:	18800226 	beq	r3,r2,800e910 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800e908:	00bffcc4 	movi	r2,-13
 800e90c:	00000a06 	br	800e938 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e910:	e0bffe17 	ldw	r2,-8(fp)
 800e914:	10800044 	addi	r2,r2,1
 800e918:	e0bffe15 	stw	r2,-8(fp)
 800e91c:	00820074 	movhi	r2,2049
 800e920:	10841b04 	addi	r2,r2,4204
 800e924:	10800017 	ldw	r2,0(r2)
 800e928:	1007883a 	mov	r3,r2
 800e92c:	e0bffe17 	ldw	r2,-8(fp)
 800e930:	18bfdd2e 	bgeu	r3,r2,800e8a8 <__alt_data_end+0xfc00e8a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800e934:	0005883a 	mov	r2,zero
}
 800e938:	e037883a 	mov	sp,fp
 800e93c:	df000017 	ldw	fp,0(sp)
 800e940:	dec00104 	addi	sp,sp,4
 800e944:	f800283a 	ret

0800e948 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800e948:	defff604 	addi	sp,sp,-40
 800e94c:	dfc00915 	stw	ra,36(sp)
 800e950:	df000815 	stw	fp,32(sp)
 800e954:	df000804 	addi	fp,sp,32
 800e958:	e13ffd15 	stw	r4,-12(fp)
 800e95c:	e17ffe15 	stw	r5,-8(fp)
 800e960:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800e964:	00bfffc4 	movi	r2,-1
 800e968:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800e96c:	00bffb44 	movi	r2,-19
 800e970:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800e974:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800e978:	e13ffd17 	ldw	r4,-12(fp)
 800e97c:	01420074 	movhi	r5,2049
 800e980:	29441904 	addi	r5,r5,4196
 800e984:	800e3640 	call	800e364 <alt_find_dev>
 800e988:	e0bff815 	stw	r2,-32(fp)
 800e98c:	e0bff817 	ldw	r2,-32(fp)
 800e990:	1000051e 	bne	r2,zero,800e9a8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800e994:	e13ffd17 	ldw	r4,-12(fp)
 800e998:	800ec5c0 	call	800ec5c <alt_find_file>
 800e99c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800e9a0:	00800044 	movi	r2,1
 800e9a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800e9a8:	e0bff817 	ldw	r2,-32(fp)
 800e9ac:	10002926 	beq	r2,zero,800ea54 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800e9b0:	e13ff817 	ldw	r4,-32(fp)
 800e9b4:	800ed700 	call	800ed70 <alt_get_fd>
 800e9b8:	e0bff915 	stw	r2,-28(fp)
 800e9bc:	e0bff917 	ldw	r2,-28(fp)
 800e9c0:	1000030e 	bge	r2,zero,800e9d0 <open+0x88>
    {
      status = index;
 800e9c4:	e0bff917 	ldw	r2,-28(fp)
 800e9c8:	e0bffa15 	stw	r2,-24(fp)
 800e9cc:	00002306 	br	800ea5c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 800e9d0:	e0bff917 	ldw	r2,-28(fp)
 800e9d4:	10c00324 	muli	r3,r2,12
 800e9d8:	00820074 	movhi	r2,2049
 800e9dc:	10bf8e04 	addi	r2,r2,-456
 800e9e0:	1885883a 	add	r2,r3,r2
 800e9e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800e9e8:	e0fffe17 	ldw	r3,-8(fp)
 800e9ec:	00900034 	movhi	r2,16384
 800e9f0:	10bfffc4 	addi	r2,r2,-1
 800e9f4:	1886703a 	and	r3,r3,r2
 800e9f8:	e0bffc17 	ldw	r2,-16(fp)
 800e9fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ea00:	e0bffb17 	ldw	r2,-20(fp)
 800ea04:	1000051e 	bne	r2,zero,800ea1c <open+0xd4>
 800ea08:	e13ffc17 	ldw	r4,-16(fp)
 800ea0c:	800e87c0 	call	800e87c <alt_file_locked>
 800ea10:	e0bffa15 	stw	r2,-24(fp)
 800ea14:	e0bffa17 	ldw	r2,-24(fp)
 800ea18:	10001016 	blt	r2,zero,800ea5c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800ea1c:	e0bff817 	ldw	r2,-32(fp)
 800ea20:	10800317 	ldw	r2,12(r2)
 800ea24:	10000826 	beq	r2,zero,800ea48 <open+0x100>
 800ea28:	e0bff817 	ldw	r2,-32(fp)
 800ea2c:	10800317 	ldw	r2,12(r2)
 800ea30:	e13ffc17 	ldw	r4,-16(fp)
 800ea34:	e17ffd17 	ldw	r5,-12(fp)
 800ea38:	e1bffe17 	ldw	r6,-8(fp)
 800ea3c:	e1ffff17 	ldw	r7,-4(fp)
 800ea40:	103ee83a 	callr	r2
 800ea44:	00000106 	br	800ea4c <open+0x104>
 800ea48:	0005883a 	mov	r2,zero
 800ea4c:	e0bffa15 	stw	r2,-24(fp)
 800ea50:	00000206 	br	800ea5c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800ea54:	00bffb44 	movi	r2,-19
 800ea58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800ea5c:	e0bffa17 	ldw	r2,-24(fp)
 800ea60:	1000090e 	bge	r2,zero,800ea88 <open+0x140>
  {
    alt_release_fd (index);  
 800ea64:	e13ff917 	ldw	r4,-28(fp)
 800ea68:	800cd080 	call	800cd08 <alt_release_fd>
    ALT_ERRNO = -status;
 800ea6c:	800e82c0 	call	800e82c <alt_get_errno>
 800ea70:	1007883a 	mov	r3,r2
 800ea74:	e0bffa17 	ldw	r2,-24(fp)
 800ea78:	0085c83a 	sub	r2,zero,r2
 800ea7c:	18800015 	stw	r2,0(r3)
    return -1;
 800ea80:	00bfffc4 	movi	r2,-1
 800ea84:	00000106 	br	800ea8c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 800ea88:	e0bff917 	ldw	r2,-28(fp)
}
 800ea8c:	e037883a 	mov	sp,fp
 800ea90:	dfc00117 	ldw	ra,4(sp)
 800ea94:	df000017 	ldw	fp,0(sp)
 800ea98:	dec00204 	addi	sp,sp,8
 800ea9c:	f800283a 	ret

0800eaa0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800eaa0:	defffa04 	addi	sp,sp,-24
 800eaa4:	df000515 	stw	fp,20(sp)
 800eaa8:	df000504 	addi	fp,sp,20
 800eaac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eab0:	0005303a 	rdctl	r2,status
 800eab4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eab8:	e0fffc17 	ldw	r3,-16(fp)
 800eabc:	00bfff84 	movi	r2,-2
 800eac0:	1884703a 	and	r2,r3,r2
 800eac4:	1001703a 	wrctl	status,r2
  
  return context;
 800eac8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800eacc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800ead0:	e0bfff17 	ldw	r2,-4(fp)
 800ead4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800ead8:	e0bffd17 	ldw	r2,-12(fp)
 800eadc:	10800017 	ldw	r2,0(r2)
 800eae0:	e0fffd17 	ldw	r3,-12(fp)
 800eae4:	18c00117 	ldw	r3,4(r3)
 800eae8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800eaec:	e0bffd17 	ldw	r2,-12(fp)
 800eaf0:	10800117 	ldw	r2,4(r2)
 800eaf4:	e0fffd17 	ldw	r3,-12(fp)
 800eaf8:	18c00017 	ldw	r3,0(r3)
 800eafc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800eb00:	e0bffd17 	ldw	r2,-12(fp)
 800eb04:	e0fffd17 	ldw	r3,-12(fp)
 800eb08:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800eb0c:	e0bffd17 	ldw	r2,-12(fp)
 800eb10:	e0fffd17 	ldw	r3,-12(fp)
 800eb14:	10c00015 	stw	r3,0(r2)
 800eb18:	e0bffb17 	ldw	r2,-20(fp)
 800eb1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eb20:	e0bffe17 	ldw	r2,-8(fp)
 800eb24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800eb28:	e037883a 	mov	sp,fp
 800eb2c:	df000017 	ldw	fp,0(sp)
 800eb30:	dec00104 	addi	sp,sp,4
 800eb34:	f800283a 	ret

0800eb38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800eb38:	defffb04 	addi	sp,sp,-20
 800eb3c:	dfc00415 	stw	ra,16(sp)
 800eb40:	df000315 	stw	fp,12(sp)
 800eb44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800eb48:	d0a00e17 	ldw	r2,-32712(gp)
 800eb4c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800eb50:	d0a6e217 	ldw	r2,-25720(gp)
 800eb54:	10800044 	addi	r2,r2,1
 800eb58:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800eb5c:	00002e06 	br	800ec18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800eb60:	e0bffd17 	ldw	r2,-12(fp)
 800eb64:	10800017 	ldw	r2,0(r2)
 800eb68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800eb6c:	e0bffd17 	ldw	r2,-12(fp)
 800eb70:	10800403 	ldbu	r2,16(r2)
 800eb74:	10803fcc 	andi	r2,r2,255
 800eb78:	10000426 	beq	r2,zero,800eb8c <alt_tick+0x54>
 800eb7c:	d0a6e217 	ldw	r2,-25720(gp)
 800eb80:	1000021e 	bne	r2,zero,800eb8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800eb84:	e0bffd17 	ldw	r2,-12(fp)
 800eb88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800eb8c:	e0bffd17 	ldw	r2,-12(fp)
 800eb90:	10800217 	ldw	r2,8(r2)
 800eb94:	d0e6e217 	ldw	r3,-25720(gp)
 800eb98:	18801d36 	bltu	r3,r2,800ec10 <alt_tick+0xd8>
 800eb9c:	e0bffd17 	ldw	r2,-12(fp)
 800eba0:	10800403 	ldbu	r2,16(r2)
 800eba4:	10803fcc 	andi	r2,r2,255
 800eba8:	1000191e 	bne	r2,zero,800ec10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800ebac:	e0bffd17 	ldw	r2,-12(fp)
 800ebb0:	10800317 	ldw	r2,12(r2)
 800ebb4:	e0fffd17 	ldw	r3,-12(fp)
 800ebb8:	18c00517 	ldw	r3,20(r3)
 800ebbc:	1809883a 	mov	r4,r3
 800ebc0:	103ee83a 	callr	r2
 800ebc4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800ebc8:	e0bfff17 	ldw	r2,-4(fp)
 800ebcc:	1000031e 	bne	r2,zero,800ebdc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800ebd0:	e13ffd17 	ldw	r4,-12(fp)
 800ebd4:	800eaa00 	call	800eaa0 <alt_alarm_stop>
 800ebd8:	00000d06 	br	800ec10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800ebdc:	e0bffd17 	ldw	r2,-12(fp)
 800ebe0:	10c00217 	ldw	r3,8(r2)
 800ebe4:	e0bfff17 	ldw	r2,-4(fp)
 800ebe8:	1887883a 	add	r3,r3,r2
 800ebec:	e0bffd17 	ldw	r2,-12(fp)
 800ebf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800ebf4:	e0bffd17 	ldw	r2,-12(fp)
 800ebf8:	10c00217 	ldw	r3,8(r2)
 800ebfc:	d0a6e217 	ldw	r2,-25720(gp)
 800ec00:	1880032e 	bgeu	r3,r2,800ec10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800ec04:	e0bffd17 	ldw	r2,-12(fp)
 800ec08:	00c00044 	movi	r3,1
 800ec0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800ec10:	e0bffe17 	ldw	r2,-8(fp)
 800ec14:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ec18:	e0fffd17 	ldw	r3,-12(fp)
 800ec1c:	d0a00e04 	addi	r2,gp,-32712
 800ec20:	18bfcf1e 	bne	r3,r2,800eb60 <__alt_data_end+0xfc00eb60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800ec24:	0001883a 	nop
}
 800ec28:	e037883a 	mov	sp,fp
 800ec2c:	dfc00117 	ldw	ra,4(sp)
 800ec30:	df000017 	ldw	fp,0(sp)
 800ec34:	dec00204 	addi	sp,sp,8
 800ec38:	f800283a 	ret

0800ec3c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800ec3c:	deffff04 	addi	sp,sp,-4
 800ec40:	df000015 	stw	fp,0(sp)
 800ec44:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800ec48:	000170fa 	wrctl	ienable,zero
}
 800ec4c:	e037883a 	mov	sp,fp
 800ec50:	df000017 	ldw	fp,0(sp)
 800ec54:	dec00104 	addi	sp,sp,4
 800ec58:	f800283a 	ret

0800ec5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800ec5c:	defffb04 	addi	sp,sp,-20
 800ec60:	dfc00415 	stw	ra,16(sp)
 800ec64:	df000315 	stw	fp,12(sp)
 800ec68:	df000304 	addi	fp,sp,12
 800ec6c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800ec70:	00820074 	movhi	r2,2049
 800ec74:	10841704 	addi	r2,r2,4188
 800ec78:	10800017 	ldw	r2,0(r2)
 800ec7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ec80:	00003106 	br	800ed48 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800ec84:	e0bffd17 	ldw	r2,-12(fp)
 800ec88:	10800217 	ldw	r2,8(r2)
 800ec8c:	1009883a 	mov	r4,r2
 800ec90:	800693c0 	call	800693c <strlen>
 800ec94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800ec98:	e0bffd17 	ldw	r2,-12(fp)
 800ec9c:	10c00217 	ldw	r3,8(r2)
 800eca0:	e0bffe17 	ldw	r2,-8(fp)
 800eca4:	10bfffc4 	addi	r2,r2,-1
 800eca8:	1885883a 	add	r2,r3,r2
 800ecac:	10800003 	ldbu	r2,0(r2)
 800ecb0:	10803fcc 	andi	r2,r2,255
 800ecb4:	1080201c 	xori	r2,r2,128
 800ecb8:	10bfe004 	addi	r2,r2,-128
 800ecbc:	10800bd8 	cmpnei	r2,r2,47
 800ecc0:	1000031e 	bne	r2,zero,800ecd0 <alt_find_file+0x74>
    {
      len -= 1;
 800ecc4:	e0bffe17 	ldw	r2,-8(fp)
 800ecc8:	10bfffc4 	addi	r2,r2,-1
 800eccc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ecd0:	e0bffe17 	ldw	r2,-8(fp)
 800ecd4:	e0ffff17 	ldw	r3,-4(fp)
 800ecd8:	1885883a 	add	r2,r3,r2
 800ecdc:	10800003 	ldbu	r2,0(r2)
 800ece0:	10803fcc 	andi	r2,r2,255
 800ece4:	1080201c 	xori	r2,r2,128
 800ece8:	10bfe004 	addi	r2,r2,-128
 800ecec:	10800be0 	cmpeqi	r2,r2,47
 800ecf0:	1000081e 	bne	r2,zero,800ed14 <alt_find_file+0xb8>
 800ecf4:	e0bffe17 	ldw	r2,-8(fp)
 800ecf8:	e0ffff17 	ldw	r3,-4(fp)
 800ecfc:	1885883a 	add	r2,r3,r2
 800ed00:	10800003 	ldbu	r2,0(r2)
 800ed04:	10803fcc 	andi	r2,r2,255
 800ed08:	1080201c 	xori	r2,r2,128
 800ed0c:	10bfe004 	addi	r2,r2,-128
 800ed10:	10000a1e 	bne	r2,zero,800ed3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800ed14:	e0bffd17 	ldw	r2,-12(fp)
 800ed18:	10c00217 	ldw	r3,8(r2)
 800ed1c:	e0bffe17 	ldw	r2,-8(fp)
 800ed20:	1809883a 	mov	r4,r3
 800ed24:	e17fff17 	ldw	r5,-4(fp)
 800ed28:	100d883a 	mov	r6,r2
 800ed2c:	800eefc0 	call	800eefc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ed30:	1000021e 	bne	r2,zero,800ed3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800ed34:	e0bffd17 	ldw	r2,-12(fp)
 800ed38:	00000806 	br	800ed5c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800ed3c:	e0bffd17 	ldw	r2,-12(fp)
 800ed40:	10800017 	ldw	r2,0(r2)
 800ed44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ed48:	e0fffd17 	ldw	r3,-12(fp)
 800ed4c:	00820074 	movhi	r2,2049
 800ed50:	10841704 	addi	r2,r2,4188
 800ed54:	18bfcb1e 	bne	r3,r2,800ec84 <__alt_data_end+0xfc00ec84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800ed58:	0005883a 	mov	r2,zero
}
 800ed5c:	e037883a 	mov	sp,fp
 800ed60:	dfc00117 	ldw	ra,4(sp)
 800ed64:	df000017 	ldw	fp,0(sp)
 800ed68:	dec00204 	addi	sp,sp,8
 800ed6c:	f800283a 	ret

0800ed70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800ed70:	defffc04 	addi	sp,sp,-16
 800ed74:	df000315 	stw	fp,12(sp)
 800ed78:	df000304 	addi	fp,sp,12
 800ed7c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800ed80:	00bffa04 	movi	r2,-24
 800ed84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800ed88:	e03ffd15 	stw	zero,-12(fp)
 800ed8c:	00001d06 	br	800ee04 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800ed90:	00820074 	movhi	r2,2049
 800ed94:	10bf8e04 	addi	r2,r2,-456
 800ed98:	e0fffd17 	ldw	r3,-12(fp)
 800ed9c:	18c00324 	muli	r3,r3,12
 800eda0:	10c5883a 	add	r2,r2,r3
 800eda4:	10800017 	ldw	r2,0(r2)
 800eda8:	1000131e 	bne	r2,zero,800edf8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800edac:	00820074 	movhi	r2,2049
 800edb0:	10bf8e04 	addi	r2,r2,-456
 800edb4:	e0fffd17 	ldw	r3,-12(fp)
 800edb8:	18c00324 	muli	r3,r3,12
 800edbc:	10c5883a 	add	r2,r2,r3
 800edc0:	e0ffff17 	ldw	r3,-4(fp)
 800edc4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800edc8:	00820074 	movhi	r2,2049
 800edcc:	10841b04 	addi	r2,r2,4204
 800edd0:	10c00017 	ldw	r3,0(r2)
 800edd4:	e0bffd17 	ldw	r2,-12(fp)
 800edd8:	1880040e 	bge	r3,r2,800edec <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800eddc:	00820074 	movhi	r2,2049
 800ede0:	10841b04 	addi	r2,r2,4204
 800ede4:	e0fffd17 	ldw	r3,-12(fp)
 800ede8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800edec:	e0bffd17 	ldw	r2,-12(fp)
 800edf0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800edf4:	00000606 	br	800ee10 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800edf8:	e0bffd17 	ldw	r2,-12(fp)
 800edfc:	10800044 	addi	r2,r2,1
 800ee00:	e0bffd15 	stw	r2,-12(fp)
 800ee04:	e0bffd17 	ldw	r2,-12(fp)
 800ee08:	10800810 	cmplti	r2,r2,32
 800ee0c:	103fe01e 	bne	r2,zero,800ed90 <__alt_data_end+0xfc00ed90>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800ee10:	e0bffe17 	ldw	r2,-8(fp)
}
 800ee14:	e037883a 	mov	sp,fp
 800ee18:	df000017 	ldw	fp,0(sp)
 800ee1c:	dec00104 	addi	sp,sp,4
 800ee20:	f800283a 	ret

0800ee24 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800ee24:	defffb04 	addi	sp,sp,-20
 800ee28:	df000415 	stw	fp,16(sp)
 800ee2c:	df000404 	addi	fp,sp,16
 800ee30:	e13ffe15 	stw	r4,-8(fp)
 800ee34:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800ee38:	e0bfff17 	ldw	r2,-4(fp)
 800ee3c:	10840070 	cmpltui	r2,r2,4097
 800ee40:	1000021e 	bne	r2,zero,800ee4c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800ee44:	00840004 	movi	r2,4096
 800ee48:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800ee4c:	e0fffe17 	ldw	r3,-8(fp)
 800ee50:	e0bfff17 	ldw	r2,-4(fp)
 800ee54:	1885883a 	add	r2,r3,r2
 800ee58:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800ee5c:	e0bffe17 	ldw	r2,-8(fp)
 800ee60:	e0bffc15 	stw	r2,-16(fp)
 800ee64:	00000506 	br	800ee7c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800ee68:	e0bffc17 	ldw	r2,-16(fp)
 800ee6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800ee70:	e0bffc17 	ldw	r2,-16(fp)
 800ee74:	10800804 	addi	r2,r2,32
 800ee78:	e0bffc15 	stw	r2,-16(fp)
 800ee7c:	e0fffc17 	ldw	r3,-16(fp)
 800ee80:	e0bffd17 	ldw	r2,-12(fp)
 800ee84:	18bff836 	bltu	r3,r2,800ee68 <__alt_data_end+0xfc00ee68>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800ee88:	e0bffe17 	ldw	r2,-8(fp)
 800ee8c:	108007cc 	andi	r2,r2,31
 800ee90:	10000226 	beq	r2,zero,800ee9c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800ee94:	e0bffc17 	ldw	r2,-16(fp)
 800ee98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800ee9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800eea0:	e037883a 	mov	sp,fp
 800eea4:	df000017 	ldw	fp,0(sp)
 800eea8:	dec00104 	addi	sp,sp,4
 800eeac:	f800283a 	ret

0800eeb0 <atexit>:
 800eeb0:	200b883a 	mov	r5,r4
 800eeb4:	000d883a 	mov	r6,zero
 800eeb8:	0009883a 	mov	r4,zero
 800eebc:	000f883a 	mov	r7,zero
 800eec0:	800ef781 	jmpi	800ef78 <__register_exitproc>

0800eec4 <exit>:
 800eec4:	defffe04 	addi	sp,sp,-8
 800eec8:	000b883a 	mov	r5,zero
 800eecc:	dc000015 	stw	r16,0(sp)
 800eed0:	dfc00115 	stw	ra,4(sp)
 800eed4:	2021883a 	mov	r16,r4
 800eed8:	800f08c0 	call	800f08c <__call_exitprocs>
 800eedc:	00820074 	movhi	r2,2049
 800eee0:	10841104 	addi	r2,r2,4164
 800eee4:	11000017 	ldw	r4,0(r2)
 800eee8:	20800f17 	ldw	r2,60(r4)
 800eeec:	10000126 	beq	r2,zero,800eef4 <exit+0x30>
 800eef0:	103ee83a 	callr	r2
 800eef4:	8009883a 	mov	r4,r16
 800eef8:	800f2200 	call	800f220 <_exit>

0800eefc <memcmp>:
 800eefc:	01c000c4 	movi	r7,3
 800ef00:	3980192e 	bgeu	r7,r6,800ef68 <memcmp+0x6c>
 800ef04:	2144b03a 	or	r2,r4,r5
 800ef08:	11c4703a 	and	r2,r2,r7
 800ef0c:	10000f26 	beq	r2,zero,800ef4c <memcmp+0x50>
 800ef10:	20800003 	ldbu	r2,0(r4)
 800ef14:	28c00003 	ldbu	r3,0(r5)
 800ef18:	10c0151e 	bne	r2,r3,800ef70 <memcmp+0x74>
 800ef1c:	31bfff84 	addi	r6,r6,-2
 800ef20:	01ffffc4 	movi	r7,-1
 800ef24:	00000406 	br	800ef38 <memcmp+0x3c>
 800ef28:	20800003 	ldbu	r2,0(r4)
 800ef2c:	28c00003 	ldbu	r3,0(r5)
 800ef30:	31bfffc4 	addi	r6,r6,-1
 800ef34:	10c00e1e 	bne	r2,r3,800ef70 <memcmp+0x74>
 800ef38:	21000044 	addi	r4,r4,1
 800ef3c:	29400044 	addi	r5,r5,1
 800ef40:	31fff91e 	bne	r6,r7,800ef28 <__alt_data_end+0xfc00ef28>
 800ef44:	0005883a 	mov	r2,zero
 800ef48:	f800283a 	ret
 800ef4c:	20c00017 	ldw	r3,0(r4)
 800ef50:	28800017 	ldw	r2,0(r5)
 800ef54:	1880041e 	bne	r3,r2,800ef68 <memcmp+0x6c>
 800ef58:	31bfff04 	addi	r6,r6,-4
 800ef5c:	21000104 	addi	r4,r4,4
 800ef60:	29400104 	addi	r5,r5,4
 800ef64:	39bff936 	bltu	r7,r6,800ef4c <__alt_data_end+0xfc00ef4c>
 800ef68:	303fe91e 	bne	r6,zero,800ef10 <__alt_data_end+0xfc00ef10>
 800ef6c:	003ff506 	br	800ef44 <__alt_data_end+0xfc00ef44>
 800ef70:	10c5c83a 	sub	r2,r2,r3
 800ef74:	f800283a 	ret

0800ef78 <__register_exitproc>:
 800ef78:	00820074 	movhi	r2,2049
 800ef7c:	defffa04 	addi	sp,sp,-24
 800ef80:	10841104 	addi	r2,r2,4164
 800ef84:	dc000315 	stw	r16,12(sp)
 800ef88:	14000017 	ldw	r16,0(r2)
 800ef8c:	dc400415 	stw	r17,16(sp)
 800ef90:	dfc00515 	stw	ra,20(sp)
 800ef94:	80805217 	ldw	r2,328(r16)
 800ef98:	2023883a 	mov	r17,r4
 800ef9c:	10003626 	beq	r2,zero,800f078 <__register_exitproc+0x100>
 800efa0:	10c00117 	ldw	r3,4(r2)
 800efa4:	010007c4 	movi	r4,31
 800efa8:	20c00e16 	blt	r4,r3,800efe4 <__register_exitproc+0x6c>
 800efac:	1a400044 	addi	r9,r3,1
 800efb0:	8800211e 	bne	r17,zero,800f038 <__register_exitproc+0xc0>
 800efb4:	18c00084 	addi	r3,r3,2
 800efb8:	18c7883a 	add	r3,r3,r3
 800efbc:	18c7883a 	add	r3,r3,r3
 800efc0:	12400115 	stw	r9,4(r2)
 800efc4:	10c7883a 	add	r3,r2,r3
 800efc8:	19400015 	stw	r5,0(r3)
 800efcc:	0005883a 	mov	r2,zero
 800efd0:	dfc00517 	ldw	ra,20(sp)
 800efd4:	dc400417 	ldw	r17,16(sp)
 800efd8:	dc000317 	ldw	r16,12(sp)
 800efdc:	dec00604 	addi	sp,sp,24
 800efe0:	f800283a 	ret
 800efe4:	00800034 	movhi	r2,0
 800efe8:	10800004 	addi	r2,r2,0
 800efec:	10002526 	beq	r2,zero,800f084 <__register_exitproc+0x10c>
 800eff0:	01006404 	movi	r4,400
 800eff4:	d9400015 	stw	r5,0(sp)
 800eff8:	d9800115 	stw	r6,4(sp)
 800effc:	d9c00215 	stw	r7,8(sp)
 800f000:	00000000 	call	0 <__reset-0x8000000>
 800f004:	d9400017 	ldw	r5,0(sp)
 800f008:	d9800117 	ldw	r6,4(sp)
 800f00c:	d9c00217 	ldw	r7,8(sp)
 800f010:	10001c26 	beq	r2,zero,800f084 <__register_exitproc+0x10c>
 800f014:	80c05217 	ldw	r3,328(r16)
 800f018:	10000115 	stw	zero,4(r2)
 800f01c:	02400044 	movi	r9,1
 800f020:	10c00015 	stw	r3,0(r2)
 800f024:	80805215 	stw	r2,328(r16)
 800f028:	10006215 	stw	zero,392(r2)
 800f02c:	10006315 	stw	zero,396(r2)
 800f030:	0007883a 	mov	r3,zero
 800f034:	883fdf26 	beq	r17,zero,800efb4 <__alt_data_end+0xfc00efb4>
 800f038:	18d1883a 	add	r8,r3,r3
 800f03c:	4211883a 	add	r8,r8,r8
 800f040:	1211883a 	add	r8,r2,r8
 800f044:	41802215 	stw	r6,136(r8)
 800f048:	01000044 	movi	r4,1
 800f04c:	11806217 	ldw	r6,392(r2)
 800f050:	20c8983a 	sll	r4,r4,r3
 800f054:	310cb03a 	or	r6,r6,r4
 800f058:	11806215 	stw	r6,392(r2)
 800f05c:	41c04215 	stw	r7,264(r8)
 800f060:	01800084 	movi	r6,2
 800f064:	89bfd31e 	bne	r17,r6,800efb4 <__alt_data_end+0xfc00efb4>
 800f068:	11806317 	ldw	r6,396(r2)
 800f06c:	3108b03a 	or	r4,r6,r4
 800f070:	11006315 	stw	r4,396(r2)
 800f074:	003fcf06 	br	800efb4 <__alt_data_end+0xfc00efb4>
 800f078:	80805304 	addi	r2,r16,332
 800f07c:	80805215 	stw	r2,328(r16)
 800f080:	003fc706 	br	800efa0 <__alt_data_end+0xfc00efa0>
 800f084:	00bfffc4 	movi	r2,-1
 800f088:	003fd106 	br	800efd0 <__alt_data_end+0xfc00efd0>

0800f08c <__call_exitprocs>:
 800f08c:	00820074 	movhi	r2,2049
 800f090:	10841104 	addi	r2,r2,4164
 800f094:	10800017 	ldw	r2,0(r2)
 800f098:	defff404 	addi	sp,sp,-48
 800f09c:	dd800815 	stw	r22,32(sp)
 800f0a0:	d8800015 	stw	r2,0(sp)
 800f0a4:	10805204 	addi	r2,r2,328
 800f0a8:	dd000615 	stw	r20,24(sp)
 800f0ac:	dc800415 	stw	r18,16(sp)
 800f0b0:	dfc00b15 	stw	ra,44(sp)
 800f0b4:	df000a15 	stw	fp,40(sp)
 800f0b8:	ddc00915 	stw	r23,36(sp)
 800f0bc:	dd400715 	stw	r21,28(sp)
 800f0c0:	dcc00515 	stw	r19,20(sp)
 800f0c4:	dc400315 	stw	r17,12(sp)
 800f0c8:	dc000215 	stw	r16,8(sp)
 800f0cc:	2025883a 	mov	r18,r4
 800f0d0:	2829883a 	mov	r20,r5
 800f0d4:	d8800115 	stw	r2,4(sp)
 800f0d8:	05bfffc4 	movi	r22,-1
 800f0dc:	d8800017 	ldw	r2,0(sp)
 800f0e0:	14c05217 	ldw	r19,328(r2)
 800f0e4:	98001d26 	beq	r19,zero,800f15c <__call_exitprocs+0xd0>
 800f0e8:	dd400117 	ldw	r21,4(sp)
 800f0ec:	98800117 	ldw	r2,4(r19)
 800f0f0:	173fffc4 	addi	fp,r2,-1
 800f0f4:	e0000d16 	blt	fp,zero,800f12c <__call_exitprocs+0xa0>
 800f0f8:	14000044 	addi	r16,r2,1
 800f0fc:	8421883a 	add	r16,r16,r16
 800f100:	8421883a 	add	r16,r16,r16
 800f104:	84402004 	addi	r17,r16,128
 800f108:	9c63883a 	add	r17,r19,r17
 800f10c:	9c21883a 	add	r16,r19,r16
 800f110:	a0001e26 	beq	r20,zero,800f18c <__call_exitprocs+0x100>
 800f114:	80804017 	ldw	r2,256(r16)
 800f118:	15001c26 	beq	r2,r20,800f18c <__call_exitprocs+0x100>
 800f11c:	e73fffc4 	addi	fp,fp,-1
 800f120:	843fff04 	addi	r16,r16,-4
 800f124:	8c7fff04 	addi	r17,r17,-4
 800f128:	e5bff91e 	bne	fp,r22,800f110 <__alt_data_end+0xfc00f110>
 800f12c:	00800034 	movhi	r2,0
 800f130:	10800004 	addi	r2,r2,0
 800f134:	10000926 	beq	r2,zero,800f15c <__call_exitprocs+0xd0>
 800f138:	98800117 	ldw	r2,4(r19)
 800f13c:	1000311e 	bne	r2,zero,800f204 <__call_exitprocs+0x178>
 800f140:	98800017 	ldw	r2,0(r19)
 800f144:	10003426 	beq	r2,zero,800f218 <__call_exitprocs+0x18c>
 800f148:	9809883a 	mov	r4,r19
 800f14c:	a8800015 	stw	r2,0(r21)
 800f150:	00000000 	call	0 <__reset-0x8000000>
 800f154:	acc00017 	ldw	r19,0(r21)
 800f158:	983fe41e 	bne	r19,zero,800f0ec <__alt_data_end+0xfc00f0ec>
 800f15c:	dfc00b17 	ldw	ra,44(sp)
 800f160:	df000a17 	ldw	fp,40(sp)
 800f164:	ddc00917 	ldw	r23,36(sp)
 800f168:	dd800817 	ldw	r22,32(sp)
 800f16c:	dd400717 	ldw	r21,28(sp)
 800f170:	dd000617 	ldw	r20,24(sp)
 800f174:	dcc00517 	ldw	r19,20(sp)
 800f178:	dc800417 	ldw	r18,16(sp)
 800f17c:	dc400317 	ldw	r17,12(sp)
 800f180:	dc000217 	ldw	r16,8(sp)
 800f184:	dec00c04 	addi	sp,sp,48
 800f188:	f800283a 	ret
 800f18c:	98800117 	ldw	r2,4(r19)
 800f190:	80c00017 	ldw	r3,0(r16)
 800f194:	10bfffc4 	addi	r2,r2,-1
 800f198:	17001526 	beq	r2,fp,800f1f0 <__call_exitprocs+0x164>
 800f19c:	80000015 	stw	zero,0(r16)
 800f1a0:	183fde26 	beq	r3,zero,800f11c <__alt_data_end+0xfc00f11c>
 800f1a4:	00800044 	movi	r2,1
 800f1a8:	1708983a 	sll	r4,r2,fp
 800f1ac:	98806217 	ldw	r2,392(r19)
 800f1b0:	9dc00117 	ldw	r23,4(r19)
 800f1b4:	2084703a 	and	r2,r4,r2
 800f1b8:	1000061e 	bne	r2,zero,800f1d4 <__call_exitprocs+0x148>
 800f1bc:	183ee83a 	callr	r3
 800f1c0:	98800117 	ldw	r2,4(r19)
 800f1c4:	15ffc51e 	bne	r2,r23,800f0dc <__alt_data_end+0xfc00f0dc>
 800f1c8:	a8800017 	ldw	r2,0(r21)
 800f1cc:	14ffd326 	beq	r2,r19,800f11c <__alt_data_end+0xfc00f11c>
 800f1d0:	003fc206 	br	800f0dc <__alt_data_end+0xfc00f0dc>
 800f1d4:	98806317 	ldw	r2,396(r19)
 800f1d8:	2084703a 	and	r2,r4,r2
 800f1dc:	1000061e 	bne	r2,zero,800f1f8 <__call_exitprocs+0x16c>
 800f1e0:	89400017 	ldw	r5,0(r17)
 800f1e4:	9009883a 	mov	r4,r18
 800f1e8:	183ee83a 	callr	r3
 800f1ec:	003ff406 	br	800f1c0 <__alt_data_end+0xfc00f1c0>
 800f1f0:	9f000115 	stw	fp,4(r19)
 800f1f4:	003fea06 	br	800f1a0 <__alt_data_end+0xfc00f1a0>
 800f1f8:	89000017 	ldw	r4,0(r17)
 800f1fc:	183ee83a 	callr	r3
 800f200:	003fef06 	br	800f1c0 <__alt_data_end+0xfc00f1c0>
 800f204:	98800017 	ldw	r2,0(r19)
 800f208:	982b883a 	mov	r21,r19
 800f20c:	1027883a 	mov	r19,r2
 800f210:	983fb61e 	bne	r19,zero,800f0ec <__alt_data_end+0xfc00f0ec>
 800f214:	003fd106 	br	800f15c <__alt_data_end+0xfc00f15c>
 800f218:	0005883a 	mov	r2,zero
 800f21c:	003ffa06 	br	800f208 <__alt_data_end+0xfc00f208>

0800f220 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800f220:	defffd04 	addi	sp,sp,-12
 800f224:	df000215 	stw	fp,8(sp)
 800f228:	df000204 	addi	fp,sp,8
 800f22c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800f230:	0001883a 	nop
 800f234:	e0bfff17 	ldw	r2,-4(fp)
 800f238:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800f23c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800f240:	10000226 	beq	r2,zero,800f24c <_exit+0x2c>
    ALT_SIM_FAIL();
 800f244:	002af070 	cmpltui	zero,zero,43969
 800f248:	00000106 	br	800f250 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800f24c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800f250:	003fff06 	br	800f250 <__alt_data_end+0xfc00f250>
